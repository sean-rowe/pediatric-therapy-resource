# Network Policies for UPTRMS - Zero Trust Network Security
# Default deny all traffic, then explicitly allow required connections
---
# Default deny all ingress and egress traffic in production namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: uptrms-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
# Allow DNS resolution for all pods (required for service discovery)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-access
  namespace: uptrms-production
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
---
# Allow ingress from Istio ingress gateway
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-from-ingress-gateway
  namespace: uptrms-production
spec:
  podSelector:
    matchLabels:
      app: uptrms-api
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - podSelector:
        matchLabels:
          app: istio-ingressgateway
    ports:
    - protocol: TCP
      port: 8080
---
# Allow API to connect to database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-to-database
  namespace: uptrms-production
spec:
  podSelector:
    matchLabels:
      app: uptrms-api
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: uptrms-data
    - podSelector:
        matchLabels:
          app: mssql
    ports:
    - protocol: TCP
      port: 1433
---
# Allow API to connect to Redis
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-to-redis
  namespace: uptrms-production
spec:
  podSelector:
    matchLabels:
      app: uptrms-api
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: uptrms-data
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 6380  # TLS port
---
# Allow API to connect to RabbitMQ
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-to-rabbitmq
  namespace: uptrms-production
spec:
  podSelector:
    matchLabels:
      app: uptrms-api
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: uptrms-data
    - podSelector:
        matchLabels:
          app: rabbitmq
    ports:
    - protocol: TCP
      port: 5672   # AMQP
    - protocol: TCP
      port: 5671   # AMQP over TLS
---
# Allow API to connect to MinIO
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-to-minio
  namespace: uptrms-production
spec:
  podSelector:
    matchLabels:
      app: uptrms-api
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: uptrms-data
    - podSelector:
        matchLabels:
          app: minio
    ports:
    - protocol: TCP
      port: 9000   # MinIO API
---
# Allow web frontend to connect to API
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: web-to-api
  namespace: uptrms-production
spec:
  podSelector:
    matchLabels:
      app: uptrms-web
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: uptrms-api
    ports:
    - protocol: TCP
      port: 8080
---
# Allow Prometheus to scrape metrics
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-prometheus-scraping
  namespace: uptrms-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: uptrms-monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090   # Prometheus metrics port
---
# Allow health checks from kubelet
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-kubelet-health-checks
  namespace: uptrms-production
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - ipBlock:
        cidr: 0.0.0.0/0  # Kubelet runs on host network
    ports:
    - protocol: TCP
      port: 8080   # Health check port
    - protocol: TCP
      port: 8081   # Readiness port
---
# Database namespace policies
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: uptrms-data
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
# Allow DNS in data namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-access
  namespace: uptrms-data
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
---
# Allow database connections from API
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: database-from-api
  namespace: uptrms-data
spec:
  podSelector:
    matchLabels:
      app: mssql
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: uptrms-production
    - podSelector:
        matchLabels:
          app: uptrms-api
    ports:
    - protocol: TCP
      port: 1433
  - from:
    - namespaceSelector:
        matchLabels:
          name: uptrms-staging
    - podSelector:
        matchLabels:
          app: uptrms-api
    ports:
    - protocol: TCP
      port: 1433
---
# Allow Redis connections from API
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-from-api
  namespace: uptrms-data
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: uptrms-production
    - podSelector:
        matchLabels:
          app: uptrms-api
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 6380
  - from:
    - namespaceSelector:
        matchLabels:
          name: uptrms-staging
    - podSelector:
        matchLabels:
          app: uptrms-api
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 6380
---
# Allow RabbitMQ connections from API
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rabbitmq-from-api
  namespace: uptrms-data
spec:
  podSelector:
    matchLabels:
      app: rabbitmq
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: uptrms-production
    - podSelector:
        matchLabels:
          app: uptrms-api
    ports:
    - protocol: TCP
      port: 5672
    - protocol: TCP
      port: 5671
  - from:
    - namespaceSelector:
        matchLabels:
          name: uptrms-staging
    - podSelector:
        matchLabels:
          app: uptrms-api
    ports:
    - protocol: TCP
      port: 5672
    - protocol: TCP
      port: 5671
---
# Allow MinIO connections from API
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: minio-from-api
  namespace: uptrms-data
spec:
  podSelector:
    matchLabels:
      app: minio
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: uptrms-production
    - podSelector:
        matchLabels:
          app: uptrms-api
    ports:
    - protocol: TCP
      port: 9000
  - from:
    - namespaceSelector:
        matchLabels:
          name: uptrms-staging
    - podSelector:
        matchLabels:
          app: uptrms-api
    ports:
    - protocol: TCP
      port: 9000
---
# Allow inter-service communication within data tier
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: data-tier-internal
  namespace: uptrms-data
spec:
  podSelector:
    matchLabels:
      tier: data
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          tier: data
  egress:
  - to:
    - podSelector:
        matchLabels:
          tier: data
---
# Monitoring namespace policies
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: prometheus-egress
  namespace: uptrms-monitoring
spec:
  podSelector:
    matchLabels:
      app: prometheus
  policyTypes:
  - Egress
  egress:
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow scraping all namespaces
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 9090   # Metrics port
    - protocol: TCP
      port: 8080   # Alternative metrics
---
# Grafana network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: grafana-policy
  namespace: uptrms-monitoring
spec:
  podSelector:
    matchLabels:
      app: grafana
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - podSelector:
        matchLabels:
          app: istio-ingressgateway
    ports:
    - protocol: TCP
      port: 3000
  egress:
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow connection to Prometheus
  - to:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090
---
# Logging namespace policies
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: elasticsearch-policy
  namespace: uptrms-logging
spec:
  podSelector:
    matchLabels:
      app: elasticsearch
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # From Fluentd
  - from:
    - podSelector:
        matchLabels:
          app: fluentd
    ports:
    - protocol: TCP
      port: 9200
  # From Kibana
  - from:
    - podSelector:
        matchLabels:
          app: kibana
    ports:
    - protocol: TCP
      port: 9200
  # Inter-node communication
  - from:
    - podSelector:
        matchLabels:
          app: elasticsearch
    ports:
    - protocol: TCP
      port: 9300
  egress:
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Inter-node communication
  - to:
    - podSelector:
        matchLabels:
          app: elasticsearch
    ports:
    - protocol: TCP
      port: 9300
---
# Fluentd network policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: fluentd-policy
  namespace: uptrms-logging
spec:
  podSelector:
    matchLabels:
      app: fluentd
  policyTypes:
  - Egress
  egress:
  # Allow DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    - podSelector:
        matchLabels:
          k8s-app: kube-dns
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow connection to Elasticsearch
  - to:
    - podSelector:
        matchLabels:
          app: elasticsearch
    ports:
    - protocol: TCP
      port: 9200