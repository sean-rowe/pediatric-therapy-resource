# Pod Security Policies for UPTRMS
# Enforces security standards for all pods in the cluster
---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: uptrms-restricted
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName: 'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'
spec:
  # Don't allow privileged pods
  privileged: false
  # Don't allow privilege escalation
  allowPrivilegeEscalation: false
  # Require the pod to run with a non-root user
  runAsUser:
    rule: 'MustRunAsNonRoot'
  # Require the pod to run with specific group
  runAsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1000
      max: 65535
  # Require the FSGroup to be specified
  fsGroup:
    rule: 'MustRunAs'
    ranges:
    - min: 1000
      max: 65535
  # Don't allow host namespaces
  hostNetwork: false
  hostIPC: false
  hostPID: false
  # Require specific SELinux context
  seLinux:
    rule: 'RunAsAny'
  # Restrict volume types
  volumes:
  - 'configMap'
  - 'emptyDir'
  - 'projected'
  - 'secret'
  - 'downwardAPI'
  - 'persistentVolumeClaim'
  # Drop all capabilities and only add back what's needed
  requiredDropCapabilities:
  - ALL
  allowedCapabilities: []
  # Read-only root filesystem
  readOnlyRootFilesystem: true
  # Restrict host ports
  hostPorts: []
  # Forbid adding to the default set of capabilities
  defaultAddCapabilities: []
---
# Less restrictive policy for system components
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: uptrms-system
spec:
  privileged: false
  allowPrivilegeEscalation: false
  runAsUser:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  volumes:
  - '*'
  hostNetwork: true
  hostPorts:
  - min: 0
    max: 65535
  hostIPC: false
  hostPID: false
  requiredDropCapabilities:
  - AUDIT_WRITE
  - MKNOD
  - SETFCAP
  - SETPCAP
  allowedCapabilities:
  - NET_BIND_SERVICE
  - CHOWN
  - DAC_OVERRIDE
  - FOWNER
  - SETGID
  - SETUID
  readOnlyRootFilesystem: false
---
# ClusterRole for restricted PSP
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: uptrms-restricted-psp-user
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - uptrms-restricted
---
# ClusterRole for system PSP
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: uptrms-system-psp-user
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - uptrms-system
---
# Bind restricted PSP to all service accounts in uptrms namespaces
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: uptrms-restricted-psp-all-serviceaccounts
roleRef:
  kind: ClusterRole
  name: uptrms-restricted-psp-user
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:uptrms-production
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: system:serviceaccounts:uptrms-staging
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: system:serviceaccounts:uptrms-development
  apiGroup: rbac.authorization.k8s.io
---
# Bind system PSP to specific system components
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: uptrms-system-psp-system-serviceaccounts
roleRef:
  kind: ClusterRole
  name: uptrms-system-psp-user
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: Group
  name: system:serviceaccounts:uptrms-data
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: system:serviceaccounts:uptrms-monitoring
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: system:serviceaccounts:uptrms-logging
  apiGroup: rbac.authorization.k8s.io
- kind: Group
  name: system:serviceaccounts:istio-system
  apiGroup: rbac.authorization.k8s.io
---
# Pod Security Standards (for newer K8s versions)
apiVersion: v1
kind: Namespace
metadata:
  name: uptrms-production
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
---
apiVersion: v1
kind: Namespace
metadata:
  name: uptrms-staging
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
---
apiVersion: v1
kind: Namespace
metadata:
  name: uptrms-development
  labels:
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
---
# Security Context Constraints (for OpenShift compatibility)
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: uptrms-restricted-scc
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: false
allowPrivilegedContainer: false
allowedCapabilities: []
defaultAddCapabilities: []
fsGroup:
  type: MustRunAs
  ranges:
  - min: 1000
    max: 65535
priority: null
readOnlyRootFilesystem: true
requiredDropCapabilities:
- ALL
runAsUser:
  type: MustRunAsNonRoot
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: MustRunAs
  ranges:
  - min: 1000
    max: 65535
users: []
groups: []
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret