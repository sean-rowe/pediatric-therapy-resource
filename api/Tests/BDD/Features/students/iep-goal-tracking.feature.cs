// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Students
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class IEPGoalTrackingFeature : object, Xunit.IClassFixture<IEPGoalTrackingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "iep-goal-tracking.feature"
#line hidden
        
        public IEPGoalTrackingFeature(IEPGoalTrackingFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/students", "IEP Goal Tracking", "  As a therapist\n  I want to create and track IEP goals\n  So that I can monitor s" +
                    "tudent progress and meet compliance requirements", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("I am logged in as a therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I have a student \"Emma Wilson\" with an active IEP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("the current date is \"2024-01-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a valid IEP goal")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Create a valid IEP goal")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateAValidIEPGoal()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a valid IEP goal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2884 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2884.AddRow(new string[] {
                            "Goal Number",
                            "OT-1"});
                table2884.AddRow(new string[] {
                            "Goal Area",
                            "Fine Motor"});
                table2884.AddRow(new string[] {
                            "Goal Text",
                            "Emma will improve handwriting legibility to form all lowercase letters correctly"});
                table2884.AddRow(new string[] {
                            "Measurement Method",
                            "4 out of 5 trials with 80% accuracy"});
                table2884.AddRow(new string[] {
                            "Baseline",
                            "Currently forms 12 of 26 letters correctly (46%)"});
                table2884.AddRow(new string[] {
                            "Target Date",
                            "2024-06-15"});
#line 15
      testRunner.When("I create a goal with:", ((string)(null)), table2884, "When ");
#line hidden
#line 23
      testRunner.Then("the goal is created successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
      testRunner.And("the goal status is \"active\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
      testRunner.And("the goal is linked to student \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
      testRunner.And("I am assigned as the responsible therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Goal validation rules")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Goal validation rules")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        [Xunit.InlineDataAttribute("Goal Text", "Goal text is required", new string[0])]
        [Xunit.InlineDataAttribute("Measurement Method", "Measurement method is required", new string[0])]
        [Xunit.InlineDataAttribute("Target Date", "Target date is required", new string[0])]
        public void GoalValidationRules(string field, string error, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "not-implemented"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("field", field);
            argumentsOfScenario.Add("error", error);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Goal validation rules", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 30
      testRunner.When(string.Format("I attempt to create a goal without \"{0}\"", field), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
      testRunner.Then(string.Format("the creation fails with error \"{0}\"", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Target date must be in the future")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Target date must be in the future")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TargetDateMustBeInTheFuture()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Target date must be in the future", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 41
      testRunner.When("I attempt to create a goal with target date \"2023-12-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
      testRunner.Then("the creation fails with error \"Target date must be in the future\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Goal number must be unique per student")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Goal number must be unique per student")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GoalNumberMustBeUniquePerStudent()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Goal number must be unique per student", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 46
      testRunner.Given("\"Emma Wilson\" has a goal numbered \"OT-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
      testRunner.When("I attempt to create another goal numbered \"OT-1\" for \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
      testRunner.Then("the creation fails with error \"Goal number already exists for this student\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record progress on a goal")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Record progress on a goal")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordProgressOnAGoal()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record progress on a goal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 54
      testRunner.Given("\"Emma Wilson\" has goal \"OT-1\" for handwriting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2885 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2885.AddRow(new string[] {
                            "Date",
                            "2024-02-15"});
                table2885.AddRow(new string[] {
                            "Progress Rating",
                            "3"});
                table2885.AddRow(new string[] {
                            "Trials Attempted",
                            "5"});
                table2885.AddRow(new string[] {
                            "Trials Successful",
                            "4"});
                table2885.AddRow(new string[] {
                            "Independence Level",
                            "Minimal assistance"});
                table2885.AddRow(new string[] {
                            "Notes",
                            "Showed improvement with letter formation"});
#line 55
      testRunner.When("I record progress:", ((string)(null)), table2885, "When ");
#line hidden
#line 63
      testRunner.Then("the progress entry is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
      testRunner.And("the goal\'s current performance is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
      testRunner.And("the progress appears in the goal timeline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate progress percentage")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Calculate progress percentage")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CalculateProgressPercentage()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate progress percentage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 69
      testRunner.Given("\"Emma Wilson\" has goal \"OT-1\" with baseline \"46%\" and target \"80%\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2886 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Performance"});
                table2886.AddRow(new string[] {
                            "2024-01-30",
                            "52%"});
                table2886.AddRow(new string[] {
                            "2024-02-15",
                            "58%"});
                table2886.AddRow(new string[] {
                            "2024-03-01",
                            "65%"});
#line 70
      testRunner.And("the following progress entries exist:", ((string)(null)), table2886, "And ");
#line hidden
#line 75
      testRunner.When("I view the goal progress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
      testRunner.Then("I see the current performance is \"65%\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
      testRunner.And("the progress toward target is \"56%\" ((65-46)/(80-46))", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
      testRunner.And("the trend shows \"improving\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Progress entries must be dated")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Progress entries must be dated")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ProgressEntriesMustBeDated()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Progress entries must be dated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 82
      testRunner.Given("\"Emma Wilson\" has goal \"OT-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
      testRunner.When("I attempt to record progress without a date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
      testRunner.Then("the save fails with error \"Progress date is required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot record future progress")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Cannot record future progress")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CannotRecordFutureProgress()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot record future progress", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 87
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 88
      testRunner.Given("\"Emma Wilson\" has goal \"OT-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 89
      testRunner.When("I attempt to record progress for date \"2024-12-31\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
      testRunner.Then("the save fails with error \"Cannot record progress for future dates\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Mark goal as met")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Mark goal as met")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MarkGoalAsMet()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mark goal as met", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 96
      testRunner.Given("\"Emma Wilson\" has goal \"OT-1\" with target \"80% accuracy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
      testRunner.And("recent progress shows \"82% accuracy\" consistently", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
      testRunner.When("I update the goal status to \"met\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
      testRunner.Then("the goal status changes to \"met\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2887 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2887.AddRow(new string[] {
                            "Date Met",
                            "2024-03-15"});
                table2887.AddRow(new string[] {
                            "Final Performance",
                            "82% accuracy in letter formation"});
                table2887.AddRow(new string[] {
                            "Next Steps",
                            "Maintain skill in classroom setting"});
#line 100
      testRunner.And("I must provide outcome data:", ((string)(null)), table2887, "And ");
#line hidden
#line 105
      testRunner.And("an audit log entry is created for \"goal_met\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Discontinue a goal")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Discontinue a goal")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DiscontinueAGoal()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Discontinue a goal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 109
      testRunner.Given("\"Emma Wilson\" has goal \"OT-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 110
      testRunner.When("I update the goal status to \"discontinued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2888 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2888.AddRow(new string[] {
                            "Reason",
                            "Student moved to different service model"});
                table2888.AddRow(new string[] {
                            "Date Discontinued",
                            "2024-02-28"});
                table2888.AddRow(new string[] {
                            "Final Notes",
                            "Recommend reassessment in new setting"});
#line 111
      testRunner.Then("I must provide a reason:", ((string)(null)), table2888, "Then ");
#line hidden
#line 116
      testRunner.And("the goal status changes to \"discontinued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
      testRunner.And("an audit log entry is created for \"goal_discontinued\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Extend goal target date")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Extend goal target date")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ExtendGoalTargetDate()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Extend goal target date", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 121
      testRunner.Given("\"Emma Wilson\" has goal \"OT-1\" with target date \"2024-06-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
      testRunner.When("I extend the target date to \"2024-12-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2889 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2889.AddRow(new string[] {
                            "New Date",
                            "2024-12-15"});
                table2889.AddRow(new string[] {
                            "Justification",
                            "Progress slower than expected due to medical absence"});
#line 123
      testRunner.Then("I must provide justification:", ((string)(null)), table2889, "Then ");
#line hidden
#line 127
      testRunner.And("the target date is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
      testRunner.And("the change is recorded in goal history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiple therapists track same goal")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Multiple therapists track same goal")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MultipleTherapistsTrackSameGoal()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple therapists track same goal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 133
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 134
      testRunner.Given("\"Emma Wilson\" has goal \"OT-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 135
      testRunner.And("I am the primary therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
      testRunner.And("\"John Smith\" is a supporting therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
      testRunner.When("\"John Smith\" records progress on the goal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
      testRunner.Then("the progress entry shows \"Recorded by: John Smith\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
      testRunner.And("I receive a notification of the update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parent visibility of goals")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Parent visibility of goals")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ParentVisibilityOfGoals()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parent visibility of goals", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 142
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 143
      testRunner.Given("\"Emma Wilson\" has active goals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 144
      testRunner.And("parent \"Lisa Wilson\" has portal access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
      testRunner.When("\"Lisa Wilson\" views goals in parent portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
      testRunner.Then("she sees goal text and current progress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
      testRunner.But("she cannot see clinical notes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
#line 148
      testRunner.And("she cannot modify goals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create goal with state standard alignment")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Create goal with state standard alignment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateGoalWithStateStandardAlignment()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create goal with state standard alignment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 153
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2890 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table2890.AddRow(new string[] {
                            "Goal Text",
                            "Student will demonstrate grade-level writing skills"});
                table2890.AddRow(new string[] {
                            "State Standard",
                            "TX.ELA.3.11A - Plan drafts by generating ideas"});
#line 154
      testRunner.When("I create a goal with:", ((string)(null)), table2890, "When ");
#line hidden
#line 158
      testRunner.Then("the goal is linked to state standard \"TX.ELA.3.11A\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
      testRunner.And("the goal appears in state compliance reports", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate goal measurability")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Validate goal measurability")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ValidateGoalMeasurability()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate goal measurability", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 162
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 163
      testRunner.When("I attempt to create a goal with measurement method \"Student will try hard\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
      testRunner.Then("validation warns \"Measurement method must be quantifiable\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 165
      testRunner.And("suggests examples: \"4/5 trials\", \"80% accuracy\", \"independently\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate goal progress report")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Generate goal progress report")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateGoalProgressReport()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate goal progress report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 170
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 171
      testRunner.Given("\"Emma Wilson\" has multiple goals with progress data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 172
      testRunner.When("I generate a progress report for date range \"2024-01-01\" to \"2024-03-31\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2891 = new TechTalk.SpecFlow.Table(new string[] {
                            "Section",
                            "Content"});
                table2891.AddRow(new string[] {
                            "Goals Summary",
                            "Total: 3, Met: 1, Active: 2"});
                table2891.AddRow(new string[] {
                            "Progress Charts",
                            "Line graphs for each goal"});
                table2891.AddRow(new string[] {
                            "Session Correlation",
                            "Goals addressed per session"});
                table2891.AddRow(new string[] {
                            "Therapist Notes",
                            "Combined progress notes"});
#line 173
      testRunner.Then("the report includes:", ((string)(null)), table2891, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View goal success metrics")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "View goal success metrics")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewGoalSuccessMetrics()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View goal success metrics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 181
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 182
      testRunner.Given("multiple students have goals in \"Fine Motor\" area", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 183
      testRunner.When("I view analytics for \"Fine Motor\" goals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2892 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Value"});
                table2892.AddRow(new string[] {
                            "Average Time to Master",
                            "4.2 months"});
                table2892.AddRow(new string[] {
                            "Success Rate",
                            "78%"});
                table2892.AddRow(new string[] {
                            "Most Effective Methods",
                            "Visual cues, Hand-over-hand"});
#line 184
      testRunner.Then("I see:", ((string)(null)), table2892, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Predict goal achievement")]
        [Xunit.TraitAttribute("FeatureTitle", "IEP Goal Tracking")]
        [Xunit.TraitAttribute("Description", "Predict goal achievement")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PredictGoalAchievement()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Predict goal achievement", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 191
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 192
      testRunner.Given("\"Emma Wilson\" has goal \"OT-1\" with 6 months of progress data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 193
      testRunner.When("the system analyzes progress trends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2893 = new TechTalk.SpecFlow.Table(new string[] {
                            "Prediction",
                            "Value"});
                table2893.AddRow(new string[] {
                            "Likely Achievement Date",
                            "2024-05-20"});
                table2893.AddRow(new string[] {
                            "Confidence Level",
                            "75%"});
                table2893.AddRow(new string[] {
                            "Risk Factors",
                            "Attendance"});
#line 194
      testRunner.Then("it predicts:", ((string)(null)), table2893, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                IEPGoalTrackingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                IEPGoalTrackingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
