// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Auth
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SubscriptionManagementAPIEndpointsFeature : object, Xunit.IClassFixture<SubscriptionManagementAPIEndpointsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "subscription-management.feature"
#line hidden
        
        public SubscriptionManagementAPIEndpointsFeature(SubscriptionManagementAPIEndpointsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/auth", "Subscription Management API Endpoints", "  As a platform user\n  I want to manage my subscription\n  So that I can access th" +
                    "e features I need", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table494 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "name",
                        "price",
                        "features"});
            table494.AddRow(new string[] {
                        "basic",
                        "Basic",
                        "9.95",
                        "Limited features"});
            table494.AddRow(new string[] {
                        "pro",
                        "Pro",
                        "19.95",
                        "Full platform access"});
            table494.AddRow(new string[] {
                        "team",
                        "Small Team",
                        "15",
                        "Per user, 5-20 users"});
            table494.AddRow(new string[] {
                        "enterprise",
                        "Enterprise",
                        "custom",
                        "50+ users, SSO"});
#line 9
    testRunner.And("the following subscription plans exist:", ((string)(null)), table494, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get available subscription plans")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get available subscription plans")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetAvailableSubscriptionPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get available subscription plans", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 19
    testRunner.When("I send a GET request to \"/api/subscriptions/plans\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table495 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table495.AddRow(new string[] {
                            "id",
                            "string"});
                table495.AddRow(new string[] {
                            "name",
                            "string"});
                table495.AddRow(new string[] {
                            "price",
                            "number"});
                table495.AddRow(new string[] {
                            "currency",
                            "string"});
                table495.AddRow(new string[] {
                            "interval",
                            "string"});
                table495.AddRow(new string[] {
                            "features",
                            "array"});
                table495.AddRow(new string[] {
                            "limits",
                            "object"});
                table495.AddRow(new string[] {
                            "popular",
                            "boolean"});
#line 21
    testRunner.And("the auth response should contain array of:", ((string)(null)), table495, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get current subscription details")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get current subscription details")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetCurrentSubscriptionDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get current subscription details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 35
    testRunner.Given("I have an active \"pro\" subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
    testRunner.When("I send a GET request to \"/api/subscriptions/current\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table496 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table496.AddRow(new string[] {
                            "planId",
                            "string"});
                table496.AddRow(new string[] {
                            "planName",
                            "string"});
                table496.AddRow(new string[] {
                            "status",
                            "string"});
                table496.AddRow(new string[] {
                            "currentPeriodEnd",
                            "string"});
                table496.AddRow(new string[] {
                            "cancelAtPeriodEnd",
                            "boolean"});
                table496.AddRow(new string[] {
                            "usage",
                            "object"});
                table496.AddRow(new string[] {
                            "limits",
                            "object"});
#line 38
    testRunner.And("the response should contain:", ((string)(null)), table496, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Subscribe to a new plan")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Subscribe to a new plan")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubscribeToANewPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe to a new plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 51
    testRunner.Given("I have no active subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table497 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table497.AddRow(new string[] {
                            "planId",
                            "pro"});
                table497.AddRow(new string[] {
                            "paymentMethod",
                            "pm_test_visa"});
#line 52
    testRunner.When("I send a POST request to \"/api/subscriptions/subscribe\" with:", ((string)(null)), table497, "When ");
#line hidden
#line 56
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table498 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table498.AddRow(new string[] {
                            "subscriptionId",
                            "string"});
                table498.AddRow(new string[] {
                            "status",
                            "string"});
                table498.AddRow(new string[] {
                            "invoice",
                            "object"});
#line 57
    testRunner.And("the response should contain:", ((string)(null)), table498, "And ");
#line hidden
#line 62
    testRunner.And("a subscription should be created in Stripe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And("a welcome email should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Require payment method for paid plans")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Require payment method for paid plans")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RequirePaymentMethodForPaidPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Require payment method for paid plans", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table499 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table499.AddRow(new string[] {
                            "planId",
                            "pro"});
#line 67
    testRunner.When("I send a POST request to \"/api/subscriptions/subscribe\" with:", ((string)(null)), table499, "When ");
#line hidden
#line 70
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.And("the response should contain error \"Payment method required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Upgrade subscription plan")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Upgrade subscription plan")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpgradeSubscriptionPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upgrade subscription plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 76
    testRunner.Given("I have an active \"basic\" subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table500 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table500.AddRow(new string[] {
                            "planId",
                            "pro"});
#line 77
    testRunner.When("I send a PUT request to \"/api/subscriptions/upgrade\" with:", ((string)(null)), table500, "When ");
#line hidden
#line 80
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table501 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table501.AddRow(new string[] {
                            "status",
                            "string"});
                table501.AddRow(new string[] {
                            "proratedAmount",
                            "number"});
                table501.AddRow(new string[] {
                            "effectiveDate",
                            "string"});
#line 81
    testRunner.And("the response should contain:", ((string)(null)), table501, "And ");
#line hidden
#line 86
    testRunner.And("the subscription should be upgraded immediately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.And("a prorated charge should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Downgrade subscription plan")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Downgrade subscription plan")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DowngradeSubscriptionPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Downgrade subscription plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 92
    testRunner.Given("I have an active \"pro\" subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table502 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table502.AddRow(new string[] {
                            "planId",
                            "basic"});
#line 93
    testRunner.When("I send a PUT request to \"/api/subscriptions/downgrade\" with:", ((string)(null)), table502, "When ");
#line hidden
#line 96
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table503 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table503.AddRow(new string[] {
                            "status",
                            "string"});
                table503.AddRow(new string[] {
                            "effectiveDate",
                            "string"});
                table503.AddRow(new string[] {
                            "credit",
                            "number"});
#line 97
    testRunner.And("the response should contain:", ((string)(null)), table503, "And ");
#line hidden
#line 102
    testRunner.And("the downgrade should take effect at period end", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
    testRunner.And("a credit should be applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prevent downgrade if usage exceeds new plan limits")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Prevent downgrade if usage exceeds new plan limits")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PreventDowngradeIfUsageExceedsNewPlanLimits()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prevent downgrade if usage exceeds new plan limits", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 107
    testRunner.Given("I have an active \"pro\" subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
    testRunner.And("I have 100 students (basic limit is 10)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table504 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table504.AddRow(new string[] {
                            "planId",
                            "basic"});
#line 109
    testRunner.When("I send a PUT request to \"/api/subscriptions/downgrade\" with:", ((string)(null)), table504, "When ");
#line hidden
#line 112
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
    testRunner.And("the response should contain error \"Current usage exceeds basic plan limits\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancel subscription")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Cancel subscription")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CancelSubscription()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel subscription", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 117
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 118
    testRunner.Given("I have an active \"pro\" subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table505 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table505.AddRow(new string[] {
                            "reason",
                            "Too expensive"});
                table505.AddRow(new string[] {
                            "feedback",
                            "Would use if cheaper"});
                table505.AddRow(new string[] {
                            "cancelImmediately",
                            "false"});
#line 119
    testRunner.When("I send a POST request to \"/api/subscriptions/cancel\" with:", ((string)(null)), table505, "When ");
#line hidden
#line 124
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table506 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table506.AddRow(new string[] {
                            "cancelDate",
                            "string"});
                table506.AddRow(new string[] {
                            "accessUntil",
                            "string"});
                table506.AddRow(new string[] {
                            "refundAmount",
                            "number"});
#line 125
    testRunner.And("the response should contain:", ((string)(null)), table506, "And ");
#line hidden
#line 130
    testRunner.And("the subscription should be marked for cancellation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
    testRunner.And("a cancellation email should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
    testRunner.And("the feedback should be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get subscription invoices")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get subscription invoices")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetSubscriptionInvoices()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get subscription invoices", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 137
    testRunner.Given("I have subscription invoices", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 138
    testRunner.When("I send a GET request to \"/api/subscriptions/invoices\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table507 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table507.AddRow(new string[] {
                            "id",
                            "string"});
                table507.AddRow(new string[] {
                            "number",
                            "string"});
                table507.AddRow(new string[] {
                            "date",
                            "string"});
                table507.AddRow(new string[] {
                            "amount",
                            "number"});
                table507.AddRow(new string[] {
                            "status",
                            "string"});
                table507.AddRow(new string[] {
                            "downloadUrl",
                            "string"});
#line 140
    testRunner.And("the auth response should contain array of:", ((string)(null)), table507, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get saved payment methods")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get saved payment methods")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetSavedPaymentMethods()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get saved payment methods", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 151
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 152
    testRunner.Given("I have saved payment methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 153
    testRunner.When("I send a GET request to \"/api/subscriptions/payment-methods\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 154
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table508 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table508.AddRow(new string[] {
                            "id",
                            "string"});
                table508.AddRow(new string[] {
                            "type",
                            "string"});
                table508.AddRow(new string[] {
                            "last4",
                            "string"});
                table508.AddRow(new string[] {
                            "brand",
                            "string"});
                table508.AddRow(new string[] {
                            "expMonth",
                            "number"});
                table508.AddRow(new string[] {
                            "expYear",
                            "number"});
                table508.AddRow(new string[] {
                            "isDefault",
                            "boolean"});
#line 155
    testRunner.And("the auth response should contain array of:", ((string)(null)), table508, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add new payment method")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Add new payment method")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AddNewPaymentMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new payment method", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 167
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table509 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table509.AddRow(new string[] {
                            "paymentMethodId",
                            "pm_test_mastercard"});
                table509.AddRow(new string[] {
                            "setAsDefault",
                            "true"});
#line 168
    testRunner.When("I send a POST request to \"/api/subscriptions/payment-methods\" with:", ((string)(null)), table509, "When ");
#line hidden
#line 172
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table510 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table510.AddRow(new string[] {
                            "id",
                            "string"});
                table510.AddRow(new string[] {
                            "last4",
                            "4444"});
                table510.AddRow(new string[] {
                            "brand",
                            "Mastercard"});
#line 173
    testRunner.And("the response should contain:", ((string)(null)), table510, "And ");
#line hidden
#line 178
    testRunner.And("the payment method should be saved in Stripe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
    testRunner.And("it should be set as default", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Remove payment method")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Remove payment method")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RemovePaymentMethod()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove payment method", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 183
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 184
    testRunner.Given("I have multiple payment methods", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 185
    testRunner.And("payment method \"pm_123\" is not the default", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
    testRunner.When("I send a DELETE request to \"/api/subscriptions/payment-methods/pm_123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 187
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 188
    testRunner.And("the payment method should be removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
    testRunner.And("the response should contain message \"Payment method removed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot remove default payment method with active subscription")]
        [Xunit.TraitAttribute("FeatureTitle", "Subscription Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Cannot remove default payment method with active subscription")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "subscriptions")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CannotRemoveDefaultPaymentMethodWithActiveSubscription()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "subscriptions",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot remove default payment method with active subscription", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 192
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 193
    testRunner.Given("I have an active subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 194
    testRunner.And("payment method \"pm_default\" is the default", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
    testRunner.When("I send a DELETE request to \"/api/subscriptions/payment-methods/pm_default\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 196
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 197
    testRunner.And("the response should contain error \"Cannot remove default payment method\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SubscriptionManagementAPIEndpointsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SubscriptionManagementAPIEndpointsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
