// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Auth
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class OrganizationManagementAPIEndpointsFeature : object, Xunit.IClassFixture<OrganizationManagementAPIEndpointsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "organization-management.feature"
#line hidden
        
        public OrganizationManagementAPIEndpointsFeature(OrganizationManagementAPIEndpointsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/auth", "Organization Management API Endpoints", "  As an organization owner or admin\n  I want to manage my organization\n  So that " +
                    "my team can collaborate effectively", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"owner@therapyclinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new organization")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Create a new organization")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateANewOrganization()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new organization", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.Given("I have a \"team\" subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table481 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table481.AddRow(new string[] {
                            "name",
                            "Sunshine Therapy Center"});
                table481.AddRow(new string[] {
                            "type",
                            "clinic"});
                table481.AddRow(new string[] {
                            "taxId",
                            "12-3456789"});
                table481.AddRow(new string[] {
                            "address",
                            "123 Main St, City, ST"});
                table481.AddRow(new string[] {
                            "phone",
                            "555-100-2000"});
                table481.AddRow(new string[] {
                            "website",
                            "www.sunshinetherapy.com"});
#line 14
    testRunner.When("I send a POST request to \"/api/organizations\" with:", ((string)(null)), table481, "When ");
#line hidden
#line 22
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table482 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table482.AddRow(new string[] {
                            "id",
                            "string"});
                table482.AddRow(new string[] {
                            "name",
                            "string"});
                table482.AddRow(new string[] {
                            "slug",
                            "string"});
                table482.AddRow(new string[] {
                            "ownerId",
                            "string"});
#line 23
    testRunner.And("the response should contain:", ((string)(null)), table482, "And ");
#line hidden
#line 29
    testRunner.And("I should be set as the organization owner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
    testRunner.And("default roles should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate organization creation")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Validate organization creation")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ValidateOrganizationCreation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate organization creation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table483 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table483.AddRow(new string[] {
                            "name",
                            ""});
#line 34
    testRunner.When("I send a POST request to \"/api/organizations\" with:", ((string)(null)), table483, "When ");
#line hidden
#line 37
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
    testRunner.And("the response should contain error \"Organization name is required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get organization details")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get organization details")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetOrganizationDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get organization details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 43
    testRunner.Given("I own organization \"org-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
    testRunner.When("I send a GET request to \"/api/organizations/org-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table484 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table484.AddRow(new string[] {
                            "id",
                            "string"});
                table484.AddRow(new string[] {
                            "name",
                            "string"});
                table484.AddRow(new string[] {
                            "type",
                            "string"});
                table484.AddRow(new string[] {
                            "memberCount",
                            "number"});
                table484.AddRow(new string[] {
                            "subscription",
                            "object"});
                table484.AddRow(new string[] {
                            "settings",
                            "object"});
                table484.AddRow(new string[] {
                            "createdAt",
                            "string"});
#line 46
    testRunner.And("the response should contain:", ((string)(null)), table484, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Non-member cannot access organization")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Non-member cannot access organization")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "authorization")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void Non_MemberCannotAccessOrganization()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "authorization",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non-member cannot access organization", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 58
    testRunner.Given("organization \"org-other\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
    testRunner.And("I am not a member of \"org-other\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
    testRunner.When("I send a GET request to \"/api/organizations/org-other\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
    testRunner.Then("the response status should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
    testRunner.And("the response should contain error \"Access denied\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update organization details")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Update organization details")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateOrganizationDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update organization details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 67
    testRunner.Given("I own organization \"org-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table485 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table485.AddRow(new string[] {
                            "name",
                            "Sunshine Therapy Group"});
                table485.AddRow(new string[] {
                            "website",
                            "www.sunshinetherapy.org"});
#line 68
    testRunner.When("I send a PUT request to \"/api/organizations/org-123\" with:", ((string)(null)), table485, "When ");
#line hidden
#line 72
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
    testRunner.And("the organization should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
    testRunner.And("an audit log should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List organization members")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "List organization members")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "members")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ListOrganizationMembers()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "members",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List organization members", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 79
    testRunner.Given("I am admin of organization \"org-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 80
    testRunner.And("the organization has 15 members", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
    testRunner.When("I send a GET request to \"/api/organizations/org-123/members?page=1&limit=10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table486 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table486.AddRow(new string[] {
                            "members",
                            "array"});
                table486.AddRow(new string[] {
                            "total",
                            "number"});
                table486.AddRow(new string[] {
                            "page",
                            "number"});
#line 83
    testRunner.And("the response should contain:", ((string)(null)), table486, "And ");
#line hidden
                TechTalk.SpecFlow.Table table487 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table487.AddRow(new string[] {
                            "id",
                            "string"});
                table487.AddRow(new string[] {
                            "email",
                            "string"});
                table487.AddRow(new string[] {
                            "name",
                            "string"});
                table487.AddRow(new string[] {
                            "role",
                            "string"});
                table487.AddRow(new string[] {
                            "status",
                            "string"});
                table487.AddRow(new string[] {
                            "joinedAt",
                            "string"});
#line 88
    testRunner.And("each member should contain:", ((string)(null)), table487, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Invite member to organization")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Invite member to organization")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "members")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void InviteMemberToOrganization()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "members",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invite member to organization", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 100
    testRunner.Given("I am admin of organization \"org-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table488 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table488.AddRow(new string[] {
                            "email",
                            "newuser@clinic.com"});
                table488.AddRow(new string[] {
                            "role",
                            "therapist"});
#line 101
    testRunner.When("I send a POST request to \"/api/organizations/org-123/members/invite\" with:", ((string)(null)), table488, "When ");
#line hidden
#line 105
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table489 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table489.AddRow(new string[] {
                            "inviteId",
                            "string"});
                table489.AddRow(new string[] {
                            "status",
                            "string"});
                table489.AddRow(new string[] {
                            "expiresAt",
                            "string"});
#line 106
    testRunner.And("the response should contain:", ((string)(null)), table489, "And ");
#line hidden
#line 111
    testRunner.And("an invitation email should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
    testRunner.And("the invite should expire in 7 days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot invite existing member")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Cannot invite existing member")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "members")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CannotInviteExistingMember()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "members",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot invite existing member", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 115
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 116
    testRunner.Given("I am admin of organization \"org-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 117
    testRunner.And("\"existing@clinic.com\" is already a member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table490 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table490.AddRow(new string[] {
                            "email",
                            "existing@clinic.com"});
                table490.AddRow(new string[] {
                            "role",
                            "therapist"});
#line 118
    testRunner.When("I send a POST request to \"/api/organizations/org-123/members/invite\" with:", ((string)(null)), table490, "When ");
#line hidden
#line 122
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
    testRunner.And("the response should contain error \"User is already a member\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Remove member from organization")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Remove member from organization")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "members")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RemoveMemberFromOrganization()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "members",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove member from organization", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 127
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 128
    testRunner.Given("I am admin of organization \"org-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 129
    testRunner.And("\"user-456\" is a member with role \"therapist\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
    testRunner.When("I send a DELETE request to \"/api/organizations/org-123/members/user-456\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
    testRunner.And("the member should be removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
    testRunner.And("the member should receive a notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
    testRunner.And("their access should be revoked immediately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot remove the last admin")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Cannot remove the last admin")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "members")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CannotRemoveTheLastAdmin()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "members",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot remove the last admin", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 137
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 138
    testRunner.Given("I am the only admin of organization \"org-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 139
    testRunner.When("I send a DELETE request to \"/api/organizations/org-123/members/{my-user-id}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
    testRunner.And("the response should contain error \"Cannot remove the last admin\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update member role")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Update member role")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "members")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateMemberRole()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "members",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update member role", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 145
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 146
    testRunner.Given("I am admin of organization \"org-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 147
    testRunner.And("\"user-456\" is a member with role \"therapist\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table491 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table491.AddRow(new string[] {
                            "role",
                            "admin"});
#line 148
    testRunner.When("I send a PUT request to \"/api/organizations/org-123/members/user-456/role\" with:", ((string)(null)), table491, "When ");
#line hidden
#line 151
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
    testRunner.And("the member role should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
    testRunner.And("the member should be notified of the change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get organization billing information")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get organization billing information")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "billing")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetOrganizationBillingInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "billing",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get organization billing information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 157
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 158
    testRunner.Given("I am owner of organization \"org-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 159
    testRunner.When("I send a GET request to \"/api/organizations/org-123/billing\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 160
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table492 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table492.AddRow(new string[] {
                            "planId",
                            "string"});
                table492.AddRow(new string[] {
                            "seats",
                            "number"});
                table492.AddRow(new string[] {
                            "usedSeats",
                            "number"});
                table492.AddRow(new string[] {
                            "billingCycle",
                            "string"});
                table492.AddRow(new string[] {
                            "nextBillingDate",
                            "string"});
                table492.AddRow(new string[] {
                            "paymentMethod",
                            "object"});
                table492.AddRow(new string[] {
                            "billingAddress",
                            "object"});
#line 161
    testRunner.And("the response should contain:", ((string)(null)), table492, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update billing information")]
        [Xunit.TraitAttribute("FeatureTitle", "Organization Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Update billing information")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "billing")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateBillingInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "organizations",
                    "billing",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update billing information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 173
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 174
    testRunner.Given("I am owner of organization \"org-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table493 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table493.AddRow(new string[] {
                            "billingAddress.street",
                            "456 New Ave"});
                table493.AddRow(new string[] {
                            "billingAddress.city",
                            "New City"});
                table493.AddRow(new string[] {
                            "billingAddress.state",
                            "NY"});
                table493.AddRow(new string[] {
                            "billingAddress.zip",
                            "10001"});
#line 175
    testRunner.When("I send a PUT request to \"/api/organizations/org-123/billing\" with:", ((string)(null)), table493, "When ");
#line hidden
#line 181
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 182
    testRunner.And("the billing address should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
    testRunner.And("the changes should sync with Stripe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                OrganizationManagementAPIEndpointsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                OrganizationManagementAPIEndpointsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
