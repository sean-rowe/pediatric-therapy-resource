// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Auth
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UserManagementAPIEndpointsFR_001Feature : object, Xunit.IClassFixture<UserManagementAPIEndpointsFR_001Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "user-management.feature"
#line hidden
        
        public UserManagementAPIEndpointsFR_001Feature(UserManagementAPIEndpointsFR_001Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/auth", "User Management API Endpoints (FR-001)", "  As a platform user\n  I want to manage my profile and preferences\n  So that I ca" +
                    "n customize my experience and access enterprise features", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully get current user profile")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully get current user profile")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyGetCurrentUserProfile()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully get current user profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/users/profile\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table548 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table548.AddRow(new string[] {
                            "id",
                            "string"});
                table548.AddRow(new string[] {
                            "email",
                            "string"});
                table548.AddRow(new string[] {
                            "firstName",
                            "string"});
                table548.AddRow(new string[] {
                            "lastName",
                            "string"});
                table548.AddRow(new string[] {
                            "licenseNumber",
                            "string"});
                table548.AddRow(new string[] {
                            "licenseState",
                            "string"});
                table548.AddRow(new string[] {
                            "licenseType",
                            "string"});
                table548.AddRow(new string[] {
                            "phone",
                            "string"});
                table548.AddRow(new string[] {
                            "createdAt",
                            "string"});
                table548.AddRow(new string[] {
                            "verified",
                            "boolean"});
                table548.AddRow(new string[] {
                            "subscription",
                            "object"});
#line 15
    testRunner.And("the response should contain:", ((string)(null)), table548, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully update user profile")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully update user profile")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyUpdateUserProfile()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully update user profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table549 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table549.AddRow(new string[] {
                            "firstName",
                            "Jane"});
                table549.AddRow(new string[] {
                            "lastName",
                            "Smith"});
                table549.AddRow(new string[] {
                            "phone",
                            "555-987-6543"});
#line 32
    testRunner.When("I send a PUT request to \"/api/users/profile\" with:", ((string)(null)), table549, "When ");
#line hidden
#line 37
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
    testRunner.And("the response should contain updated profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
    testRunner.And("the audit log should record the changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prevent updating protected fields")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Prevent updating protected fields")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PreventUpdatingProtectedFields()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prevent updating protected fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table550 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table550.AddRow(new string[] {
                            "email",
                            "newemail@test.com"});
                table550.AddRow(new string[] {
                            "id",
                            "different-id"});
#line 43
    testRunner.When("I send a PUT request to \"/api/users/profile\" with:", ((string)(null)), table550, "When ");
#line hidden
#line 47
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
    testRunner.And("the response should contain error \"Cannot update protected fields\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully delete user account")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully delete user account")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyDeleteUserAccount()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully delete user account", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table551 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table551.AddRow(new string[] {
                            "password",
                            "Current123!"});
                table551.AddRow(new string[] {
                            "confirm",
                            "DELETE"});
#line 53
    testRunner.When("I send a DELETE request to \"/api/users/profile\" with:", ((string)(null)), table551, "When ");
#line hidden
#line 57
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
    testRunner.And("the response should contain message \"Account deleted successfully\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
    testRunner.And("the user should be marked as deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
    testRunner.And("personal data should be anonymized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.And("an account deletion email should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Admin successfully gets user by ID")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Admin successfully gets user by ID")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AdminSuccessfullyGetsUserByID()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "admin",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admin successfully gets user by ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 66
    testRunner.Given("I am authenticated as an admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
    testRunner.And("a user exists with id \"user-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
    testRunner.When("I send a GET request to \"/api/users/user-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
    testRunner.And("the response should contain full user details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    testRunner.And("sensitive data should be masked appropriately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Non-admin cannot access other user profiles")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Non-admin cannot access other user profiles")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "authorization")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void Non_AdminCannotAccessOtherUserProfiles()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "authorization",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non-admin cannot access other user profiles", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 75
    testRunner.Given("I am authenticated as a regular user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
    testRunner.When("I send a GET request to \"/api/users/other-user-id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
    testRunner.Then("the response status should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
    testRunner.And("the response should contain error \"Insufficient permissions\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Admin lists users with pagination")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Admin lists users with pagination")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AdminListsUsersWithPagination()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "admin",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admin lists users with pagination", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 83
    testRunner.Given("I am authenticated as an admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 84
    testRunner.And("there are 50 users in the system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.When("I send a GET request to \"/api/users?page=1&limit=20\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table552 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table552.AddRow(new string[] {
                            "users",
                            "array"});
                table552.AddRow(new string[] {
                            "total",
                            "number"});
                table552.AddRow(new string[] {
                            "page",
                            "number"});
                table552.AddRow(new string[] {
                            "limit",
                            "number"});
                table552.AddRow(new string[] {
                            "totalPages",
                            "number"});
#line 87
    testRunner.And("the response should contain:", ((string)(null)), table552, "And ");
#line hidden
#line 94
    testRunner.And("the users array should contain 20 items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Admin filters users by criteria")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Admin filters users by criteria")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "filtering")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AdminFiltersUsersByCriteria()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "admin",
                    "filtering",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admin filters users by criteria", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 98
    testRunner.Given("I am authenticated as an admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 99
    testRunner.When("I send a GET request to \"/api/users?licenseType=OT&verified=true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
    testRunner.And("all returned users should have licenseType \"OT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
    testRunner.And("all returned users should be verified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Admin suspends a user account")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Admin suspends a user account")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AdminSuspendsAUserAccount()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "admin",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admin suspends a user account", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 107
    testRunner.Given("I am authenticated as an admin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
    testRunner.And("a user exists with id \"user-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table553 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table553.AddRow(new string[] {
                            "status",
                            "suspended"});
                table553.AddRow(new string[] {
                            "reason",
                            "Terms violation"});
#line 109
    testRunner.When("I send a PUT request to \"/api/users/user-123/status\" with:", ((string)(null)), table553, "When ");
#line hidden
#line 113
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
    testRunner.And("the user should be suspended", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.And("the user should receive a suspension notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
    testRunner.And("the action should be logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get user\'s professional licenses")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Get user\'s professional licenses")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "licenses")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetUsersProfessionalLicenses()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "licenses",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get user\'s professional licenses", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 121
    testRunner.When("I send a GET request to \"/api/users/licenses\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 122
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table554 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table554.AddRow(new string[] {
                            "licenseNumber",
                            "string"});
                table554.AddRow(new string[] {
                            "licenseState",
                            "string"});
                table554.AddRow(new string[] {
                            "licenseType",
                            "string"});
                table554.AddRow(new string[] {
                            "expirationDate",
                            "string"});
                table554.AddRow(new string[] {
                            "verified",
                            "boolean"});
                table554.AddRow(new string[] {
                            "verifiedAt",
                            "string"});
#line 123
    testRunner.And("the auth response should contain array of:", ((string)(null)), table554, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add and verify a new license")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Add and verify a new license")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "licenses")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AddAndVerifyANewLicense()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "licenses",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add and verify a new license", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 134
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table555 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table555.AddRow(new string[] {
                            "licenseNumber",
                            "PT-98765"});
                table555.AddRow(new string[] {
                            "licenseState",
                            "NY"});
                table555.AddRow(new string[] {
                            "licenseType",
                            "PT"});
#line 135
    testRunner.When("I send a POST request to \"/api/users/licenses/verify\" with:", ((string)(null)), table555, "When ");
#line hidden
#line 140
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table556 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table556.AddRow(new string[] {
                            "verified",
                            "true"});
#line 141
    testRunner.And("the response should contain:", ((string)(null)), table556, "And ");
#line hidden
#line 144
    testRunner.And("the license should be verified with external API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
    testRunner.And("the license should be added to user profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reject invalid license")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Reject invalid license")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "licenses")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RejectInvalidLicense()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "licenses",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reject invalid license", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 148
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table557 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table557.AddRow(new string[] {
                            "licenseNumber",
                            "INVALID-123"});
                table557.AddRow(new string[] {
                            "licenseState",
                            "XX"});
                table557.AddRow(new string[] {
                            "licenseType",
                            "OT"});
#line 149
    testRunner.When("I send a POST request to \"/api/users/licenses/verify\" with:", ((string)(null)), table557, "When ");
#line hidden
#line 154
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 155
    testRunner.And("the response should contain error \"License verification failed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update user preferences")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Update user preferences")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "preferences")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateUserPreferences()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "preferences",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update user preferences", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 159
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table558 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table558.AddRow(new string[] {
                            "language",
                            "es"});
                table558.AddRow(new string[] {
                            "timezone",
                            "EST"});
                table558.AddRow(new string[] {
                            "emailNotifications",
                            "true"});
                table558.AddRow(new string[] {
                            "theme",
                            "dark"});
                table558.AddRow(new string[] {
                            "defaultView",
                            "calendar"});
#line 160
    testRunner.When("I send a PUT request to \"/api/users/preferences\" with:", ((string)(null)), table558, "When ");
#line hidden
#line 167
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 168
    testRunner.And("the preferences should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
    testRunner.And("the UI should reflect the new preferences", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get notification settings")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Get notification settings")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetNotificationSettings()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "notifications",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get notification settings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 173
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 174
    testRunner.When("I send a GET request to \"/api/users/notifications\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table559 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table559.AddRow(new string[] {
                            "emailNotifications",
                            "object"});
                table559.AddRow(new string[] {
                            "pushNotifications",
                            "object"});
                table559.AddRow(new string[] {
                            "smsNotifications",
                            "object"});
                table559.AddRow(new string[] {
                            "notificationSchedule",
                            "object"});
#line 176
    testRunner.And("the response should contain:", ((string)(null)), table559, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update notification settings")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Update notification settings")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "users")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateNotificationSettings()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "users",
                    "notifications",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update notification settings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 185
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table560 = new TechTalk.SpecFlow.Table(new string[] {
                            "path",
                            "value"});
                table560.AddRow(new string[] {
                            "emailNotifications.newResources",
                            "true"});
                table560.AddRow(new string[] {
                            "emailNotifications.weeklyDigest",
                            "false"});
                table560.AddRow(new string[] {
                            "pushNotifications.sessionReminders",
                            "true"});
                table560.AddRow(new string[] {
                            "notificationSchedule.quietHours",
                            "22:00-07:00"});
#line 186
    testRunner.When("I send a PUT request to \"/api/users/notifications\" with:", ((string)(null)), table560, "When ");
#line hidden
#line 192
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
    testRunner.And("the notification settings should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
    testRunner.And("future notifications should respect these settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Enterprise SSO login through Clever")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Enterprise SSO login through Clever")]
        [Xunit.TraitAttribute("Category", "enterprise")]
        [Xunit.TraitAttribute("Category", "sso")]
        [Xunit.TraitAttribute("Category", "clever-integration")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnterpriseSSOLoginThroughClever()
        {
            string[] tagsOfScenario = new string[] {
                    "enterprise",
                    "sso",
                    "clever-integration",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enterprise SSO login through Clever", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 198
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 199
    testRunner.Given("\"Riverside School District\" has Enterprise subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 200
    testRunner.And("Clever SSO integration is configured for the district", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
    testRunner.When("a therapist visits the UPTRMS login page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 202
    testRunner.And("they select \"Login with School District\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
    testRunner.And("they enter district identifier \"riverside-unified\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
    testRunner.Then("they should be redirected to Clever authentication", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 205
    testRunner.When("they complete Clever login with valid credentials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 206
    testRunner.Then("they should be redirected back to UPTRMS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table561 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table561.AddRow(new string[] {
                            "Email",
                            "From Clever directory"});
                table561.AddRow(new string[] {
                            "Name",
                            "From Clever directory"});
                table561.AddRow(new string[] {
                            "Role",
                            "Therapist"});
                table561.AddRow(new string[] {
                            "Organization",
                            "Riverside School District"});
                table561.AddRow(new string[] {
                            "Subscription",
                            "Enterprise"});
                table561.AddRow(new string[] {
                            "Permissions",
                            "Full platform access"});
#line 207
    testRunner.And("their account should be automatically provisioned with:", ((string)(null)), table561, "And ");
#line hidden
#line 215
    testRunner.And("they should be logged in automatically", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
    testRunner.And("their session should sync with district policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Enterprise SSO login through ClassLink")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Enterprise SSO login through ClassLink")]
        [Xunit.TraitAttribute("Category", "enterprise")]
        [Xunit.TraitAttribute("Category", "sso")]
        [Xunit.TraitAttribute("Category", "classlink-integration")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnterpriseSSOLoginThroughClassLink()
        {
            string[] tagsOfScenario = new string[] {
                    "enterprise",
                    "sso",
                    "classlink-integration",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enterprise SSO login through ClassLink", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 219
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 220
    testRunner.Given("\"Metro Health District\" has Enterprise subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 221
    testRunner.And("ClassLink SSO integration is configured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 222
    testRunner.When("a therapist accesses UPTRMS through ClassLink portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 223
    testRunner.Then("they should be automatically authenticated via SAML 2.0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table562 = new TechTalk.SpecFlow.Table(new string[] {
                            "ClassLink Role",
                            "UPTRMS Permission Level"});
                table562.AddRow(new string[] {
                            "Therapist",
                            "Full platform access"});
                table562.AddRow(new string[] {
                            "Therapy Supervisor",
                            "Admin dashboard access"});
                table562.AddRow(new string[] {
                            "District Admin",
                            "Organization admin rights"});
#line 224
    testRunner.And("their district role should be mapped to UPTRMS permissions:", ((string)(null)), table562, "And ");
#line hidden
#line 229
    testRunner.And("their caseload should be automatically populated from district SIS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 230
    testRunner.And("billing should be handled at organization level", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Enterprise custom pricing and billing")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Enterprise custom pricing and billing")]
        [Xunit.TraitAttribute("Category", "enterprise")]
        [Xunit.TraitAttribute("Category", "pricing")]
        [Xunit.TraitAttribute("Category", "custom-pricing")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnterpriseCustomPricingAndBilling()
        {
            string[] tagsOfScenario = new string[] {
                    "enterprise",
                    "pricing",
                    "custom-pricing",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enterprise custom pricing and billing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 233
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 234
    testRunner.Given("\"Large Health System\" has 150 therapy professionals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 235
    testRunner.And("they are negotiating Enterprise subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
    testRunner.When("they request custom pricing for 150+ users", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table563 = new TechTalk.SpecFlow.Table(new string[] {
                            "Feature",
                            "Requirement"});
                table563.AddRow(new string[] {
                            "Custom pricing tiers",
                            "Volume discounts available"});
                table563.AddRow(new string[] {
                            "Flexible billing",
                            "Annual, multi-year options"});
                table563.AddRow(new string[] {
                            "Usage-based pricing",
                            "Charge per active user"});
                table563.AddRow(new string[] {
                            "Bulk user management",
                            "CSV import/export"});
                table563.AddRow(new string[] {
                            "Dedicated support",
                            "Priority support channel"});
                table563.AddRow(new string[] {
                            "SLA guarantees",
                            "99.9% uptime commitment"});
#line 237
    testRunner.Then("the system should support:", ((string)(null)), table563, "Then ");
#line hidden
#line 245
    testRunner.And("contract terms should be customizable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 246
    testRunner.And("billing should be handled through enterprise procurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Automatic user provisioning from enterprise directory")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Automatic user provisioning from enterprise directory")]
        [Xunit.TraitAttribute("Category", "enterprise")]
        [Xunit.TraitAttribute("Category", "user-provisioning")]
        [Xunit.TraitAttribute("Category", "directory-sync")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AutomaticUserProvisioningFromEnterpriseDirectory()
        {
            string[] tagsOfScenario = new string[] {
                    "enterprise",
                    "user-provisioning",
                    "directory-sync",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Automatic user provisioning from enterprise directory", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 249
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 250
    testRunner.Given("an Enterprise organization has Active Directory integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 251
    testRunner.When("a new therapist is added to the directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 252
    testRunner.Then("their UPTRMS account should be automatically created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table564 = new TechTalk.SpecFlow.Table(new string[] {
                            "Directory Field",
                            "UPTRMS Field"});
                table564.AddRow(new string[] {
                            "employeeId",
                            "External ID"});
                table564.AddRow(new string[] {
                            "mail",
                            "Email"});
                table564.AddRow(new string[] {
                            "givenName",
                            "First Name"});
                table564.AddRow(new string[] {
                            "sn",
                            "Last Name"});
                table564.AddRow(new string[] {
                            "department",
                            "Department"});
                table564.AddRow(new string[] {
                            "title",
                            "Job Title"});
                table564.AddRow(new string[] {
                            "manager",
                            "Reports To"});
#line 253
    testRunner.And("their profile should be populated from directory attributes:", ((string)(null)), table564, "And ");
#line hidden
#line 262
    testRunner.When("the therapist is deactivated in the directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 263
    testRunner.Then("their UPTRMS account should be automatically suspended", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 264
    testRunner.And("their data should be preserved according to retention policies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multi-tenant organization data isolation")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Multi-tenant organization data isolation")]
        [Xunit.TraitAttribute("Category", "enterprise")]
        [Xunit.TraitAttribute("Category", "multi-tenant")]
        [Xunit.TraitAttribute("Category", "organization-isolation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void Multi_TenantOrganizationDataIsolation()
        {
            string[] tagsOfScenario = new string[] {
                    "enterprise",
                    "multi-tenant",
                    "organization-isolation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multi-tenant organization data isolation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 267
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 268
    testRunner.Given("two enterprise organizations share the same UPTRMS instance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 269
    testRunner.When("\"Hospital A\" therapist searches for resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 270
    testRunner.Then("they should only see resources available to their organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 271
    testRunner.And("they should not see \"Hospital B\" private resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
    testRunner.And("billing should be tracked separately per organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 273
    testRunner.And("usage analytics should be isolated per organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 274
    testRunner.And("each organization should have independent admin controls", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Organization admin manages enterprise subscription")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Organization admin manages enterprise subscription")]
        [Xunit.TraitAttribute("Category", "enterprise")]
        [Xunit.TraitAttribute("Category", "subscription-management")]
        [Xunit.TraitAttribute("Category", "organization-admin")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void OrganizationAdminManagesEnterpriseSubscription()
        {
            string[] tagsOfScenario = new string[] {
                    "enterprise",
                    "subscription-management",
                    "organization-admin",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Organization admin manages enterprise subscription", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 277
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 278
    testRunner.Given("I am an organization admin for \"Metro Therapy Network\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 279
    testRunner.When("I access the organization admin dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table565 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Capability"});
                table565.AddRow(new string[] {
                            "View usage analytics",
                            "See all therapist activity"});
                table565.AddRow(new string[] {
                            "Manage user licenses",
                            "Add/remove/modify users"});
                table565.AddRow(new string[] {
                            "Configure SSO settings",
                            "Manage authentication methods"});
                table565.AddRow(new string[] {
                            "Set organization policies",
                            "Content access, data retention"});
                table565.AddRow(new string[] {
                            "Monitor billing usage",
                            "Track costs and usage limits"});
                table565.AddRow(new string[] {
                            "Generate compliance reports",
                            "HIPAA, audit trails"});
#line 280
    testRunner.Then("I should be able to:", ((string)(null)), table565, "Then ");
#line hidden
#line 288
    testRunner.And("I should receive monthly usage reports", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
    testRunner.And("I should be able to adjust subscription levels", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Enterprise marketplace commission structure")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Enterprise marketplace commission structure")]
        [Xunit.TraitAttribute("Category", "enterprise")]
        [Xunit.TraitAttribute("Category", "marketplace")]
        [Xunit.TraitAttribute("Category", "commission-rates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnterpriseMarketplaceCommissionStructure()
        {
            string[] tagsOfScenario = new string[] {
                    "enterprise",
                    "marketplace",
                    "commission-rates",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enterprise marketplace commission structure", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 292
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 293
    testRunner.Given("\"Education Cooperative\" has Enterprise subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 294
    testRunner.And("they negotiate custom marketplace terms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 295
    testRunner.When("their therapists sell resources in the marketplace", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table566 = new TechTalk.SpecFlow.Table(new string[] {
                            "Transaction Type",
                            "Enterprise Rate",
                            "Standard Rate"});
                table566.AddRow(new string[] {
                            "Internal sales",
                            "20% commission",
                            "30% commission"});
                table566.AddRow(new string[] {
                            "External sales",
                            "25% commission",
                            "30% commission"});
                table566.AddRow(new string[] {
                            "Bulk purchases",
                            "15% commission",
                            "30% commission"});
#line 296
    testRunner.Then("the commission structure should be:", ((string)(null)), table566, "Then ");
#line hidden
#line 301
    testRunner.And("enterprise organizations should get volume discounts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 302
    testRunner.And("revenue sharing should be tracked separately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 303
    testRunner.And("tax handling should comply with enterprise accounting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Enterprise compliance and audit requirements")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Enterprise compliance and audit requirements")]
        [Xunit.TraitAttribute("Category", "enterprise")]
        [Xunit.TraitAttribute("Category", "compliance")]
        [Xunit.TraitAttribute("Category", "audit-requirements")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnterpriseComplianceAndAuditRequirements()
        {
            string[] tagsOfScenario = new string[] {
                    "enterprise",
                    "compliance",
                    "audit-requirements",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enterprise compliance and audit requirements", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 306
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 307
    testRunner.Given("\"Healthcare Network\" has strict compliance requirements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 308
    testRunner.When("they implement UPTRMS Enterprise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table567 = new TechTalk.SpecFlow.Table(new string[] {
                            "Compliance Feature",
                            "Requirement"});
                table567.AddRow(new string[] {
                            "Audit logging",
                            "Comprehensive activity logs"});
                table567.AddRow(new string[] {
                            "Data encryption",
                            "End-to-end encryption"});
                table567.AddRow(new string[] {
                            "Access controls",
                            "Role-based permissions"});
                table567.AddRow(new string[] {
                            "Backup procedures",
                            "Automated daily backups"});
                table567.AddRow(new string[] {
                            "Incident response",
                            "24/7 monitoring and alerts"});
                table567.AddRow(new string[] {
                            "Compliance reports",
                            "SOC 2, HIPAA, state regulations"});
#line 309
    testRunner.Then("the system should provide:", ((string)(null)), table567, "Then ");
#line hidden
#line 317
    testRunner.And("compliance officers should have read-only access to all data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 318
    testRunner.And("audit trails should be immutable and exportable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 319
    testRunner.And("compliance reports should be generated automatically", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Enterprise performance and scalability requirements")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Enterprise performance and scalability requirements")]
        [Xunit.TraitAttribute("Category", "enterprise")]
        [Xunit.TraitAttribute("Category", "performance")]
        [Xunit.TraitAttribute("Category", "scalability")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnterprisePerformanceAndScalabilityRequirements()
        {
            string[] tagsOfScenario = new string[] {
                    "enterprise",
                    "performance",
                    "scalability",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enterprise performance and scalability requirements", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 322
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 323
    testRunner.Given("\"State Department of Education\" has 5000+ therapy professionals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 324
    testRunner.When("they access the system during peak hours (8-10 AM)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table568 = new TechTalk.SpecFlow.Table(new string[] {
                            "Performance Metric",
                            "Requirement"});
                table568.AddRow(new string[] {
                            "Concurrent users",
                            "5000+ simultaneous users"});
                table568.AddRow(new string[] {
                            "Response times",
                            "<2 seconds for all operations"});
                table568.AddRow(new string[] {
                            "Database queries",
                            "<500ms for complex searches"});
                table568.AddRow(new string[] {
                            "File uploads",
                            "100MB files without timeout"});
                table568.AddRow(new string[] {
                            "Report generation",
                            "<30 seconds for org-wide reports"});
#line 325
    testRunner.Then("the system should handle:", ((string)(null)), table568, "Then ");
#line hidden
#line 332
    testRunner.And("auto-scaling should handle traffic spikes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 333
    testRunner.And("performance should be monitored and reported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 334
    testRunner.And("SLA violations should trigger automatic alerts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="New user registration with email verification")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "New user registration with email verification")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "individual")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void NewUserRegistrationWithEmailVerification()
        {
            string[] tagsOfScenario = new string[] {
                    "subscription",
                    "individual",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("New user registration with email verification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 338
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 339
    testRunner.Given("I am on the registration page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table569 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table569.AddRow(new string[] {
                            "Email",
                            "therapist@clinic.com"});
                table569.AddRow(new string[] {
                            "Password",
                            "SecurePass123!"});
                table569.AddRow(new string[] {
                            "First Name",
                            "Sarah"});
                table569.AddRow(new string[] {
                            "Last Name",
                            "Johnson"});
                table569.AddRow(new string[] {
                            "License Number",
                            "OT-12345"});
                table569.AddRow(new string[] {
                            "Specialty",
                            "Pediatric OT"});
#line 340
    testRunner.When("I enter valid registration details:", ((string)(null)), table569, "When ");
#line hidden
#line 348
    testRunner.And("I accept the terms and conditions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 349
    testRunner.And("I submit the registration form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 350
    testRunner.Then("I should receive a verification email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 351
    testRunner.And("the email should contain a verification link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 352
    testRunner.When("I click the verification link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 353
    testRunner.Then("my account should be activated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 354
    testRunner.And("I should be redirected to the subscription selection page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Individual therapist subscribes to Pro tier")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Individual therapist subscribes to Pro tier")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "individual")]
        [Xunit.TraitAttribute("Category", "payment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void IndividualTherapistSubscribesToProTier()
        {
            string[] tagsOfScenario = new string[] {
                    "subscription",
                    "individual",
                    "payment",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Individual therapist subscribes to Pro tier", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 357
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 358
    testRunner.Given("I am a verified user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 359
    testRunner.And("I am on the subscription selection page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 360
    testRunner.When("I select the \"Pro\" subscription tier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 361
    testRunner.And("I enter valid payment information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 362
    testRunner.And("I confirm the subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 363
    testRunner.Then("my subscription should be activated immediately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 364
    testRunner.And("I should have access to all Pro features", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 365
    testRunner.And("I should receive a subscription confirmation email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 366
    testRunner.And("my first billing date should be set for today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 367
    testRunner.And("my next billing date should be one month from today", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Practice owner sets up Small Group subscription")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Practice owner sets up Small Group subscription")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "group")]
        [Xunit.TraitAttribute("Category", "administration")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PracticeOwnerSetsUpSmallGroupSubscription()
        {
            string[] tagsOfScenario = new string[] {
                    "subscription",
                    "group",
                    "administration",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Practice owner sets up Small Group subscription", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 370
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 371
    testRunner.Given("I am a verified practice owner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 372
    testRunner.When("I select the \"Small Group\" subscription tier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 373
    testRunner.And("I specify 10 user licenses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table570 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table570.AddRow(new string[] {
                            "Practice Name",
                            "Sunshine Therapy Center"});
                table570.AddRow(new string[] {
                            "Tax ID",
                            "12-3456789"});
                table570.AddRow(new string[] {
                            "Billing Address",
                            "123 Main St, City, ST"});
#line 374
    testRunner.And("I enter my practice details:", ((string)(null)), table570, "And ");
#line hidden
#line 379
    testRunner.And("I provide payment information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 380
    testRunner.Then("the monthly cost should be calculated as $150", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 381
    testRunner.And("I should be able to invite team members", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 382
    testRunner.And("I should have access to the admin dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 383
    testRunner.And("each invited user should receive an invitation email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Individual upgrades to group subscription")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Individual upgrades to group subscription")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "upgrade")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void IndividualUpgradesToGroupSubscription()
        {
            string[] tagsOfScenario = new string[] {
                    "subscription",
                    "upgrade",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Individual upgrades to group subscription", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 386
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 387
    testRunner.Given("I have an active Individual Pro subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 388
    testRunner.And("I want to add team members", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 389
    testRunner.When("I select \"Upgrade to Group\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 390
    testRunner.And("I choose Small Group (5-20 users)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table571 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Email",
                            "Role"});
                table571.AddRow(new string[] {
                            "Dr. Smith",
                            "smith@clinic.com",
                            "Therapist"});
                table571.AddRow(new string[] {
                            "Jane Doe",
                            "jane@clinic.com",
                            "Assistant"});
                table571.AddRow(new string[] {
                            "Mike Johnson",
                            "mike@clinic.com",
                            "Therapist"});
#line 391
    testRunner.And("I add 3 team members:", ((string)(null)), table571, "And ");
#line hidden
#line 396
    testRunner.Then("my subscription should upgrade immediately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 397
    testRunner.And("prorated billing should be calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 398
    testRunner.And("team members should receive invitation emails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 399
    testRunner.And("I should have admin privileges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 400
    testRunner.And("billing should change to group rate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="School district implements Enterprise SSO")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "School district implements Enterprise SSO")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "enterprise")]
        [Xunit.TraitAttribute("Category", "sso")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SchoolDistrictImplementsEnterpriseSSO()
        {
            string[] tagsOfScenario = new string[] {
                    "subscription",
                    "enterprise",
                    "sso",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("School district implements Enterprise SSO", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 403
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 404
    testRunner.Given("\"Metro School District\" contacts sales", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 405
    testRunner.And("they have 150 therapy professionals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 406
    testRunner.When("they sign Enterprise agreement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table572 = new TechTalk.SpecFlow.Table(new string[] {
                            "Provider",
                            "Google Workspace"});
                table572.AddRow(new string[] {
                            "Domain",
                            "metroschools.edu"});
                table572.AddRow(new string[] {
                            "Method",
                            "SAML 2.0"});
#line 407
    testRunner.And("SSO is configured with:", ((string)(null)), table572, "And ");
#line hidden
#line 411
    testRunner.Then("all district therapists should login via SSO", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 412
    testRunner.And("user provisioning should sync automatically", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 413
    testRunner.And("usage analytics should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 414
    testRunner.And("custom pricing should be applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Free tier user experiences limitations")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Free tier user experiences limitations")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "free-tier")]
        [Xunit.TraitAttribute("Category", "limitations")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void FreeTierUserExperiencesLimitations()
        {
            string[] tagsOfScenario = new string[] {
                    "subscription",
                    "free-tier",
                    "limitations",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Free tier user experiences limitations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 417
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 418
    testRunner.Given("I am using the free tier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 419
    testRunner.When("I try to access resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 420
    testRunner.Then("I should be limited to 10 resources per month", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table573 = new TechTalk.SpecFlow.Table(new string[] {
                            "Restricted Feature",
                            "Reason"});
                table573.AddRow(new string[] {
                            "Data collection",
                            "Pro feature only"});
                table573.AddRow(new string[] {
                            "AI generation",
                            "Pro feature only"});
                table573.AddRow(new string[] {
                            "Marketplace selling",
                            "Pro feature only"});
                table573.AddRow(new string[] {
                            "Premium resources",
                            "Pro feature only"});
#line 421
    testRunner.And("I should not have access to:", ((string)(null)), table573, "And ");
#line hidden
#line 427
    testRunner.When("I reach 10 resource downloads", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 428
    testRunner.Then("I should see upgrade prompts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 429
    testRunner.And("further downloads should be blocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 430
    testRunner.And("I should be offered subscription options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Marketplace seller fee calculations")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Marketplace seller fee calculations")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "marketplace")]
        [Xunit.TraitAttribute("Category", "commission")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MarketplaceSellerFeeCalculations()
        {
            string[] tagsOfScenario = new string[] {
                    "subscription",
                    "marketplace",
                    "commission",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Marketplace seller fee calculations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 433
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 434
    testRunner.Given("I am a Pro subscriber selling resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 435
    testRunner.When("I sell a resource for $19.99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 436
    testRunner.Then("the platform should deduct 30% commission", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 437
    testRunner.And("I should receive $13.99", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table574 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table574.AddRow(new string[] {
                            "Gross Sale",
                            "$19.99"});
                table574.AddRow(new string[] {
                            "Platform Fee",
                            "$6.00"});
                table574.AddRow(new string[] {
                            "Seller Earnings",
                            "$13.99"});
#line 438
    testRunner.And("the transaction should be recorded as:", ((string)(null)), table574, "And ");
#line hidden
#line 443
    testRunner.And("I should receive payment within 7 days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 444
    testRunner.And("tax reporting should be handled automatically", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Subscription expiration and renewal handling")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Subscription expiration and renewal handling")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "expiration")]
        [Xunit.TraitAttribute("Category", "renewal")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubscriptionExpirationAndRenewalHandling()
        {
            string[] tagsOfScenario = new string[] {
                    "subscription",
                    "expiration",
                    "renewal",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscription expiration and renewal handling", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 447
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 448
    testRunner.Given("I have a monthly subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 449
    testRunner.And("my subscription expires tomorrow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 450
    testRunner.When("the renewal date arrives", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 451
    testRunner.Then("the system should attempt automatic renewal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table575 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Result"});
                table575.AddRow(new string[] {
                            "Extend subscription",
                            "Add 30 days to expiration"});
                table575.AddRow(new string[] {
                            "Send confirmation",
                            "Email receipt"});
                table575.AddRow(new string[] {
                            "Continue access",
                            "No service interruption"});
#line 452
    testRunner.And("handle payment success with:", ((string)(null)), table575, "And ");
#line hidden
                TechTalk.SpecFlow.Table table576 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Result"});
                table576.AddRow(new string[] {
                            "Send payment alert",
                            "Email with update payment link"});
                table576.AddRow(new string[] {
                            "Grace period",
                            "7 days continued access"});
                table576.AddRow(new string[] {
                            "Downgrade warning",
                            "Email at 5 days remaining"});
                table576.AddRow(new string[] {
                            "Account suspension",
                            "After 7 days if not resolved"});
#line 457
    testRunner.And("handle payment failure with:", ((string)(null)), table576, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Group admin manages subscription dashboard")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Group admin manages subscription dashboard")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "dashboard")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GroupAdminManagesSubscriptionDashboard()
        {
            string[] tagsOfScenario = new string[] {
                    "subscription",
                    "admin",
                    "dashboard",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Group admin manages subscription dashboard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 465
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 466
    testRunner.Given("I am a group administrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 467
    testRunner.When("I access the admin dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table577 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Display"});
                table577.AddRow(new string[] {
                            "Active users",
                            "12 of 15 licenses used"});
                table577.AddRow(new string[] {
                            "Monthly cost",
                            "$180 (12 × $15)"});
                table577.AddRow(new string[] {
                            "Next billing date",
                            "March 15, 2024"});
                table577.AddRow(new string[] {
                            "Usage this month",
                            "1,247 resource downloads"});
#line 468
    testRunner.Then("I should see subscription overview:", ((string)(null)), table577, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table578 = new TechTalk.SpecFlow.Table(new string[] {
                            "Admin Action",
                            "Capability"});
                table578.AddRow(new string[] {
                            "Add/remove users",
                            "Manage team members"});
                table578.AddRow(new string[] {
                            "View usage reports",
                            "Individual usage statistics"});
                table578.AddRow(new string[] {
                            "Manage billing",
                            "Update payment methods"});
                table578.AddRow(new string[] {
                            "Set permissions",
                            "Control feature access"});
#line 474
    testRunner.And("I should be able to:", ((string)(null)), table578, "And ");
#line hidden
#line 480
    testRunner.And("I should receive monthly usage reports", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Subscription cancellation with data retention")]
        [Xunit.TraitAttribute("FeatureTitle", "User Management API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Subscription cancellation with data retention")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "cancellation")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubscriptionCancellationWithDataRetention()
        {
            string[] tagsOfScenario = new string[] {
                    "subscription",
                    "cancellation",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscription cancellation with data retention", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 483
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 484
    testRunner.Given("I have an active subscription", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 485
    testRunner.When("I request subscription cancellation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table579 = new TechTalk.SpecFlow.Table(new string[] {
                            "Cancellation Option",
                            "Description"});
                table579.AddRow(new string[] {
                            "Immediate",
                            "Cancel now, lose access today"});
                table579.AddRow(new string[] {
                            "End of period",
                            "Cancel at next billing cycle"});
                table579.AddRow(new string[] {
                            "Pause subscription",
                            "Temporarily suspend account"});
#line 486
    testRunner.Then("I should be presented with:", ((string)(null)), table579, "Then ");
#line hidden
#line 491
    testRunner.When("I confirm cancellation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 492
    testRunner.Then("my subscription should end at period end", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 493
    testRunner.And("I should retain access until expiration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 494
    testRunner.And("my data should be preserved for 90 days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 495
    testRunner.And("I should receive confirmation email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 496
    testRunner.And("I should be offered win-back incentives", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UserManagementAPIEndpointsFR_001Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UserManagementAPIEndpointsFR_001Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
