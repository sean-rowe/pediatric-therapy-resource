// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Auth
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Xunit.TraitAttribute("Category", "collection:BDD_Sequential_Tests")]
    public partial class AuthenticationAPIEndpointsFR_001Feature : object, Xunit.IClassFixture<AuthenticationAPIEndpointsFR_001Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "collection:BDD_Sequential_Tests"};
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "authentication.feature"
#line hidden
        
        public AuthenticationAPIEndpointsFR_001Feature(AuthenticationAPIEndpointsFR_001Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/auth", "Authentication API Endpoints (FR-001)", "  As a therapy professional\n  I want to authenticate and manage my account\n  So t" +
                    "hat I can securely access the platform", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
  #line hidden
#line 8
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
    testRunner.And("the database is connected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully register a new user")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully register a new user")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyRegisterANewUser()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully register a new user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table481 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table481.AddRow(new string[] {
                            "email",
                            "john.doe@clinic.com"});
                table481.AddRow(new string[] {
                            "password",
                            "SecurePass123!"});
                table481.AddRow(new string[] {
                            "confirmPassword",
                            "SecurePass123!"});
                table481.AddRow(new string[] {
                            "firstName",
                            "John"});
                table481.AddRow(new string[] {
                            "lastName",
                            "Doe"});
                table481.AddRow(new string[] {
                            "licenseNumber",
                            "OT-12345"});
                table481.AddRow(new string[] {
                            "licenseState",
                            "CA"});
                table481.AddRow(new string[] {
                            "licenseType",
                            "OT"});
                table481.AddRow(new string[] {
                            "phone",
                            "555-123-4567"});
                table481.AddRow(new string[] {
                            "acceptedTerms",
                            "true"});
#line 14
    testRunner.Given("I have valid registration details:", ((string)(null)), table481, "Given ");
#line hidden
#line 26
    testRunner.When("I send a POST request to \"/api/auth/register\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table482 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table482.AddRow(new string[] {
                            "success",
                            "boolean"});
                table482.AddRow(new string[] {
                            "message",
                            "string"});
                table482.AddRow(new string[] {
                            "userId",
                            "string"});
#line 28
    testRunner.And("the response should contain:", ((string)(null)), table482, "And ");
#line hidden
#line 33
    testRunner.And("a verification email should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.And("the user should be created in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to register with existing email")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Fail to register with existing email")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void FailToRegisterWithExistingEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "error",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fail to register with existing email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 38
    testRunner.Given("a user exists with email \"existing@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
    testRunner.And("I have registration details with email \"existing@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
    testRunner.When("I send a POST request to \"/api/auth/register\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
    testRunner.And("the response should contain error \"Email already registered\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Validate registration fields")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Validate registration fields")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        [Xunit.InlineDataAttribute("email", "invalid", "Invalid email format", new string[0])]
        [Xunit.InlineDataAttribute("email", "", "Email is required", new string[0])]
        [Xunit.InlineDataAttribute("password", "weak", "Password too weak", new string[0])]
        [Xunit.InlineDataAttribute("password", "", "Password is required", new string[0])]
        [Xunit.InlineDataAttribute("firstName", "", "First name is required", new string[0])]
        [Xunit.InlineDataAttribute("lastName", "", "Last name is required", new string[0])]
        [Xunit.InlineDataAttribute("licenseNumber", "", "License number is required", new string[0])]
        [Xunit.InlineDataAttribute("acceptedTerms", "false", "Terms must be accepted", new string[0])]
        public void ValidateRegistrationFields(string field, string value, string error, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "endpoint",
                    "auth",
                    "validation",
                    "not-implemented"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("field", field);
            argumentsOfScenario.Add("value", value);
            argumentsOfScenario.Add("error", error);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate registration fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 46
    testRunner.Given(string.Format("I have registration details with {0} set to \"{1}\"", field, value), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
    testRunner.When("I send a POST request to \"/api/auth/register\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
    testRunner.And(string.Format("the response should contain error \"{0}\"", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully login with valid credentials")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully login with valid credentials")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyLoginWithValidCredentials()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully login with valid credentials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table483 = new TechTalk.SpecFlow.Table(new string[] {
                            "email",
                            "user@clinic.com"});
                table483.AddRow(new string[] {
                            "password",
                            "SecurePass123!"});
#line 65
    testRunner.Given("a verified user exists with:", ((string)(null)), table483, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table484 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table484.AddRow(new string[] {
                            "email",
                            "user@clinic.com"});
                table484.AddRow(new string[] {
                            "password",
                            "SecurePass123!"});
#line 68
    testRunner.When("I send a POST request to \"/api/auth/login\" with:", ((string)(null)), table484, "When ");
#line hidden
#line 72
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table485 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table485.AddRow(new string[] {
                            "success",
                            "boolean"});
                table485.AddRow(new string[] {
                            "token",
                            "string"});
                table485.AddRow(new string[] {
                            "refreshToken",
                            "string"});
                table485.AddRow(new string[] {
                            "user",
                            "object"});
#line 73
    testRunner.And("the response should contain:", ((string)(null)), table485, "And ");
#line hidden
#line 79
    testRunner.And("the JWT token should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.And("the refresh token should be stored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to login with invalid password")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Fail to login with invalid password")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void FailToLoginWithInvalidPassword()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "error",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fail to login with invalid password", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 84
    testRunner.Given("a verified user exists with email \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table486 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table486.AddRow(new string[] {
                            "email",
                            "user@clinic.com"});
                table486.AddRow(new string[] {
                            "password",
                            "WrongPassword"});
#line 85
    testRunner.When("I send a POST request to \"/api/auth/login\" with:", ((string)(null)), table486, "When ");
#line hidden
#line 89
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
    testRunner.And("the response should contain error \"Invalid credentials\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
    testRunner.And("the failed attempt should be logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Account lockout after failed attempts")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Account lockout after failed attempts")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "security")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccountLockoutAfterFailedAttempts()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "security",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Account lockout after failed attempts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 95
    testRunner.Given("a verified user exists with email \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
    testRunner.And("the account has 4 failed login attempts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
    testRunner.When("I send a POST request to \"/api/auth/login\" with invalid credentials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
    testRunner.Then("the response status should be 429", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
    testRunner.And("the response should contain error \"Account temporarily locked\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
    testRunner.And("the account should be locked for 15 minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully verify email with valid token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully verify email with valid token")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyVerifyEmailWithValidToken()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully verify email with valid token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 105
    testRunner.Given("an unverified user exists with verification token \"valid-token-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 106
    testRunner.When("I send a GET request to \"/api/auth/verify-email/valid-token-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table487 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table487.AddRow(new string[] {
                            "success",
                            "true"});
                table487.AddRow(new string[] {
                            "message",
                            "Email verified successfully"});
#line 108
    testRunner.And("the response should contain:", ((string)(null)), table487, "And ");
#line hidden
#line 112
    testRunner.And("the user should be marked as verified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
    testRunner.And("the token should be marked as used", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to verify with invalid token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Fail to verify with invalid token")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void FailToVerifyWithInvalidToken()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "error",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fail to verify with invalid token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 116
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 117
    testRunner.When("I send a GET request to \"/api/auth/verify-email/invalid-token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
    testRunner.And("the response should contain error \"Invalid or expired token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Fail to verify with expired token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Fail to verify with expired token")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void FailToVerifyWithExpiredToken()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "error",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fail to verify with expired token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 122
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 123
    testRunner.Given("an unverified user exists with expired token \"expired-token-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 124
    testRunner.When("I send a GET request to \"/api/auth/verify-email/expired-token-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 125
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
    testRunner.And("the response should contain error \"Invalid or expired token\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully resend verification email")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully resend verification email")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyResendVerificationEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully resend verification email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 131
    testRunner.Given("an unverified user exists with email \"unverified@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table488 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table488.AddRow(new string[] {
                            "email",
                            "unverified@clinic.com"});
#line 132
    testRunner.When("I send a POST request to \"/api/auth/resend-verification\" with:", ((string)(null)), table488, "When ");
#line hidden
#line 135
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 136
    testRunner.And("the response should contain message \"Verification email sent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
    testRunner.And("a new verification email should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
    testRunner.And("the old token should be invalidated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Rate limit resend verification requests")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Rate limit resend verification requests")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "rate-limit")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RateLimitResendVerificationRequests()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "rate-limit",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rate limit resend verification requests", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 141
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 142
    testRunner.Given("an unverified user exists with email \"unverified@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 143
    testRunner.And("a verification email was sent 30 seconds ago", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
    testRunner.When("I send a POST request to \"/api/auth/resend-verification\" with the same email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 145
    testRunner.Then("the response status should be 429", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 146
    testRunner.And("the response should contain error \"Please wait before requesting another email\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully logout authenticated user")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully logout authenticated user")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyLogoutAuthenticatedUser()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully logout authenticated user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 150
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 151
    testRunner.Given("I am authenticated as \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 152
    testRunner.When("I send a POST request to \"/api/auth/logout\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 154
    testRunner.And("the response should contain message \"Logged out successfully\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
    testRunner.And("the refresh token should be revoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
    testRunner.And("the session should be terminated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully refresh authentication token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully refresh authentication token")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyRefreshAuthenticationToken()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully refresh authentication token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 160
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 161
    testRunner.Given("I have a valid refresh token \"refresh-token-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table489 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table489.AddRow(new string[] {
                            "refreshToken",
                            "refresh-token-123"});
#line 162
    testRunner.When("I send a POST request to \"/api/auth/refresh-token\" with:", ((string)(null)), table489, "When ");
#line hidden
#line 165
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table490 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table490.AddRow(new string[] {
                            "token",
                            "string"});
                table490.AddRow(new string[] {
                            "refreshToken",
                            "string"});
#line 166
    testRunner.And("the response should contain:", ((string)(null)), table490, "And ");
#line hidden
#line 170
    testRunner.And("the old refresh token should be revoked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
    testRunner.And("the new tokens should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully request password reset")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully request password reset")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyRequestPasswordReset()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully request password reset", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 175
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 176
    testRunner.Given("a user exists with email \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table491 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table491.AddRow(new string[] {
                            "email",
                            "user@clinic.com"});
#line 177
    testRunner.When("I send a POST request to \"/api/auth/forgot-password\" with:", ((string)(null)), table491, "When ");
#line hidden
#line 180
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 181
    testRunner.And("the response should contain message \"Password reset email sent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
    testRunner.And("a password reset email should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
    testRunner.And("a reset token should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prevent user enumeration on password reset")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Prevent user enumeration on password reset")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "security")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PreventUserEnumerationOnPasswordReset()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "security",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prevent user enumeration on password reset", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 186
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table492 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table492.AddRow(new string[] {
                            "email",
                            "nonexistent@test.com"});
#line 187
    testRunner.When("I send a POST request to \"/api/auth/forgot-password\" with:", ((string)(null)), table492, "When ");
#line hidden
#line 190
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
    testRunner.And("the response should contain message \"Password reset email sent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
    testRunner.And("the response time should be similar to successful requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully reset password with valid token")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully reset password with valid token")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyResetPasswordWithValidToken()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully reset password with valid token", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 196
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 197
    testRunner.Given("a password reset token \"reset-token-123\" exists for \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table493 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table493.AddRow(new string[] {
                            "token",
                            "reset-token-123"});
                table493.AddRow(new string[] {
                            "newPassword",
                            "NewSecure123!"});
                table493.AddRow(new string[] {
                            "confirmPassword",
                            "NewSecure123!"});
#line 198
    testRunner.When("I send a POST request to \"/api/auth/reset-password\" with:", ((string)(null)), table493, "When ");
#line hidden
#line 203
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 204
    testRunner.And("the response should contain message \"Password reset successfully\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 205
    testRunner.And("the user should be able to login with the new password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
    testRunner.And("the reset token should be invalidated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
    testRunner.And("a confirmation email should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully change password when authenticated")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully change password when authenticated")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyChangePasswordWhenAuthenticated()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully change password when authenticated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 211
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 212
    testRunner.Given("I am authenticated as \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table494 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table494.AddRow(new string[] {
                            "currentPassword",
                            "OldPass123!"});
                table494.AddRow(new string[] {
                            "newPassword",
                            "NewPass123!"});
                table494.AddRow(new string[] {
                            "confirmPassword",
                            "NewPass123!"});
#line 213
    testRunner.When("I send a POST request to \"/api/auth/change-password\" with:", ((string)(null)), table494, "When ");
#line hidden
#line 218
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 219
    testRunner.And("the response should contain message \"Password changed successfully\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
    testRunner.And("the password history should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
    testRunner.And("all sessions should be terminated except current", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prevent password reuse")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Prevent password reuse")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PreventPasswordReuse()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prevent password reuse", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 224
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 225
    testRunner.Given("I am authenticated as \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 226
    testRunner.And("my last 5 passwords included \"OldPass123!\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table495 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table495.AddRow(new string[] {
                            "currentPassword",
                            "Current123!"});
                table495.AddRow(new string[] {
                            "newPassword",
                            "OldPass123!"});
                table495.AddRow(new string[] {
                            "confirmPassword",
                            "OldPass123!"});
#line 227
    testRunner.When("I send a POST request to \"/api/auth/change-password\" with:", ((string)(null)), table495, "When ");
#line hidden
#line 232
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 233
    testRunner.And("the response should contain error \"Password has been used recently\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully setup MFA")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully setup MFA")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "mfa")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullySetupMFA()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "mfa",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully setup MFA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 237
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 238
    testRunner.Given("I am authenticated as \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 239
    testRunner.When("I send a POST request to \"/api/auth/mfa/setup\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 240
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table496 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table496.AddRow(new string[] {
                            "secret",
                            "string"});
                table496.AddRow(new string[] {
                            "qrCode",
                            "string"});
                table496.AddRow(new string[] {
                            "backupCodes",
                            "array"});
#line 241
    testRunner.And("the response should contain:", ((string)(null)), table496, "And ");
#line hidden
#line 246
    testRunner.And("MFA should be pending verification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully verify and enable MFA")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully verify and enable MFA")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "mfa")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyVerifyAndEnableMFA()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "mfa",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully verify and enable MFA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 250
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 251
    testRunner.Given("I am authenticated as \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 252
    testRunner.And("I have MFA setup pending with secret \"secret123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table497 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table497.AddRow(new string[] {
                            "code",
                            "123456"});
#line 253
    testRunner.When("I send a POST request to \"/api/auth/mfa/verify\" with:", ((string)(null)), table497, "When ");
#line hidden
#line 256
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 257
    testRunner.And("the response should contain message \"MFA enabled successfully\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 258
    testRunner.And("MFA should be active for the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Successfully disable MFA")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Successfully disable MFA")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "mfa")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SuccessfullyDisableMFA()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "mfa",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successfully disable MFA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 262
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 263
    testRunner.Given("I am authenticated as \"user@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 264
    testRunner.And("I have MFA enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table498 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table498.AddRow(new string[] {
                            "password",
                            "Current123!"});
                table498.AddRow(new string[] {
                            "code",
                            "123456"});
#line 265
    testRunner.When("I send a POST request to \"/api/auth/mfa/disable\" with:", ((string)(null)), table498, "When ");
#line hidden
#line 269
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 270
    testRunner.And("the response should contain message \"MFA disabled successfully\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 271
    testRunner.And("MFA should be inactive for the account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get list of available SSO providers")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Get list of available SSO providers")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "sso")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetListOfAvailableSSOProviders()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "sso",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get list of available SSO providers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 275
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 276
    testRunner.When("I send a GET request to \"/api/auth/sso/providers\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 277
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table499 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table499.AddRow(new string[] {
                            "id",
                            "string"});
                table499.AddRow(new string[] {
                            "name",
                            "string"});
                table499.AddRow(new string[] {
                            "type",
                            "string"});
                table499.AddRow(new string[] {
                            "enabled",
                            "boolean"});
#line 278
    testRunner.And("the auth response should contain array of:", ((string)(null)), table499, "And ");
#line hidden
#line 284
    testRunner.And("should include providers like \"google\", \"clever\", \"classlink\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get SSO redirect URL for Google")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Get SSO redirect URL for Google")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "sso")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetSSORedirectURLForGoogle()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "sso",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get SSO redirect URL for Google", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 288
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 289
    testRunner.When("I send a GET request to \"/api/auth/sso/google/redirect\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 290
    testRunner.Then("the response status should be 302", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 291
    testRunner.And("the location header should contain \"accounts.google.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 292
    testRunner.And("the redirect should include proper OAuth parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle SSO callback from Google")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Handle SSO callback from Google")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "sso")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleSSOCallbackFromGoogle()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "sso",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle SSO callback from Google", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 296
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 297
    testRunner.Given("Google returns a valid OAuth code \"auth-code-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table500 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table500.AddRow(new string[] {
                            "code",
                            "auth-code-123"});
                table500.AddRow(new string[] {
                            "state",
                            "state-token"});
#line 298
    testRunner.When("I send a POST request to \"/api/auth/sso/google/callback\" with:", ((string)(null)), table500, "When ");
#line hidden
#line 302
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table501 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table501.AddRow(new string[] {
                            "success",
                            "boolean"});
                table501.AddRow(new string[] {
                            "token",
                            "string"});
                table501.AddRow(new string[] {
                            "refreshToken",
                            "string"});
                table501.AddRow(new string[] {
                            "user",
                            "object"});
#line 303
    testRunner.And("the response should contain:", ((string)(null)), table501, "And ");
#line hidden
#line 309
    testRunner.And("the user should be created or updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 310
    testRunner.And("the SSO link should be established", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify therapist license with state board during registration")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Verify therapist license with state board during registration")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "license-verification")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void VerifyTherapistLicenseWithStateBoardDuringRegistration()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "license-verification",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify therapist license with state board during registration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 314
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table502 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table502.AddRow(new string[] {
                            "email",
                            "jane.smith@clinic.com"});
                table502.AddRow(new string[] {
                            "password",
                            "SecurePass123!"});
                table502.AddRow(new string[] {
                            "confirmPassword",
                            "SecurePass123!"});
                table502.AddRow(new string[] {
                            "firstName",
                            "Jane"});
                table502.AddRow(new string[] {
                            "lastName",
                            "Smith"});
                table502.AddRow(new string[] {
                            "licenseNumber",
                            "PT-67890"});
                table502.AddRow(new string[] {
                            "licenseState",
                            "CA"});
                table502.AddRow(new string[] {
                            "licenseType",
                            "PT"});
                table502.AddRow(new string[] {
                            "phone",
                            "555-987-6543"});
                table502.AddRow(new string[] {
                            "acceptedTerms",
                            "true"});
#line 315
    testRunner.Given("I have valid registration details:", ((string)(null)), table502, "Given ");
#line hidden
#line 327
    testRunner.When("I send a POST request to \"/api/auth/register\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 328
    testRunner.Then("the system should verify license \"PT-67890\" with \"CA\" state board", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table503 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table503.AddRow(new string[] {
                            "isValid",
                            "true"});
                table503.AddRow(new string[] {
                            "licenseStatus",
                            "Active"});
                table503.AddRow(new string[] {
                            "expirationDate",
                            "2025-12-31"});
                table503.AddRow(new string[] {
                            "disciplinaryAction",
                            "false"});
#line 329
    testRunner.And("the license verification should return:", ((string)(null)), table503, "And ");
#line hidden
#line 335
    testRunner.And("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 336
    testRunner.And("the license verification should be recorded in the database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Reject registration with invalid license")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Reject registration with invalid license")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "license-verification")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RejectRegistrationWithInvalidLicense()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "license-verification",
                    "error",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Reject registration with invalid license", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 339
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 340
    testRunner.Given("I have registration details with invalid license \"INVALID-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 341
    testRunner.When("I send a POST request to \"/api/auth/register\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 342
    testRunner.Then("the system should verify the license with state board", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 343
    testRunner.And("the license verification should fail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 344
    testRunner.And("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 345
    testRunner.And("the response should contain error \"License verification failed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 346
    testRunner.And("the registration should not proceed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Register with multiple state licenses")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Register with multiple state licenses")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "license-verification")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RegisterWithMultipleStateLicenses()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "license-verification",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register with multiple state licenses", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 349
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 350
    testRunner.Given("I have valid registration details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table504 = new TechTalk.SpecFlow.Table(new string[] {
                            "state",
                            "licenseNumber",
                            "licenseType"});
                table504.AddRow(new string[] {
                            "CA",
                            "OT-12345",
                            "OT"});
                table504.AddRow(new string[] {
                            "AZ",
                            "OT-54321",
                            "OT"});
                table504.AddRow(new string[] {
                            "NV",
                            "OT-98765",
                            "OT"});
#line 351
    testRunner.And("I have multiple licenses:", ((string)(null)), table504, "And ");
#line hidden
#line 356
    testRunner.When("I send a POST request to \"/api/auth/register\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 357
    testRunner.Then("the system should verify all licenses with respective state boards", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 358
    testRunner.And("all licenses should be valid", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 359
    testRunner.And("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 360
    testRunner.And("all licenses should be stored in professional_licenses table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ensure HIPAA-compliant registration data handling")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Ensure HIPAA-compliant registration data handling")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "hipaa")]
        [Xunit.TraitAttribute("Category", "security")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnsureHIPAA_CompliantRegistrationDataHandling()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "hipaa",
                    "security",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure HIPAA-compliant registration data handling", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 364
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 365
    testRunner.Given("I have valid registration details with PHI-related fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 366
    testRunner.When("I send a POST request to \"/api/auth/register\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 367
    testRunner.Then("all data transmission should use TLS 1.3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table505 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "encryptionStatus"});
                table505.AddRow(new string[] {
                            "firstName",
                            "encrypted"});
                table505.AddRow(new string[] {
                            "lastName",
                            "encrypted"});
                table505.AddRow(new string[] {
                            "phone",
                            "encrypted"});
                table505.AddRow(new string[] {
                            "licenseNumber",
                            "encrypted"});
#line 368
    testRunner.And("sensitive fields should be encrypted with AES-256:", ((string)(null)), table505, "And ");
#line hidden
                TechTalk.SpecFlow.Table table506 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table506.AddRow(new string[] {
                            "action",
                            "user_registration"});
                table506.AddRow(new string[] {
                            "encryptionVerified",
                            "true"});
                table506.AddRow(new string[] {
                            "dataClassification",
                            "PHI"});
                table506.AddRow(new string[] {
                            "complianceStandard",
                            "HIPAA"});
#line 374
    testRunner.And("the registration audit log should contain:", ((string)(null)), table506, "And ");
#line hidden
#line 380
    testRunner.And("no sensitive data should be logged in plain text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create HIPAA-compliant audit trail for registration")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Create HIPAA-compliant audit trail for registration")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "hipaa")]
        [Xunit.TraitAttribute("Category", "audit")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateHIPAA_CompliantAuditTrailForRegistration()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "hipaa",
                    "audit",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create HIPAA-compliant audit trail for registration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 383
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 384
    testRunner.Given("HIPAA audit logging is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 385
    testRunner.When("I send a POST request to \"/api/auth/register\" with valid data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table507 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "requirement"});
                table507.AddRow(new string[] {
                            "timestamp",
                            "ISO 8601 format with timezone"});
                table507.AddRow(new string[] {
                            "userId",
                            "Anonymized until verified"});
                table507.AddRow(new string[] {
                            "action",
                            "registration_attempt"});
                table507.AddRow(new string[] {
                            "ipAddress",
                            "Hashed for privacy"});
                table507.AddRow(new string[] {
                            "userAgent",
                            "Recorded"});
                table507.AddRow(new string[] {
                            "dataAccessed",
                            "List of fields accessed"});
                table507.AddRow(new string[] {
                            "outcome",
                            "success/failure"});
#line 386
    testRunner.Then("the audit log should record:", ((string)(null)), table507, "Then ");
#line hidden
#line 395
    testRunner.And("the audit log should be immutable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 396
    testRunner.And("the audit log should be retained for 7 years", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Select subscription tier during registration flow")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Select subscription tier during registration flow")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SelectSubscriptionTierDuringRegistrationFlow()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "subscription",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Select subscription tier during registration flow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 400
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 401
    testRunner.Given("I have successfully registered and verified my email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 402
    testRunner.When("I am redirected to subscription selection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table508 = new TechTalk.SpecFlow.Table(new string[] {
                            "tier",
                            "price",
                            "features"});
                table508.AddRow(new string[] {
                            "Basic",
                            "$9.95/month",
                            "10 resources/month, basic tools"});
                table508.AddRow(new string[] {
                            "Professional",
                            "$19.95/month",
                            "Unlimited resources, all tools"});
                table508.AddRow(new string[] {
                            "Team",
                            "$15/user/mo",
                            "5+ users, admin dashboard"});
#line 403
    testRunner.Then("I should see available tiers:", ((string)(null)), table508, "Then ");
#line hidden
#line 408
    testRunner.When("I select \"Professional\" tier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 409
    testRunner.And("I provide payment information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 410
    testRunner.Then("my subscription should be activated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 411
    testRunner.And("I should have access to Professional features", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 412
    testRunner.And("the billing should start immediately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Start with free trial before subscription")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Start with free trial before subscription")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "subscription")]
        [Xunit.TraitAttribute("Category", "trial")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void StartWithFreeTrialBeforeSubscription()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "subscription",
                    "trial",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start with free trial before subscription", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 415
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 416
    testRunner.Given("I have successfully registered as a new therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 417
    testRunner.When("I am prompted for subscription selection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 418
    testRunner.And("I choose \"Start 14-day free trial\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table509 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table509.AddRow(new string[] {
                            "subscriptionType",
                            "trial"});
                table509.AddRow(new string[] {
                            "trialEndDate",
                            "14 days from today"});
                table509.AddRow(new string[] {
                            "accessLevel",
                            "professional"});
                table509.AddRow(new string[] {
                            "paymentRequired",
                            "false"});
#line 419
    testRunner.Then("my account should be provisioned with:", ((string)(null)), table509, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table510 = new TechTalk.SpecFlow.Table(new string[] {
                            "daysBeforeEnd",
                            "emailType"});
                table510.AddRow(new string[] {
                            "7",
                            "trial_halfway"});
                table510.AddRow(new string[] {
                            "3",
                            "trial_ending_soon"});
                table510.AddRow(new string[] {
                            "1",
                            "trial_last_day"});
#line 425
    testRunner.And("I should receive trial reminder emails at:", ((string)(null)), table510, "And ");
#line hidden
                TechTalk.SpecFlow.Table table511 = new TechTalk.SpecFlow.Table(new string[] {
                            "limitation",
                            "value"});
                table511.AddRow(new string[] {
                            "aiGenerations",
                            "10"});
                table511.AddRow(new string[] {
                            "marketplaceSales",
                            "0"});
#line 430
    testRunner.And("trial limitations should apply:", ((string)(null)), table511, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Register with complete professional details")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Register with complete professional details")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "professional-details")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RegisterWithCompleteProfessionalDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "professional-details",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register with complete professional details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 437
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 438
    testRunner.Given("I am registering as a therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table512 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table512.AddRow(new string[] {
                            "npiNumber",
                            "1234567890"});
                table512.AddRow(new string[] {
                            "insuranceProviderIds",
                            "BCBS:12345,Aetna:67890"});
                table512.AddRow(new string[] {
                            "specializations",
                            "Pediatric,Sensory Integration"});
                table512.AddRow(new string[] {
                            "yearsOfExperience",
                            "8"});
                table512.AddRow(new string[] {
                            "workSettings",
                            "School,Private Practice"});
                table512.AddRow(new string[] {
                            "certifications",
                            "SIPT,NDT"});
                table512.AddRow(new string[] {
                            "continuingEdInterests",
                            "Autism,Feeding"});
#line 439
    testRunner.When("I provide professional details:", ((string)(null)), table512, "When ");
#line hidden
                TechTalk.SpecFlow.Table table513 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "validation"});
                table513.AddRow(new string[] {
                            "npiNumber",
                            "Valid format and checksum"});
                table513.AddRow(new string[] {
                            "experience",
                            "Positive integer"});
                table513.AddRow(new string[] {
                            "specialties",
                            "From approved list"});
#line 448
    testRunner.Then("all professional details should be validated:", ((string)(null)), table513, "Then ");
#line hidden
#line 453
    testRunner.And("the registration should proceed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 454
    testRunner.And("professional profile should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify professional certifications during registration")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Verify professional certifications during registration")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "professional-details")]
        [Xunit.TraitAttribute("Category", "verification")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void VerifyProfessionalCertificationsDuringRegistration()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "professional-details",
                    "verification",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify professional certifications during registration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 457
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 458
    testRunner.Given("I claim to have \"SIPT\" certification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table514 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table514.AddRow(new string[] {
                            "certificateNumber",
                            "SIPT-2023-1234"});
                table514.AddRow(new string[] {
                            "issuingBody",
                            "USC/WPS"});
                table514.AddRow(new string[] {
                            "issueDate",
                            "2023-01-15"});
                table514.AddRow(new string[] {
                            "expirationDate",
                            "2026-01-15"});
#line 459
    testRunner.When("I provide certification details:", ((string)(null)), table514, "When ");
#line hidden
#line 465
    testRunner.Then("the system should verify with issuing body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table515 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table515.AddRow(new string[] {
                            "valid",
                            "true"});
                table515.AddRow(new string[] {
                            "current",
                            "true"});
                table515.AddRow(new string[] {
                            "holder",
                            "Matches registrant name"});
#line 466
    testRunner.And("the verification should return:", ((string)(null)), table515, "And ");
#line hidden
#line 471
    testRunner.And("certification should be added to profile", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle state-specific registration requirements")]
        [Xunit.TraitAttribute("FeatureTitle", "Authentication API Endpoints (FR-001)")]
        [Xunit.TraitAttribute("Description", "Handle state-specific registration requirements")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "auth")]
        [Xunit.TraitAttribute("Category", "state-requirements")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleState_SpecificRegistrationRequirements()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "auth",
                    "state-requirements",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle state-specific registration requirements", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 475
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  this.FeatureBackground();
#line hidden
#line 476
    testRunner.Given("I am registering with a \"TX\" license", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 477
    testRunner.When("the system checks state-specific requirements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table516 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "requirement"});
                table516.AddRow(new string[] {
                            "continuingEdHours",
                            "30 hours/2 years"});
                table516.AddRow(new string[] {
                            "jurisprudenceExam",
                            "Passed within 1 year"});
                table516.AddRow(new string[] {
                            "liabilityInsurance",
                            "$1M/$3M minimum"});
#line 478
    testRunner.Then("additional fields should be required:", ((string)(null)), table516, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table517 = new TechTalk.SpecFlow.Table(new string[] {
                            "acknowledgment"});
                table517.AddRow(new string[] {
                            "I understand TX supervision requirements"});
                table517.AddRow(new string[] {
                            "I will maintain required CE hours"});
                table517.AddRow(new string[] {
                            "I will report any disciplinary actions"});
#line 483
    testRunner.And("I must acknowledge state-specific terms:", ((string)(null)), table517, "And ");
#line hidden
#line 488
    testRunner.And("state-specific validations should apply", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AuthenticationAPIEndpointsFR_001Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AuthenticationAPIEndpointsFR_001Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
