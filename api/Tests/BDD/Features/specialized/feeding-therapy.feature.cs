// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Specialized
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FeedingTherapyResourcesAPIEndpointsFR_041Feature : object, Xunit.IClassFixture<FeedingTherapyResourcesAPIEndpointsFR_041Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "feeding-therapy.feature"
#line hidden
        
        public FeedingTherapyResourcesAPIEndpointsFR_041Feature(FeedingTherapyResourcesAPIEndpointsFR_041Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/specialized", "Feeding Therapy Resources API Endpoints (FR-041)", "  As a therapy professional\n  I want comprehensive feeding therapy resources\n  So" +
                    " that I can address feeding and swallowing difficulties", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("I have feeding therapy training", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get feeding assessment tools")]
        [Xunit.TraitAttribute("FeatureTitle", "Feeding Therapy Resources API Endpoints (FR-041)")]
        [Xunit.TraitAttribute("Description", "Get feeding assessment tools")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "feeding")]
        [Xunit.TraitAttribute("Category", "assessment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetFeedingAssessmentTools()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "feeding",
                    "assessment",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get feeding assessment tools", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 14
    testRunner.When("I send a GET request to \"/api/feeding-therapy/assessments?age=toddler\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2740 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2740.AddRow(new string[] {
                            "assessmentId",
                            "string"});
                table2740.AddRow(new string[] {
                            "name",
                            "string"});
                table2740.AddRow(new string[] {
                            "ageRange",
                            "object"});
                table2740.AddRow(new string[] {
                            "domains",
                            "array"});
                table2740.AddRow(new string[] {
                            "includesOralMotor",
                            "boolean"});
                table2740.AddRow(new string[] {
                            "includesSensory",
                            "boolean"});
                table2740.AddRow(new string[] {
                            "parentVersion",
                            "boolean"});
#line 16
    testRunner.And("the therapy response should contain array of:", ((string)(null)), table2740, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Document feeding evaluation")]
        [Xunit.TraitAttribute("FeatureTitle", "Feeding Therapy Resources API Endpoints (FR-041)")]
        [Xunit.TraitAttribute("Description", "Document feeding evaluation")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "feeding")]
        [Xunit.TraitAttribute("Category", "evaluation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentFeedingEvaluation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "feeding",
                    "evaluation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Document feeding evaluation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2741 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2741.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2741.AddRow(new string[] {
                            "evaluationType",
                            "comprehensive"});
                table2741.AddRow(new string[] {
                            "medicalHistory",
                            "{\"reflux\": true, \"allergies\": [\"dairy\"]}"});
                table2741.AddRow(new string[] {
                            "currentDiet",
                            "{\"textures\": [\"puree\", \"soft-mashed\"]}"});
                table2741.AddRow(new string[] {
                            "oralMotorStatus",
                            "{\"jaw\": \"weak\", \"tongue\": \"limited-lateralization\"}"});
                table2741.AddRow(new string[] {
                            "sensoryProfile",
                            "{\"oral-defensive\": true}"});
                table2741.AddRow(new string[] {
                            "mealObservation",
                            "{\"duration\": 45, \"intake\": \"minimal\"}"});
#line 29
    testRunner.When("I send a POST request to \"/api/feeding-therapy/evaluation\" with:", ((string)(null)), table2741, "When ");
#line hidden
#line 38
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.And("evaluation report should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
    testRunner.And("treatment recommendations should be provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access SOS feeding approach materials")]
        [Xunit.TraitAttribute("FeatureTitle", "Feeding Therapy Resources API Endpoints (FR-041)")]
        [Xunit.TraitAttribute("Description", "Access SOS feeding approach materials")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "feeding")]
        [Xunit.TraitAttribute("Category", "sos")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessSOSFeedingApproachMaterials()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "feeding",
                    "sos",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access SOS feeding approach materials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 45
    testRunner.When("I send a GET request to \"/api/feeding-therapy/protocols/sos-approach\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2742 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2742.AddRow(new string[] {
                            "hierarchySteps",
                            "array"});
                table2742.AddRow(new string[] {
                            "playActivities",
                            "array"});
                table2742.AddRow(new string[] {
                            "parentHandouts",
                            "array"});
                table2742.AddRow(new string[] {
                            "dataSheets",
                            "array"});
                table2742.AddRow(new string[] {
                            "foodChaining",
                            "object"});
#line 47
    testRunner.And("the response should contain:", ((string)(null)), table2742, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create food chaining plan")]
        [Xunit.TraitAttribute("FeatureTitle", "Feeding Therapy Resources API Endpoints (FR-041)")]
        [Xunit.TraitAttribute("Description", "Create food chaining plan")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "feeding")]
        [Xunit.TraitAttribute("Category", "food-chaining")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateFoodChainingPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "feeding",
                    "food-chaining",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create food chaining plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2743 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2743.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2743.AddRow(new string[] {
                            "targetFood",
                            "broccoli"});
                table2743.AddRow(new string[] {
                            "currentFoods",
                            "[\"chicken-nuggets\", \"crackers\"]"});
                table2743.AddRow(new string[] {
                            "chainingPath",
                            "[\"green-beans\", \"asparagus\", \"broccoli\"]"});
                table2743.AddRow(new string[] {
                            "timeframe",
                            "8-weeks"});
#line 58
    testRunner.When("I send a POST request to \"/api/feeding-therapy/food-chaining\" with:", ((string)(null)), table2743, "When ");
#line hidden
#line 65
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
    testRunner.And("chaining steps should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
    testRunner.And("progress tracking should be enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get oral motor exercise library")]
        [Xunit.TraitAttribute("FeatureTitle", "Feeding Therapy Resources API Endpoints (FR-041)")]
        [Xunit.TraitAttribute("Description", "Get oral motor exercise library")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "feeding")]
        [Xunit.TraitAttribute("Category", "oral-motor")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetOralMotorExerciseLibrary()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "feeding",
                    "oral-motor",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get oral motor exercise library", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 72
    testRunner.When("I send a GET request to \"/api/feeding-therapy/oral-motor-exercises?target=tongue-" +
                        "lateralization\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2744 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2744.AddRow(new string[] {
                            "exerciseName",
                            "string"});
                table2744.AddRow(new string[] {
                            "videoDemo",
                            "string"});
                table2744.AddRow(new string[] {
                            "pictureCards",
                            "array"});
                table2744.AddRow(new string[] {
                            "instructions",
                            "string"});
                table2744.AddRow(new string[] {
                            "precautions",
                            "array"});
                table2744.AddRow(new string[] {
                            "progressionLevels",
                            "array"});
#line 74
    testRunner.And("exercises should include:", ((string)(null)), table2744, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Plan texture progression")]
        [Xunit.TraitAttribute("FeatureTitle", "Feeding Therapy Resources API Endpoints (FR-041)")]
        [Xunit.TraitAttribute("Description", "Plan texture progression")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "feeding")]
        [Xunit.TraitAttribute("Category", "textures")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PlanTextureProgression()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "feeding",
                    "textures",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Plan texture progression", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2745 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2745.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2745.AddRow(new string[] {
                            "currentTexture",
                            "puree"});
                table2745.AddRow(new string[] {
                            "targetTexture",
                            "regular"});
                table2745.AddRow(new string[] {
                            "medicalClearance",
                            "true"});
                table2745.AddRow(new string[] {
                            "timeline",
                            "12-weeks"});
#line 86
    testRunner.When("I send a POST request to \"/api/feeding-therapy/texture-progression\" with:", ((string)(null)), table2745, "When ");
#line hidden
#line 93
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2746 = new TechTalk.SpecFlow.Table(new string[] {
                            "stage",
                            "texture"});
                table2746.AddRow(new string[] {
                            "week-1-2",
                            "smooth-puree"});
                table2746.AddRow(new string[] {
                            "week-3-4",
                            "thick-puree"});
                table2746.AddRow(new string[] {
                            "week-5-6",
                            "puree-with-lumps"});
                table2746.AddRow(new string[] {
                            "week-7-8",
                            "mashed"});
                table2746.AddRow(new string[] {
                            "week-9-10",
                            "soft-solids"});
                table2746.AddRow(new string[] {
                            "week-11-12",
                            "regular-with-modifications"});
#line 94
    testRunner.And("progression plan should include:", ((string)(null)), table2746, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get mealtime behavior strategies")]
        [Xunit.TraitAttribute("FeatureTitle", "Feeding Therapy Resources API Endpoints (FR-041)")]
        [Xunit.TraitAttribute("Description", "Get mealtime behavior strategies")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "feeding")]
        [Xunit.TraitAttribute("Category", "mealtime")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetMealtimeBehaviorStrategies()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "feeding",
                    "mealtime",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get mealtime behavior strategies", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 106
    testRunner.When("I send a GET request to \"/api/feeding-therapy/mealtime-strategies?behavior=food-r" +
                        "efusal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2747 = new TechTalk.SpecFlow.Table(new string[] {
                            "strategy",
                            "description"});
                table2747.AddRow(new string[] {
                            "environmental-mods",
                            "Reduce distractions"});
                table2747.AddRow(new string[] {
                            "scheduling",
                            "Consistent meal times"});
                table2747.AddRow(new string[] {
                            "presentation",
                            "Small portions"});
                table2747.AddRow(new string[] {
                            "reinforcement",
                            "Non-food rewards"});
#line 108
    testRunner.And("strategies should include:", ((string)(null)), table2747, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create parent feeding program")]
        [Xunit.TraitAttribute("FeatureTitle", "Feeding Therapy Resources API Endpoints (FR-041)")]
        [Xunit.TraitAttribute("Description", "Create parent feeding program")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "feeding")]
        [Xunit.TraitAttribute("Category", "parent-education")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateParentFeedingProgram()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "feeding",
                    "parent-education",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create parent feeding program", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 117
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2748 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2748.AddRow(new string[] {
                            "familyId",
                            "family-123"});
                table2748.AddRow(new string[] {
                            "trainingTopics",
                            "[\"food-chaining\", \"mealtime-structure\"]"});
                table2748.AddRow(new string[] {
                            "deliveryMethod",
                            "virtual"});
                table2748.AddRow(new string[] {
                            "language",
                            "es"});
#line 118
    testRunner.When("I send a POST request to \"/api/feeding-therapy/parent-training\" with:", ((string)(null)), table2748, "When ");
#line hidden
#line 124
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
    testRunner.And("training modules should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
    testRunner.And("materials should be in Spanish", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get adaptive equipment recommendations")]
        [Xunit.TraitAttribute("FeatureTitle", "Feeding Therapy Resources API Endpoints (FR-041)")]
        [Xunit.TraitAttribute("Description", "Get adaptive equipment recommendations")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "feeding")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetAdaptiveEquipmentRecommendations()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "feeding",
                    "equipment",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get adaptive equipment recommendations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 131
    testRunner.When("I send a GET request to \"/api/feeding-therapy/equipment-recommendations?need=lip-" +
                        "closure\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 132
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2749 = new TechTalk.SpecFlow.Table(new string[] {
                            "equipment",
                            "purpose"});
                table2749.AddRow(new string[] {
                            "cut-out-cups",
                            "Promotes lip closure"});
                table2749.AddRow(new string[] {
                            "straw-hierarchy",
                            "Oral motor development"});
                table2749.AddRow(new string[] {
                            "textured-spoons",
                            "Sensory input"});
#line 133
    testRunner.And("recommendations should include:", ((string)(null)), table2749, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record feeding session data")]
        [Xunit.TraitAttribute("FeatureTitle", "Feeding Therapy Resources API Endpoints (FR-041)")]
        [Xunit.TraitAttribute("Description", "Record feeding session data")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "feeding")]
        [Xunit.TraitAttribute("Category", "data")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordFeedingSessionData()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "feeding",
                    "data",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record feeding session data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 141
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2750 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2750.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2750.AddRow(new string[] {
                            "sessionDate",
                            "2024-01-22"});
                table2750.AddRow(new string[] {
                            "mealType",
                            "lunch"});
                table2750.AddRow(new string[] {
                            "duration",
                            "30"});
                table2750.AddRow(new string[] {
                            "foodsPresented",
                            "[\"apple\", \"sandwich\", \"milk\"]"});
                table2750.AddRow(new string[] {
                            "foodsAccepted",
                            "[\"milk\"]"});
                table2750.AddRow(new string[] {
                            "behaviors",
                            "[\"pushing-plate\", \"turning-head\"]"});
                table2750.AddRow(new string[] {
                            "techniques",
                            "[\"food-chaining\", \"positive-reinforcement\"]"});
#line 142
    testRunner.When("I send a POST request to \"/api/feeding-therapy/data-collection\" with:", ((string)(null)), table2750, "When ");
#line hidden
#line 152
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 153
    testRunner.And("data should be tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
    testRunner.And("progress graphs should update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FeedingTherapyResourcesAPIEndpointsFR_041Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FeedingTherapyResourcesAPIEndpointsFR_041Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
