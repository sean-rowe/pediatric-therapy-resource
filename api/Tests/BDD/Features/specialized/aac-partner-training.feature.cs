// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Specialized
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AACCommunicationPartnerTrainingFeature : object, Xunit.IClassFixture<AACCommunicationPartnerTrainingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "aac-partner-training.feature"
#line hidden
        
        public AACCommunicationPartnerTrainingFeature(AACCommunicationPartnerTrainingFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/specialized", "AAC Communication Partner Training", "  As a therapy professional implementing AAC\n  I want comprehensive communication" +
                    " partner training programs\n  So that all communication partners can effectively " +
                    "support AAC users", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("AAC partner training system is configured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("training modules are evidence-based", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("assessment tools are available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
    testRunner.And("support resources are comprehensive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
    testRunner.And("competency tracking is implemented", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Implement comprehensive family communication partner training")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Implement comprehensive family communication partner training")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "family-training")]
        [Xunit.TraitAttribute("Category", "critical")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ImplementComprehensiveFamilyCommunicationPartnerTraining()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "family-training",
                    "critical",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Implement comprehensive family communication partner training", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 16
    testRunner.Given("families are primary communication partners", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
    testRunner.And("family competence is crucial for AAC success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2543 = new TechTalk.SpecFlow.Table(new string[] {
                            "Family Member",
                            "Training Focus",
                            "Training Duration",
                            "Competency Level Target",
                            "Support Frequency",
                            "Training Materials"});
                table2543.AddRow(new string[] {
                            "Primary caregiver",
                            "Complete AAC competency",
                            "12-15 hours",
                            "Advanced",
                            "Weekly check-ins",
                            "Comprehensive manual"});
                table2543.AddRow(new string[] {
                            "Secondary caregiver",
                            "Essential skills",
                            "8-10 hours",
                            "Intermediate",
                            "Bi-weekly check-ins",
                            "Essential guide"});
                table2543.AddRow(new string[] {
                            "Siblings",
                            "Age-appropriate support",
                            "4-6 hours",
                            "Basic-intermediate",
                            "Monthly check-ins",
                            "Sibling handbook"});
                table2543.AddRow(new string[] {
                            "Grandparents",
                            "Supportive communication",
                            "3-4 hours",
                            "Basic",
                            "Monthly check-ins",
                            "Grandparent guide"});
                table2543.AddRow(new string[] {
                            "Extended family",
                            "Awareness and respect",
                            "2-3 hours",
                            "Basic awareness",
                            "Quarterly check-ins",
                            "Awareness materials"});
                table2543.AddRow(new string[] {
                            "Family friends",
                            "Social inclusion",
                            "1-2 hours",
                            "Basic awareness",
                            "As-needed support",
                            "Quick reference"});
#line 18
    testRunner.When("implementing family training programs:", ((string)(null)), table2543, "When ");
#line hidden
#line 26
    testRunner.Then("family training should be comprehensive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
    testRunner.And("competency levels should be appropriate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
    testRunner.And("support should be ongoing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
    testRunner.And("materials should be family-friendly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Train educational communication partners")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Train educational communication partners")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "educational-partners")]
        [Xunit.TraitAttribute("Category", "critical")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrainEducationalCommunicationPartners()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "educational-partners",
                    "critical",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Train educational communication partners", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 33
    testRunner.Given("educational settings require specialized AAC support", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
    testRunner.And("teacher competence affects academic success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2544 = new TechTalk.SpecFlow.Table(new string[] {
                            "Educational Role",
                            "Training Components",
                            "Training Schedule",
                            "Competency Requirements",
                            "Integration Focus",
                            "Assessment Methods"});
                table2544.AddRow(new string[] {
                            "General education teacher",
                            "Classroom AAC integration",
                            "6-8 hours initial + ongoing",
                            "Intermediate competency",
                            "Curriculum integration",
                            "Classroom observation"});
                table2544.AddRow(new string[] {
                            "Special education teacher",
                            "Advanced AAC strategies",
                            "12-15 hours",
                            "Advanced competency",
                            "IEP implementation",
                            "Skills demonstration"});
                table2544.AddRow(new string[] {
                            "Teaching assistant",
                            "Daily support skills",
                            "4-6 hours",
                            "Basic-intermediate",
                            "Instructional support",
                            "Support checklist"});
                table2544.AddRow(new string[] {
                            "Related service providers",
                            "Discipline-specific integration",
                            "8-10 hours",
                            "Advanced competency",
                            "Service delivery",
                            "Service integration"});
                table2544.AddRow(new string[] {
                            "Administration",
                            "Policy and support",
                            "2-3 hours",
                            "Awareness",
                            "System support",
                            "Policy implementation"});
                table2544.AddRow(new string[] {
                            "Substitute teachers",
                            "Emergency support",
                            "1-2 hours",
                            "Basic awareness",
                            "Continuity maintenance",
                            "Quick competency check"});
#line 35
    testRunner.When("training educational partners:", ((string)(null)), table2544, "When ");
#line hidden
#line 43
    testRunner.Then("educational training should be role-specific", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
    testRunner.And("competency should match responsibilities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.And("integration should be seamless", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
    testRunner.And("assessment should be thorough", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Develop peer communication partner programs")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Develop peer communication partner programs")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "peer-training")]
        [Xunit.TraitAttribute("Category", "high")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DevelopPeerCommunicationPartnerPrograms()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "peer-training",
                    "high",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Develop peer communication partner programs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 50
    testRunner.Given("peers are natural communication partners", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
    testRunner.And("peer acceptance enhances social inclusion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2545 = new TechTalk.SpecFlow.Table(new string[] {
                            "Peer Group",
                            "Training Approach",
                            "Training Content",
                            "Duration",
                            "Competency Goal",
                            "Social Benefits"});
                table2545.AddRow(new string[] {
                            "Classroom peers",
                            "Group awareness sessions",
                            "AAC understanding",
                            "1-2 hours",
                            "Basic awareness",
                            "Inclusive classroom"});
                table2545.AddRow(new string[] {
                            "Close friends",
                            "Individual training",
                            "Detailed support skills",
                            "3-4 hours",
                            "Intermediate support",
                            "Strong friendships"});
                table2545.AddRow(new string[] {
                            "Activity partners",
                            "Activity-specific training",
                            "Context-relevant skills",
                            "2-3 hours",
                            "Activity competency",
                            "Successful participation"});
                table2545.AddRow(new string[] {
                            "Peer buddies",
                            "Formal buddy training",
                            "Comprehensive support",
                            "4-6 hours",
                            "Advanced support",
                            "Structured friendship"});
                table2545.AddRow(new string[] {
                            "Team members",
                            "Team integration training",
                            "Collaborative skills",
                            "2-3 hours",
                            "Team competency",
                            "Team inclusion"});
                table2545.AddRow(new string[] {
                            "Study partners",
                            "Academic support training",
                            "Educational assistance",
                            "3-4 hours",
                            "Academic support",
                            "Educational success"});
#line 52
    testRunner.When("developing peer training programs:", ((string)(null)), table2545, "When ");
#line hidden
#line 60
    testRunner.Then("peer training should be age-appropriate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
    testRunner.And("approaches should be engaging", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
    testRunner.And("social benefits should be maximized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And("inclusion should be promoted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Train professional communication partners")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Train professional communication partners")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "professional-partners")]
        [Xunit.TraitAttribute("Category", "high")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrainProfessionalCommunicationPartners()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "professional-partners",
                    "high",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Train professional communication partners", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 67
    testRunner.Given("professionals need specialized AAC competencies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
    testRunner.And("professional support affects service quality", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2546 = new TechTalk.SpecFlow.Table(new string[] {
                            "Professional Type",
                            "Specialized Training",
                            "Professional Requirements",
                            "Competency Standards",
                            "Continuing Education",
                            "Professional Integration"});
                table2546.AddRow(new string[] {
                            "Speech-language pathologists",
                            "Advanced AAC expertise",
                            "Professional certification",
                            "Expert level",
                            "Annual updates",
                            "Full integration"});
                table2546.AddRow(new string[] {
                            "Occupational therapists",
                            "Access and positioning",
                            "Professional knowledge",
                            "Advanced level",
                            "Bi-annual updates",
                            "Access optimization"});
                table2546.AddRow(new string[] {
                            "Physical therapists",
                            "Motor aspects of AAC",
                            "Professional awareness",
                            "Intermediate level",
                            "Bi-annual updates",
                            "Motor integration"});
                table2546.AddRow(new string[] {
                            "Psychologists",
                            "Behavioral aspects",
                            "Professional understanding",
                            "Intermediate level",
                            "Annual updates",
                            "Behavioral support"});
                table2546.AddRow(new string[] {
                            "Social workers",
                            "Family and system support",
                            "Professional awareness",
                            "Basic-intermediate",
                            "Annual updates",
                            "System coordination"});
                table2546.AddRow(new string[] {
                            "Medical professionals",
                            "Healthcare communication",
                            "Medical awareness",
                            "Basic level",
                            "As-needed updates",
                            "Healthcare integration"});
#line 69
    testRunner.When("training professional partners:", ((string)(null)), table2546, "When ");
#line hidden
#line 77
    testRunner.Then("professional training should be discipline-specific", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
    testRunner.And("standards should be professionally appropriate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
    testRunner.And("continuing education should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.And("integration should be interdisciplinary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Train partners in effective AAC modeling techniques")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Train partners in effective AAC modeling techniques")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "modeling-techniques")]
        [Xunit.TraitAttribute("Category", "critical")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrainPartnersInEffectiveAACModelingTechniques()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "modeling-techniques",
                    "critical",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Train partners in effective AAC modeling techniques", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 85
    testRunner.Given("modeling is crucial for AAC learning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
    testRunner.And("effective modeling requires specific skills", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2547 = new TechTalk.SpecFlow.Table(new string[] {
                            "Modeling Technique",
                            "Training Components",
                            "Skill Development",
                            "Practice Requirements",
                            "Competency Indicators",
                            "Impact on Learning"});
                table2547.AddRow(new string[] {
                            "Aided language stimulation",
                            "Natural AAC use",
                            "Fluent AAC modeling",
                            "Daily practice",
                            "Consistent modeling",
                            "Accelerated learning"});
                table2547.AddRow(new string[] {
                            "Focused stimulation",
                            "Target vocabulary emphasis",
                            "Strategic highlighting",
                            "Structured practice",
                            "Targeted emphasis",
                            "Vocabulary growth"});
                table2547.AddRow(new string[] {
                            "Expansion modeling",
                            "Message expansion",
                            "Elaboration skills",
                            "Conversational practice",
                            "Appropriate expansion",
                            "Language development"});
                table2547.AddRow(new string[] {
                            "Expectant waiting",
                            "Communication opportunities",
                            "Patience and timing",
                            "Interaction practice",
                            "Optimal wait time",
                            "Increased initiation"});
                table2547.AddRow(new string[] {
                            "Recasting",
                            "Error correction",
                            "Gentle correction",
                            "Natural interaction",
                            "Supportive recasting",
                            "Improved accuracy"});
                table2547.AddRow(new string[] {
                            "Sabotage techniques",
                            "Communication temptations",
                            "Opportunity creation",
                            "Planned practice",
                            "Effective sabotage",
                            "Motivation increase"});
#line 87
    testRunner.When("training modeling techniques:", ((string)(null)), table2547, "When ");
#line hidden
#line 95
    testRunner.Then("modeling should be natural and effective", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
    testRunner.And("skills should be systematically developed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
    testRunner.And("practice should be structured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
    testRunner.And("impact should be measurable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Develop effective interaction and conversation strategies")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Develop effective interaction and conversation strategies")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "interaction-strategies")]
        [Xunit.TraitAttribute("Category", "high")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DevelopEffectiveInteractionAndConversationStrategies()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "interaction-strategies",
                    "high",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Develop effective interaction and conversation strategies", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 102
    testRunner.Given("conversations require special considerations with AAC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
    testRunner.And("interaction quality affects communication success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2548 = new TechTalk.SpecFlow.Table(new string[] {
                            "Strategy Type",
                            "Training Focus",
                            "Skill Components",
                            "Application Context",
                            "Mastery Criteria",
                            "Communication Benefits"});
                table2548.AddRow(new string[] {
                            "Turn-taking",
                            "Conversation flow",
                            "Timing and patience",
                            "Social conversations",
                            "Smooth turn exchanges",
                            "Natural conversation"});
                table2548.AddRow(new string[] {
                            "Topic maintenance",
                            "Conversation coherence",
                            "Topic awareness",
                            "Extended conversations",
                            "Sustained topics",
                            "Meaningful interaction"});
                table2548.AddRow(new string[] {
                            "Repair strategies",
                            "Communication breakdowns",
                            "Problem-solving",
                            "Challenging situations",
                            "Effective repairs",
                            "Successful resolution"});
                table2548.AddRow(new string[] {
                            "Question techniques",
                            "Information gathering",
                            "Question variety",
                            "Learning contexts",
                            "Appropriate questioning",
                            "Enhanced learning"});
                table2548.AddRow(new string[] {
                            "Story co-construction",
                            "Narrative building",
                            "Collaborative storytelling",
                            "Narrative contexts",
                            "Joint story creation",
                            "Rich narratives"});
                table2548.AddRow(new string[] {
                            "Conflict resolution",
                            "Problem-solving",
                            "Negotiation skills",
                            "Conflict situations",
                            "Peaceful resolution",
                            "Relationship maintenance"});
#line 104
    testRunner.When("developing interaction strategies:", ((string)(null)), table2548, "When ");
#line hidden
#line 112
    testRunner.Then("strategies should be natural", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
    testRunner.And("skills should be transferable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
    testRunner.And("application should be contextual", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.And("benefits should be significant", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Train partners in AAC troubleshooting and problem-solving")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Train partners in AAC troubleshooting and problem-solving")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "troubleshooting")]
        [Xunit.TraitAttribute("Category", "medium")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrainPartnersInAACTroubleshootingAndProblem_Solving()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "troubleshooting",
                    "medium",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Train partners in AAC troubleshooting and problem-solving", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 118
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 119
    testRunner.Given("technical and communication issues arise", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 120
    testRunner.And("partner problem-solving maintains communication flow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2549 = new TechTalk.SpecFlow.Table(new string[] {
                            "Problem Type",
                            "Troubleshooting Training",
                            "Solution Strategies",
                            "Emergency Procedures",
                            "Prevention Education",
                            "Partner Confidence"});
                table2549.AddRow(new string[] {
                            "Device malfunctions",
                            "Technical problem-solving",
                            "Basic tech support",
                            "Backup communication",
                            "Device maintenance",
                            "Increased confidence"});
                table2549.AddRow(new string[] {
                            "Communication breakdowns",
                            "Message repair",
                            "Clarification strategies",
                            "Alternative methods",
                            "Breakdown prevention",
                            "Communication confidence"});
                table2549.AddRow(new string[] {
                            "Motivation issues",
                            "Engagement strategies",
                            "Motivation techniques",
                            "Crisis communication",
                            "Motivation maintenance",
                            "Motivational confidence"});
                table2549.AddRow(new string[] {
                            "Access difficulties",
                            "Accessibility solutions",
                            "Position adjustments",
                            "Emergency positioning",
                            "Access optimization",
                            "Access confidence"});
                table2549.AddRow(new string[] {
                            "Symbol confusion",
                            "Symbol clarification",
                            "Symbol teaching",
                            "Visual supports",
                            "Symbol organization",
                            "Symbol confidence"});
                table2549.AddRow(new string[] {
                            "Environmental barriers",
                            "Environmental modification",
                            "Barrier removal",
                            "Adaptive strategies",
                            "Environmental planning",
                            "Environmental confidence"});
#line 121
    testRunner.When("training troubleshooting skills:", ((string)(null)), table2549, "When ");
#line hidden
#line 129
    testRunner.Then("troubleshooting should be systematic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
    testRunner.And("solutions should be practical", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
    testRunner.And("confidence should be built", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
    testRunner.And("prevention should be emphasized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Develop cultural competency in AAC partnership")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Develop cultural competency in AAC partnership")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "cultural-competency")]
        [Xunit.TraitAttribute("Category", "medium")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DevelopCulturalCompetencyInAACPartnership()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "cultural-competency",
                    "medium",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Develop cultural competency in AAC partnership", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 135
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 136
    testRunner.Given("cultural factors affect communication patterns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 137
    testRunner.And("culturally responsive practice is essential", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2550 = new TechTalk.SpecFlow.Table(new string[] {
                            "Cultural Aspect",
                            "Competency Training",
                            "Cultural Awareness",
                            "Adaptation Strategies",
                            "Respect Practices",
                            "Inclusive Approaches"});
                table2550.AddRow(new string[] {
                            "Communication styles",
                            "Cultural communication patterns",
                            "Direct vs. indirect styles",
                            "Style adaptation",
                            "Cultural respect",
                            "Style accommodation"});
                table2550.AddRow(new string[] {
                            "Family dynamics",
                            "Cultural family structures",
                            "Authority patterns",
                            "Family-centered approaches",
                            "Hierarchy respect",
                            "Family inclusion"});
                table2550.AddRow(new string[] {
                            "Language preferences",
                            "Bilingual considerations",
                            "Code-switching support",
                            "Language integration",
                            "Language respect",
                            "Multilingual support"});
                table2550.AddRow(new string[] {
                            "Religious considerations",
                            "Faith-based perspectives",
                            "Religious accommodation",
                            "Faith integration",
                            "Religious respect",
                            "Faith inclusion"});
                table2550.AddRow(new string[] {
                            "Socioeconomic factors",
                            "Economic considerations",
                            "Resource adaptation",
                            "Economic sensitivity",
                            "Economic respect",
                            "Accessible solutions"});
                table2550.AddRow(new string[] {
                            "Educational backgrounds",
                            "Literacy considerations",
                            "Education adaptation",
                            "Learning accommodation",
                            "Educational respect",
                            "Educational inclusion"});
#line 138
    testRunner.When("developing cultural competency:", ((string)(null)), table2550, "When ");
#line hidden
#line 146
    testRunner.Then("cultural competency should be comprehensive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
    testRunner.And("awareness should be deep", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
    testRunner.And("adaptation should be respectful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
    testRunner.And("inclusion should be genuine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Implement diverse training delivery methods")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Implement diverse training delivery methods")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "delivery-methods")]
        [Xunit.TraitAttribute("Category", "high")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ImplementDiverseTrainingDeliveryMethods()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "delivery-methods",
                    "high",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Implement diverse training delivery methods", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 153
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 154
    testRunner.Given("different partners have different learning preferences", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 155
    testRunner.And("delivery methods affect training effectiveness", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2551 = new TechTalk.SpecFlow.Table(new string[] {
                            "Delivery Method",
                            "Target Audience",
                            "Effectiveness Level",
                            "Resource Requirements",
                            "Accessibility Features",
                            "Scalability Potential"});
                table2551.AddRow(new string[] {
                            "In-person workshops",
                            "Local partners",
                            "High effectiveness",
                            "Trainer, materials, venue",
                            "Physical accessibility",
                            "Limited scalability"});
                table2551.AddRow(new string[] {
                            "Online courses",
                            "Remote partners",
                            "Moderate effectiveness",
                            "Platform, content",
                            "Digital accessibility",
                            "High scalability"});
                table2551.AddRow(new string[] {
                            "Video training",
                            "Visual learners",
                            "Good effectiveness",
                            "Video production",
                            "Captioning, transcripts",
                            "High scalability"});
                table2551.AddRow(new string[] {
                            "Hands-on practice",
                            "Practical learners",
                            "High effectiveness",
                            "Equipment, supervision",
                            "Physical adaptations",
                            "Moderate scalability"});
                table2551.AddRow(new string[] {
                            "Mentoring programs",
                            "Individual support",
                            "Very high effectiveness",
                            "Mentors, coordination",
                            "Individual adaptations",
                            "Limited scalability"});
                table2551.AddRow(new string[] {
                            "Peer learning",
                            "Collaborative learners",
                            "Good effectiveness",
                            "Facilitation, materials",
                            "Group accessibility",
                            "Moderate scalability"});
#line 156
    testRunner.When("implementing training delivery:", ((string)(null)), table2551, "When ");
#line hidden
#line 164
    testRunner.Then("delivery should match learning preferences", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 165
    testRunner.And("effectiveness should be optimized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 166
    testRunner.And("accessibility should be ensured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
    testRunner.And("scalability should be considered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Implement comprehensive competency assessment systems")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Implement comprehensive competency assessment systems")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "competency-assessment")]
        [Xunit.TraitAttribute("Category", "critical")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ImplementComprehensiveCompetencyAssessmentSystems()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "competency-assessment",
                    "critical",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Implement comprehensive competency assessment systems", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 170
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 171
    testRunner.Given("competency must be verified for effective support", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 172
    testRunner.And("assessment drives training decisions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2552 = new TechTalk.SpecFlow.Table(new string[] {
                            "Assessment Type",
                            "Assessment Method",
                            "Competency Standards",
                            "Assessment Frequency",
                            "Feedback Provision",
                            "Improvement Planning"});
                table2552.AddRow(new string[] {
                            "Initial assessment",
                            "Pre-training evaluation",
                            "Baseline competency",
                            "Before training",
                            "Immediate feedback",
                            "Training customization"});
                table2552.AddRow(new string[] {
                            "Progress assessment",
                            "Mid-training evaluation",
                            "Developing competency",
                            "During training",
                            "Ongoing feedback",
                            "Training adjustment"});
                table2552.AddRow(new string[] {
                            "Final assessment",
                            "Post-training evaluation",
                            "Target competency",
                            "After training",
                            "Comprehensive feedback",
                            "Certification decision"});
                table2552.AddRow(new string[] {
                            "Follow-up assessment",
                            "Ongoing evaluation",
                            "Maintained competency",
                            "Quarterly",
                            "Performance feedback",
                            "Refresher planning"});
                table2552.AddRow(new string[] {
                            "Practical assessment",
                            "Real-world observation",
                            "Applied competency",
                            "Monthly",
                            "Observational feedback",
                            "Skills reinforcement"});
                table2552.AddRow(new string[] {
                            "Self-assessment",
                            "Partner self-evaluation",
                            "Self-awareness",
                            "Weekly",
                            "Self-reflection",
                            "Self-improvement"});
#line 173
    testRunner.When("implementing competency assessment:", ((string)(null)), table2552, "When ");
#line hidden
#line 181
    testRunner.Then("assessment should be comprehensive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 182
    testRunner.And("standards should be clear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
    testRunner.And("feedback should be constructive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 184
    testRunner.And("improvement should be supported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Develop AAC partner certification programs")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Develop AAC partner certification programs")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "certification")]
        [Xunit.TraitAttribute("Category", "medium")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DevelopAACPartnerCertificationPrograms()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "certification",
                    "medium",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Develop AAC partner certification programs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 187
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 188
    testRunner.Given("certification validates competency", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 189
    testRunner.And("recognition motivates participation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2553 = new TechTalk.SpecFlow.Table(new string[] {
                            "Certification Level",
                            "Requirements",
                            "Training Hours",
                            "Competency Demonstration",
                            "Maintenance Requirements",
                            "Recognition Benefits"});
                table2553.AddRow(new string[] {
                            "Basic awareness",
                            "Awareness training",
                            "2-4 hours",
                            "Knowledge test",
                            "Annual refresher",
                            "Awareness certificate"});
                table2553.AddRow(new string[] {
                            "Support competency",
                            "Support training",
                            "8-12 hours",
                            "Skills demonstration",
                            "Bi-annual update",
                            "Support certificate"});
                table2553.AddRow(new string[] {
                            "Advanced partnership",
                            "Advanced training",
                            "20-30 hours",
                            "Comprehensive assessment",
                            "Annual recertification",
                            "Advanced certificate"});
                table2553.AddRow(new string[] {
                            "Trainer certification",
                            "Training preparation",
                            "40-60 hours",
                            "Training demonstration",
                            "Ongoing professional development",
                            "Trainer credentials"});
                table2553.AddRow(new string[] {
                            "Expert partnership",
                            "Expert development",
                            "60+ hours",
                            "Expert assessment",
                            "Continuous education",
                            "Expert recognition"});
                table2553.AddRow(new string[] {
                            "Professional certification",
                            "Professional standards",
                            "Variable",
                            "Professional evaluation",
                            "Professional requirements",
                            "Professional credentials"});
#line 190
    testRunner.When("developing certification programs:", ((string)(null)), table2553, "When ");
#line hidden
#line 198
    testRunner.Then("certification should recognize competency", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 199
    testRunner.And("requirements should be appropriate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
    testRunner.And("maintenance should ensure currency", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
    testRunner.And("benefits should motivate participation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Provide comprehensive ongoing support systems")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Provide comprehensive ongoing support systems")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "ongoing-support")]
        [Xunit.TraitAttribute("Category", "critical")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ProvideComprehensiveOngoingSupportSystems()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "ongoing-support",
                    "critical",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Provide comprehensive ongoing support systems", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 205
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 206
    testRunner.Given("training requires follow-up support", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 207
    testRunner.And("ongoing support maintains competency", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2554 = new TechTalk.SpecFlow.Table(new string[] {
                            "Support Type",
                            "Support Frequency",
                            "Support Method",
                            "Target Audience",
                            "Support Goals",
                            "Success Indicators"});
                table2554.AddRow(new string[] {
                            "Consultation",
                            "Weekly initially, monthly ongoing",
                            "Individual meetings",
                            "All partners",
                            "Problem-solving",
                            "Issue resolution"});
                table2554.AddRow(new string[] {
                            "Group support",
                            "Monthly meetings",
                            "Group sessions",
                            "Partner groups",
                            "Peer learning",
                            "Shared knowledge"});
                table2554.AddRow(new string[] {
                            "Resource updates",
                            "As needed",
                            "Digital distribution",
                            "All partners",
                            "Current information",
                            "Updated practices"});
                table2554.AddRow(new string[] {
                            "Refresher training",
                            "Quarterly sessions",
                            "Skill practice",
                            "All partners",
                            "Skill maintenance",
                            "Maintained competency"});
                table2554.AddRow(new string[] {
                            "Troubleshooting",
                            "As needed",
                            "On-demand help",
                            "All partners",
                            "Immediate assistance",
                            "Quick resolution"});
                table2554.AddRow(new string[] {
                            "Advanced training",
                            "Annual opportunities",
                            "Specialized sessions",
                            "Advanced partners",
                            "Skill enhancement",
                            "Enhanced abilities"});
#line 208
    testRunner.When("providing ongoing support:", ((string)(null)), table2554, "When ");
#line hidden
#line 216
    testRunner.Then("support should be comprehensive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 217
    testRunner.And("frequency should meet needs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
    testRunner.And("methods should be effective", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
    testRunner.And("goals should be achieved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Implement comprehensive training evaluation and feedback systems")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Implement comprehensive training evaluation and feedback systems")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "evaluation-feedback")]
        [Xunit.TraitAttribute("Category", "high")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ImplementComprehensiveTrainingEvaluationAndFeedbackSystems()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "evaluation-feedback",
                    "high",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Implement comprehensive training evaluation and feedback systems", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 222
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 223
    testRunner.Given("training effectiveness must be measured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 224
    testRunner.And("feedback drives program improvement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2555 = new TechTalk.SpecFlow.Table(new string[] {
                            "Evaluation Component",
                            "Measurement Method",
                            "Data Collection",
                            "Analysis Approach",
                            "Feedback Recipients",
                            "Improvement Actions"});
                table2555.AddRow(new string[] {
                            "Partner satisfaction",
                            "Satisfaction surveys",
                            "Post-training surveys",
                            "Statistical analysis",
                            "Training team",
                            "Program modification"});
                table2555.AddRow(new string[] {
                            "Competency achievement",
                            "Skills assessment",
                            "Performance testing",
                            "Competency analysis",
                            "Partners and supervisors",
                            "Individual support"});
                table2555.AddRow(new string[] {
                            "Training effectiveness",
                            "Outcome measurement",
                            "Pre/post comparison",
                            "Effect size calculation",
                            "Program administrators",
                            "Program enhancement"});
                table2555.AddRow(new string[] {
                            "Long-term impact",
                            "Follow-up evaluation",
                            "Longitudinal tracking",
                            "Trend analysis",
                            "Stakeholders",
                            "Strategic planning"});
                table2555.AddRow(new string[] {
                            "Cost-effectiveness",
                            "Cost-benefit analysis",
                            "Financial tracking",
                            "Economic analysis",
                            "Administrators",
                            "Resource allocation"});
                table2555.AddRow(new string[] {
                            "Quality indicators",
                            "Quality metrics",
                            "Systematic monitoring",
                            "Quality analysis",
                            "Quality team",
                            "Quality improvement"});
#line 225
    testRunner.When("implementing evaluation systems:", ((string)(null)), table2555, "When ");
#line hidden
#line 233
    testRunner.Then("evaluation should be systematic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 234
    testRunner.And("measurement should be comprehensive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 235
    testRunner.And("analysis should be rigorous", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
    testRunner.And("improvement should be continuous", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Train partners for crisis and emergency communication")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Train partners for crisis and emergency communication")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "crisis-communication")]
        [Xunit.TraitAttribute("Category", "medium")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrainPartnersForCrisisAndEmergencyCommunication()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "crisis-communication",
                    "medium",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Train partners for crisis and emergency communication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 240
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 241
    testRunner.Given("emergencies require special communication considerations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 242
    testRunner.And("crisis preparation prevents communication breakdown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2556 = new TechTalk.SpecFlow.Table(new string[] {
                            "Crisis Type",
                            "Communication Challenges",
                            "Training Preparation",
                            "Emergency Procedures",
                            "Partner Roles",
                            "Success Measures"});
                table2556.AddRow(new string[] {
                            "Medical emergency",
                            "Rapid communication needs",
                            "Medical vocabulary",
                            "Emergency communication board",
                            "Rapid communication",
                            "Fast, accurate communication"});
                table2556.AddRow(new string[] {
                            "Safety emergency",
                            "Critical safety messages",
                            "Safety vocabulary",
                            "Safety communication protocols",
                            "Safety communication",
                            "Immediate safety response"});
                table2556.AddRow(new string[] {
                            "Behavioral crisis",
                            "De-escalation communication",
                            "Calming strategies",
                            "Crisis communication plans",
                            "Calming presence",
                            "Successful de-escalation"});
                table2556.AddRow(new string[] {
                            "Device failure",
                            "Communication backup",
                            "Backup systems",
                            "Alternative communication",
                            "Backup implementation",
                            "Continued communication"});
                table2556.AddRow(new string[] {
                            "Environmental crisis",
                            "Adapted communication",
                            "Environmental adaptation",
                            "Crisis adaptation",
                            "Environmental adjustment",
                            "Effective adaptation"});
                table2556.AddRow(new string[] {
                            "Social crisis",
                            "Support communication",
                            "Support strategies",
                            "Social support protocols",
                            "Emotional support",
                            "Social stability"});
#line 243
    testRunner.When("training crisis communication:", ((string)(null)), table2556, "When ");
#line hidden
#line 251
    testRunner.Then("crisis training should be thorough", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 252
    testRunner.And("preparation should be comprehensive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 253
    testRunner.And("procedures should be clear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
    testRunner.And("success should be measurable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Train partners in AAC technology integration and support")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Train partners in AAC technology integration and support")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "technology-integration")]
        [Xunit.TraitAttribute("Category", "medium")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrainPartnersInAACTechnologyIntegrationAndSupport()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "technology-integration",
                    "medium",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Train partners in AAC technology integration and support", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 257
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 258
    testRunner.Given("technology is integral to modern AAC", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 259
    testRunner.And("partner tech competence affects AAC success", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2557 = new TechTalk.SpecFlow.Table(new string[] {
                            "Technology Aspect",
                            "Training Components",
                            "Competency Development",
                            "Support Capabilities",
                            "Troubleshooting Skills",
                            "Innovation Adoption"});
                table2557.AddRow(new string[] {
                            "Device operation",
                            "Basic to advanced functions",
                            "Operational fluency",
                            "User support",
                            "Problem resolution",
                            "Feature utilization"});
                table2557.AddRow(new string[] {
                            "Software navigation",
                            "App functionality",
                            "Navigation skills",
                            "Software assistance",
                            "Software troubleshooting",
                            "Software optimization"});
                table2557.AddRow(new string[] {
                            "Connectivity management",
                            "Network and sync",
                            "Connection skills",
                            "Connectivity support",
                            "Connection troubleshooting",
                            "Network optimization"});
                table2557.AddRow(new string[] {
                            "Data management",
                            "Backup and security",
                            "Data skills",
                            "Data protection",
                            "Data recovery",
                            "Data optimization"});
                table2557.AddRow(new string[] {
                            "Update management",
                            "Software updates",
                            "Update skills",
                            "Update assistance",
                            "Update troubleshooting",
                            "Version management"});
                table2557.AddRow(new string[] {
                            "Integration support",
                            "Cross-platform use",
                            "Integration skills",
                            "Platform assistance",
                            "Integration troubleshooting",
                            "Platform optimization"});
#line 260
    testRunner.When("training technology integration:", ((string)(null)), table2557, "When ");
#line hidden
#line 268
    testRunner.Then("technology training should be comprehensive", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 269
    testRunner.And("competency should be practical", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 270
    testRunner.And("support should be effective", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 271
    testRunner.And("innovation should be embraced", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Monitor and maintain training program quality")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Monitor and maintain training program quality")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "quality-monitoring")]
        [Xunit.TraitAttribute("Category", "critical")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MonitorAndMaintainTrainingProgramQuality()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "quality-monitoring",
                    "critical",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Monitor and maintain training program quality", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 275
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 276
    testRunner.Given("quality training is essential for partner competence", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 277
    testRunner.And("quality monitoring ensures program effectiveness", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2558 = new TechTalk.SpecFlow.Table(new string[] {
                            "Quality Aspect",
                            "Monitoring Method",
                            "Quality Standards",
                            "Assessment Frequency",
                            "Quality Indicators",
                            "Improvement Actions"});
                table2558.AddRow(new string[] {
                            "Content accuracy",
                            "Expert review",
                            "Evidence-based content",
                            "Annual review",
                            "Content validity",
                            "Content updates"});
                table2558.AddRow(new string[] {
                            "Training effectiveness",
                            "Outcome measurement",
                            "Competency achievement",
                            "Quarterly assessment",
                            "Learning outcomes",
                            "Training enhancement"});
                table2558.AddRow(new string[] {
                            "Trainer competency",
                            "Trainer evaluation",
                            "Training standards",
                            "Bi-annual review",
                            "Trainer performance",
                            "Trainer development"});
                table2558.AddRow(new string[] {
                            "Material quality",
                            "Material assessment",
                            "Professional standards",
                            "Annual review",
                            "Material effectiveness",
                            "Material improvement"});
                table2558.AddRow(new string[] {
                            "Accessibility compliance",
                            "Accessibility audit",
                            "Universal design",
                            "Annual audit",
                            "Accessibility metrics",
                            "Accessibility enhancement"});
                table2558.AddRow(new string[] {
                            "Cultural responsiveness",
                            "Cultural evaluation",
                            "Cultural competency",
                            "Annual assessment",
                            "Cultural indicators",
                            "Cultural improvement"});
#line 278
    testRunner.When("monitoring training quality:", ((string)(null)), table2558, "When ");
#line hidden
#line 286
    testRunner.Then("quality should be systematically monitored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 287
    testRunner.And("standards should be evidence-based", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
    testRunner.And("improvement should be continuous", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
    testRunner.And("excellence should be pursued", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ensure sustainable partner training programs")]
        [Xunit.TraitAttribute("FeatureTitle", "AAC Communication Partner Training")]
        [Xunit.TraitAttribute("Description", "Ensure sustainable partner training programs")]
        [Xunit.TraitAttribute("Category", "specialized")]
        [Xunit.TraitAttribute("Category", "aac")]
        [Xunit.TraitAttribute("Category", "partner-training")]
        [Xunit.TraitAttribute("Category", "sustainability")]
        [Xunit.TraitAttribute("Category", "high")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnsureSustainablePartnerTrainingPrograms()
        {
            string[] tagsOfScenario = new string[] {
                    "specialized",
                    "aac",
                    "partner-training",
                    "sustainability",
                    "high",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure sustainable partner training programs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 292
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 293
    testRunner.Given("training programs require long-term sustainability", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2559 = new TechTalk.SpecFlow.Table(new string[] {
                            "Sustainability Factor",
                            "Current Challenge",
                            "Sustainability Strategy",
                            "Resource Requirements",
                            "Success Indicators",
                            "Long-term Viability"});
                table2559.AddRow(new string[] {
                            "Trainer development",
                            "Limited qualified trainers",
                            "Trainer pipeline development",
                            "Trainer resources",
                            "Adequate trainers",
                            "Trainer sustainability"});
                table2559.AddRow(new string[] {
                            "Resource management",
                            "Resource limitations",
                            "Efficient resource use",
                            "Optimized resources",
                            "Resource adequacy",
                            "Resource sustainability"});
                table2559.AddRow(new string[] {
                            "Technology currency",
                            "Rapid technology change",
                            "Technology update systems",
                            "Technology resources",
                            "Current technology",
                            "Technology sustainability"});
                table2559.AddRow(new string[] {
                            "Quality maintenance",
                            "Variable quality",
                            "Quality assurance systems",
                            "Quality resources",
                            "Consistent quality",
                            "Quality sustainability"});
                table2559.AddRow(new string[] {
                            "Cost effectiveness",
                            "High program costs",
                            "Cost optimization",
                            "Financial resources",
                            "Reasonable costs",
                            "Financial sustainability"});
                table2559.AddRow(new string[] {
                            "Impact measurement",
                            "Limited outcome data",
                            "Comprehensive evaluation",
                            "Evaluation resources",
                            "Demonstrated impact",
                            "Evidence sustainability"});
#line 294
    testRunner.When("planning sustainability:", ((string)(null)), table2559, "When ");
#line hidden
#line 302
    testRunner.Then("sustainability should be systematically planned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 303
    testRunner.And("challenges should be proactively addressed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 304
    testRunner.And("resources should be optimized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 305
    testRunner.And("long-term success should be ensured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AACCommunicationPartnerTrainingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AACCommunicationPartnerTrainingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
