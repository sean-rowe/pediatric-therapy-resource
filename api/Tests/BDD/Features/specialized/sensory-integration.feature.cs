// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Specialized
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SensoryIntegrationResourcesAPIEndpointsFR_017FR_040Feature : object, Xunit.IClassFixture<SensoryIntegrationResourcesAPIEndpointsFR_017FR_040Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "sensory-integration.feature"
#line hidden
        
        public SensoryIntegrationResourcesAPIEndpointsFR_017FR_040Feature(SensoryIntegrationResourcesAPIEndpointsFR_017FR_040Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/specialized", "Sensory Integration Resources API Endpoints (FR-017, FR-040)", "  As a therapy professional\n  I want comprehensive sensory integration resources\n" +
                    "  So that I can address sensory processing needs effectively", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get sensory assessment tools")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Integration Resources API Endpoints (FR-017, FR-040)")]
        [Xunit.TraitAttribute("Description", "Get sensory assessment tools")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "sensory")]
        [Xunit.TraitAttribute("Category", "assessment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetSensoryAssessmentTools()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "sensory",
                    "assessment",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get sensory assessment tools", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/sensory/assessments\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2909 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2909.AddRow(new string[] {
                            "assessmentId",
                            "string"});
                table2909.AddRow(new string[] {
                            "name",
                            "string"});
                table2909.AddRow(new string[] {
                            "ageRange",
                            "object"});
                table2909.AddRow(new string[] {
                            "sensoryDomains",
                            "array"});
                table2909.AddRow(new string[] {
                            "administrationTime",
                            "number"});
                table2909.AddRow(new string[] {
                            "parentQuestionnaire",
                            "boolean"});
#line 15
    testRunner.And("the therapy response should contain array of:", ((string)(null)), table2909, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create sensory profile")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Integration Resources API Endpoints (FR-017, FR-040)")]
        [Xunit.TraitAttribute("Description", "Create sensory profile")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "sensory")]
        [Xunit.TraitAttribute("Category", "profile")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateSensoryProfile()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "sensory",
                    "profile",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create sensory profile", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2910 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2910.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2910.AddRow(new string[] {
                            "assessmentData",
                            "{\"tactile\": \"over-responsive\", \"vestibular\": \"under-responsive\"}"});
                table2910.AddRow(new string[] {
                            "behavioralIndicators",
                            "[\"avoids-textures\", \"seeks-movement\"]"});
                table2910.AddRow(new string[] {
                            "functionalImpact",
                            "[\"difficulty-with-dressing\", \"poor-attention\"]"});
                table2910.AddRow(new string[] {
                            "environmentalFactors",
                            "[\"fluorescent-lights\", \"classroom-noise\"]"});
#line 27
    testRunner.When("I send a POST request to \"/api/sensory/profile\" with:", ((string)(null)), table2910, "When ");
#line hidden
#line 34
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
    testRunner.And("sensory profile should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
    testRunner.And("recommendations should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Build individualized sensory diet")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Integration Resources API Endpoints (FR-017, FR-040)")]
        [Xunit.TraitAttribute("Description", "Build individualized sensory diet")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "sensory")]
        [Xunit.TraitAttribute("Category", "diet")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BuildIndividualizedSensoryDiet()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "sensory",
                    "diet",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Build individualized sensory diet", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2911 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2911.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2911.AddRow(new string[] {
                            "sensoryNeeds",
                            "{\"proprioceptive\": \"high\", \"vestibular\": \"moderate\"}"});
                table2911.AddRow(new string[] {
                            "settingType",
                            "classroom"});
                table2911.AddRow(new string[] {
                            "duration",
                            "full-school-day"});
                table2911.AddRow(new string[] {
                            "equipmentAvailable",
                            "[\"therapy-ball\", \"weighted-lap-pad\"]"});
                table2911.AddRow(new string[] {
                            "breakFrequency",
                            "every-hour"});
#line 41
    testRunner.When("I send a POST request to \"/api/sensory/diet-builder\" with:", ((string)(null)), table2911, "When ");
#line hidden
#line 49
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2912 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2912.AddRow(new string[] {
                            "morningActivities",
                            "array"});
                table2912.AddRow(new string[] {
                            "middayActivities",
                            "array"});
                table2912.AddRow(new string[] {
                            "afternoonActivities",
                            "array"});
                table2912.AddRow(new string[] {
                            "transitionSupports",
                            "array"});
                table2912.AddRow(new string[] {
                            "visualSchedule",
                            "string"});
                table2912.AddRow(new string[] {
                            "parentVersion",
                            "string"});
#line 50
    testRunner.And("the response should contain:", ((string)(null)), table2912, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get proprioceptive activities")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Integration Resources API Endpoints (FR-017, FR-040)")]
        [Xunit.TraitAttribute("Description", "Get proprioceptive activities")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "sensory")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetProprioceptiveActivities()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "sensory",
                    "activities",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get proprioceptive activities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 62
    testRunner.When("I send a GET request to \"/api/sensory/activities/proprioceptive?intensity=heavy-w" +
                        "ork\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2913 = new TechTalk.SpecFlow.Table(new string[] {
                            "activity",
                            "equipment",
                            "duration"});
                table2913.AddRow(new string[] {
                            "wall-pushups",
                            "none",
                            "2-3-min"});
                table2913.AddRow(new string[] {
                            "chair-pushups",
                            "classroom-chair",
                            "1-2-min"});
                table2913.AddRow(new string[] {
                            "carrying-books",
                            "heavy-books",
                            "5-min"});
                table2913.AddRow(new string[] {
                            "theraband-pulls",
                            "theraband",
                            "3-min"});
#line 64
    testRunner.And("activities should include:", ((string)(null)), table2913, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get movement break activities")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Integration Resources API Endpoints (FR-017, FR-040)")]
        [Xunit.TraitAttribute("Description", "Get movement break activities")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "sensory")]
        [Xunit.TraitAttribute("Category", "movement")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetMovementBreakActivities()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "sensory",
                    "movement",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get movement break activities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 73
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 74
    testRunner.When("I send a GET request to \"/api/sensory/movement-breaks?setting=classroom&duration=" +
                        "5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
    testRunner.And("activities should be classroom-appropriate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
    testRunner.And("include video demonstrations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Design sensory room/space")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Integration Resources API Endpoints (FR-017, FR-040)")]
        [Xunit.TraitAttribute("Description", "Design sensory room/space")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "sensory")]
        [Xunit.TraitAttribute("Category", "environment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DesignSensoryRoomSpace()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "sensory",
                    "environment",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Design sensory room/space", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2914 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2914.AddRow(new string[] {
                            "spaceType",
                            "corner-of-classroom"});
                table2914.AddRow(new string[] {
                            "dimensions",
                            "{\"width\": 6, \"length\": 6}"});
                table2914.AddRow(new string[] {
                            "budget",
                            "500"});
                table2914.AddRow(new string[] {
                            "primaryNeeds",
                            "[\"calming\", \"organizing\"]"});
                table2914.AddRow(new string[] {
                            "studentAges",
                            "[5, 6, 7]"});
#line 82
    testRunner.When("I send a POST request to \"/api/sensory/room-design\" with:", ((string)(null)), table2914, "When ");
#line hidden
#line 89
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2915 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2915.AddRow(new string[] {
                            "layoutDiagram",
                            "string"});
                table2915.AddRow(new string[] {
                            "equipmentList",
                            "array"});
                table2915.AddRow(new string[] {
                            "safetyChecklist",
                            "array"});
                table2915.AddRow(new string[] {
                            "visualGuide",
                            "string"});
                table2915.AddRow(new string[] {
                            "shoppingList",
                            "array"});
                table2915.AddRow(new string[] {
                            "totalCost",
                            "number"});
#line 90
    testRunner.And("the response should contain:", ((string)(null)), table2915, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access Alert Program resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Integration Resources API Endpoints (FR-017, FR-040)")]
        [Xunit.TraitAttribute("Description", "Access Alert Program resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "sensory")]
        [Xunit.TraitAttribute("Category", "self-regulation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessAlertProgramResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "sensory",
                    "self-regulation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access Alert Program resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 102
    testRunner.When("I send a GET request to \"/api/sensory/alert-program?level=elementary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2916 = new TechTalk.SpecFlow.Table(new string[] {
                            "resource",
                            "format"});
                table2916.AddRow(new string[] {
                            "engine-speeds",
                            "visual-cards"});
                table2916.AddRow(new string[] {
                            "body-check-in",
                            "worksheet"});
                table2916.AddRow(new string[] {
                            "strategy-cards",
                            "printable"});
                table2916.AddRow(new string[] {
                            "parent-guide",
                            "pdf"});
#line 104
    testRunner.And("resources should include:", ((string)(null)), table2916, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track sensory responses")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Integration Resources API Endpoints (FR-017, FR-040)")]
        [Xunit.TraitAttribute("Description", "Track sensory responses")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "sensory")]
        [Xunit.TraitAttribute("Category", "tracking")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackSensoryResponses()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "sensory",
                    "tracking",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track sensory responses", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2917 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2917.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2917.AddRow(new string[] {
                            "dateTime",
                            "2024-01-22T10:30:00Z"});
                table2917.AddRow(new string[] {
                            "triggerEvent",
                            "fire-drill"});
                table2917.AddRow(new string[] {
                            "sensoryResponse",
                            "covered-ears-and-cried"});
                table2917.AddRow(new string[] {
                            "duration",
                            "15-minutes"});
                table2917.AddRow(new string[] {
                            "recoveryStrategy",
                            "deep-pressure-vest"});
                table2917.AddRow(new string[] {
                            "recoveryTime",
                            "10-minutes"});
#line 114
    testRunner.When("I send a POST request to \"/api/sensory/data-collection\" with:", ((string)(null)), table2917, "When ");
#line hidden
#line 123
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
    testRunner.And("pattern analysis should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
    testRunner.And("trigger identification should improve", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Browse sensory equipment catalog")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Integration Resources API Endpoints (FR-017, FR-040)")]
        [Xunit.TraitAttribute("Description", "Browse sensory equipment catalog")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "sensory")]
        [Xunit.TraitAttribute("Category", "equipment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BrowseSensoryEquipmentCatalog()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "sensory",
                    "equipment",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Browse sensory equipment catalog", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 130
    testRunner.When("I send a GET request to \"/api/sensory/equipment-catalog?category=oral-motor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2918 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "price",
                            "purpose"});
                table2918.AddRow(new string[] {
                            "chewy-tubes",
                            "15.99",
                            "oral-input"});
                table2918.AddRow(new string[] {
                            "vibrating-tools",
                            "24.99",
                            "oral-stimulation"});
                table2918.AddRow(new string[] {
                            "textured-strips",
                            "12.99",
                            "tactile-input"});
#line 132
    testRunner.And("catalog should include:", ((string)(null)), table2918, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create sensory home program")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Integration Resources API Endpoints (FR-017, FR-040)")]
        [Xunit.TraitAttribute("Description", "Create sensory home program")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "sensory")]
        [Xunit.TraitAttribute("Category", "home")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateSensoryHomeProgram()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "sensory",
                    "home",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create sensory home program", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 140
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2919 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2919.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2919.AddRow(new string[] {
                            "homeEnvironment",
                            "apartment"});
                table2919.AddRow(new string[] {
                            "familySchedule",
                            "both-parents-work"});
                table2919.AddRow(new string[] {
                            "equipment",
                            "[\"yoga-ball\", \"weighted-blanket\"]"});
                table2919.AddRow(new string[] {
                            "duration",
                            "4-weeks"});
#line 141
    testRunner.When("I send a POST request to \"/api/sensory/home-program\" with:", ((string)(null)), table2919, "When ");
#line hidden
#line 148
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2920 = new TechTalk.SpecFlow.Table(new string[] {
                            "component",
                            "details"});
                table2920.AddRow(new string[] {
                            "morning-routine",
                            "10-minute activities"});
                table2920.AddRow(new string[] {
                            "after-school",
                            "15-minute activities"});
                table2920.AddRow(new string[] {
                            "bedtime-routine",
                            "calming strategies"});
                table2920.AddRow(new string[] {
                            "weekend-activities",
                            "longer sensory experiences"});
#line 149
    testRunner.And("home program should include:", ((string)(null)), table2920, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SensoryIntegrationResourcesAPIEndpointsFR_017FR_040Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SensoryIntegrationResourcesAPIEndpointsFR_017FR_040Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
