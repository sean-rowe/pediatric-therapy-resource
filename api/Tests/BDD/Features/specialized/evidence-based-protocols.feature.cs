// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Specialized
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Evidence_BasedProtocolLibrariesAPIEndpointsFR_023FR_038Feature : object, Xunit.IClassFixture<Evidence_BasedProtocolLibrariesAPIEndpointsFR_023FR_038Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "evidence-based-protocols.feature"
#line hidden
        
        public Evidence_BasedProtocolLibrariesAPIEndpointsFR_023FR_038Feature(Evidence_BasedProtocolLibrariesAPIEndpointsFR_023FR_038Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/specialized", "Evidence-Based Protocol Libraries API Endpoints (FR-023, FR-038)", "  As a therapy professional\n  I want access to evidence-based therapy protocols\n " +
                    " So that I can implement proven interventions with fidelity", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List available therapy protocols")]
        [Xunit.TraitAttribute("FeatureTitle", "Evidence-Based Protocol Libraries API Endpoints (FR-023, FR-038)")]
        [Xunit.TraitAttribute("Description", "List available therapy protocols")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "protocols")]
        [Xunit.TraitAttribute("Category", "catalog")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ListAvailableTherapyProtocols()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "protocols",
                    "catalog",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List available therapy protocols", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/protocols?approach=PROMPT&certification=required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2731 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2731.AddRow(new string[] {
                            "protocolId",
                            "string"});
                table2731.AddRow(new string[] {
                            "name",
                            "string"});
                table2731.AddRow(new string[] {
                            "approach",
                            "string"});
                table2731.AddRow(new string[] {
                            "evidenceLevel",
                            "string"});
                table2731.AddRow(new string[] {
                            "certificationReq",
                            "boolean"});
                table2731.AddRow(new string[] {
                            "targetPopulation",
                            "array"});
                table2731.AddRow(new string[] {
                            "outcomes",
                            "array"});
#line 15
    testRunner.And("the therapy response should contain array of:", ((string)(null)), table2731, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get PROMPT protocol details")]
        [Xunit.TraitAttribute("FeatureTitle", "Evidence-Based Protocol Libraries API Endpoints (FR-023, FR-038)")]
        [Xunit.TraitAttribute("Description", "Get PROMPT protocol details")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "protocols")]
        [Xunit.TraitAttribute("Category", "details")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetPROMPTProtocolDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "protocols",
                    "details",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get PROMPT protocol details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 28
    testRunner.Given("protocol \"prompt-level-1\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
    testRunner.When("I send a GET request to \"/api/protocols/prompt-level-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 30
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2732 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2732.AddRow(new string[] {
                            "protocolSteps",
                            "array"});
                table2732.AddRow(new string[] {
                            "cuingHierarchy",
                            "object"});
                table2732.AddRow(new string[] {
                            "targetSelection",
                            "object"});
                table2732.AddRow(new string[] {
                            "dataCollection",
                            "object"});
                table2732.AddRow(new string[] {
                            "fidelityChecklist",
                            "array"});
                table2732.AddRow(new string[] {
                            "videoExamples",
                            "array"});
#line 31
    testRunner.And("the response should contain:", ((string)(null)), table2732, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Start protocol implementation")]
        [Xunit.TraitAttribute("FeatureTitle", "Evidence-Based Protocol Libraries API Endpoints (FR-023, FR-038)")]
        [Xunit.TraitAttribute("Description", "Start protocol implementation")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "protocols")]
        [Xunit.TraitAttribute("Category", "implementation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void StartProtocolImplementation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "protocols",
                    "implementation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start protocol implementation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2733 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2733.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2733.AddRow(new string[] {
                            "targetSounds",
                            "[\"p\", \"b\", \"m\"]"});
                table2733.AddRow(new string[] {
                            "frequency",
                            "3x-weekly"});
                table2733.AddRow(new string[] {
                            "settingType",
                            "individual"});
#line 43
    testRunner.When("I send a POST request to \"/api/protocols/prompt-level-1/implement\" with:", ((string)(null)), table2733, "When ");
#line hidden
#line 49
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
    testRunner.And("implementation plan should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
    testRunner.And("fidelity tracking should be enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get DIR/Floortime activities")]
        [Xunit.TraitAttribute("FeatureTitle", "Evidence-Based Protocol Libraries API Endpoints (FR-023, FR-038)")]
        [Xunit.TraitAttribute("Description", "Get DIR/Floortime activities")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "protocols")]
        [Xunit.TraitAttribute("Category", "dir")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetDIRFloortimeActivities()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "protocols",
                    "dir",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get DIR/Floortime activities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 56
    testRunner.When("I send a GET request to \"/api/protocols/dir-floortime/activities?functionalLevel=" +
                        "3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
    testRunner.And("activities should be appropriate for functional level", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
    testRunner.And("include parent coaching materials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access Hanen parent program")]
        [Xunit.TraitAttribute("FeatureTitle", "Evidence-Based Protocol Libraries API Endpoints (FR-023, FR-038)")]
        [Xunit.TraitAttribute("Description", "Access Hanen parent program")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "protocols")]
        [Xunit.TraitAttribute("Category", "hanen")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessHanenParentProgram()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "protocols",
                    "hanen",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access Hanen parent program", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2734 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2734.AddRow(new string[] {
                            "programType",
                            "it-takes-two"});
                table2734.AddRow(new string[] {
                            "familyId",
                            "family-123"});
                table2734.AddRow(new string[] {
                            "language",
                            "es"});
#line 64
    testRunner.When("I send a POST request to \"/api/protocols/hanen/parent-training\" with:", ((string)(null)), table2734, "When ");
#line hidden
#line 69
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
    testRunner.And("parent materials should be provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    testRunner.And("training modules should be accessible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get Social Thinking curriculum")]
        [Xunit.TraitAttribute("FeatureTitle", "Evidence-Based Protocol Libraries API Endpoints (FR-023, FR-038)")]
        [Xunit.TraitAttribute("Description", "Get Social Thinking curriculum")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "protocols")]
        [Xunit.TraitAttribute("Category", "social-thinking")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetSocialThinkingCurriculum()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "protocols",
                    "social-thinking",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Social Thinking curriculum", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 76
    testRunner.When("I send a GET request to \"/api/protocols/social-thinking/curriculum?ageGroup=eleme" +
                        "ntary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2735 = new TechTalk.SpecFlow.Table(new string[] {
                            "component"});
                table2735.AddRow(new string[] {
                            "vocabulary-lessons"});
                table2735.AddRow(new string[] {
                            "thinking-sheets"});
                table2735.AddRow(new string[] {
                            "video-examples"});
                table2735.AddRow(new string[] {
                            "generalization"});
#line 78
    testRunner.And("curriculum should include:", ((string)(null)), table2735, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Set up Zones of Regulation")]
        [Xunit.TraitAttribute("FeatureTitle", "Evidence-Based Protocol Libraries API Endpoints (FR-023, FR-038)")]
        [Xunit.TraitAttribute("Description", "Set up Zones of Regulation")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "protocols")]
        [Xunit.TraitAttribute("Category", "zones")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SetUpZonesOfRegulation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "protocols",
                    "zones",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set up Zones of Regulation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 87
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2736 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2736.AddRow(new string[] {
                            "classroomId",
                            "classroom-456"});
                table2736.AddRow(new string[] {
                            "studentIds",
                            "[\"student-123\", \"student-456\"]"});
                table2736.AddRow(new string[] {
                            "customization",
                            "{\"colors\": \"standard\"}"});
#line 88
    testRunner.When("I send a POST request to \"/api/protocols/zones-of-regulation/setup\" with:", ((string)(null)), table2736, "When ");
#line hidden
#line 93
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
    testRunner.And("visual materials should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
    testRunner.And("tracking tools should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access HWT curriculum")]
        [Xunit.TraitAttribute("FeatureTitle", "Evidence-Based Protocol Libraries API Endpoints (FR-023, FR-038)")]
        [Xunit.TraitAttribute("Description", "Access HWT curriculum")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "protocols")]
        [Xunit.TraitAttribute("Category", "hwt")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessHWTCurriculum()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "protocols",
                    "hwt",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access HWT curriculum", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 100
    testRunner.When("I send a GET request to \"/api/protocols/handwriting-without-tears?grade=kindergar" +
                        "ten\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 101
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2737 = new TechTalk.SpecFlow.Table(new string[] {
                            "resource"});
                table2737.AddRow(new string[] {
                            "letter-formations"});
                table2737.AddRow(new string[] {
                            "practice-pages"});
                table2737.AddRow(new string[] {
                            "multisensory-tools"});
                table2737.AddRow(new string[] {
                            "assessment-tools"});
#line 102
    testRunner.And("materials should include:", ((string)(null)), table2737, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Submit fidelity checklist")]
        [Xunit.TraitAttribute("FeatureTitle", "Evidence-Based Protocol Libraries API Endpoints (FR-023, FR-038)")]
        [Xunit.TraitAttribute("Description", "Submit fidelity checklist")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "protocols")]
        [Xunit.TraitAttribute("Category", "fidelity")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubmitFidelityChecklist()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "protocols",
                    "fidelity",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit fidelity checklist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 112
    testRunner.Given("I\'m implementing \"prompt-level-1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2738 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2738.AddRow(new string[] {
                            "sessionId",
                            "session-789"});
                table2738.AddRow(new string[] {
                            "checklistItems",
                            "[{\"item\": \"cues-hierarchy\", \"implemented\": true}]"});
                table2738.AddRow(new string[] {
                            "videoReview",
                            "video-url"});
                table2738.AddRow(new string[] {
                            "selfRating",
                            "4"});
#line 113
    testRunner.When("I send a POST request to \"/api/protocols/prompt-level-1/fidelity-check\" with:", ((string)(null)), table2738, "When ");
#line hidden
#line 119
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
    testRunner.And("fidelity score should be calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
    testRunner.And("feedback should be provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track protocol certifications")]
        [Xunit.TraitAttribute("FeatureTitle", "Evidence-Based Protocol Libraries API Endpoints (FR-023, FR-038)")]
        [Xunit.TraitAttribute("Description", "Track protocol certifications")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "protocols")]
        [Xunit.TraitAttribute("Category", "certification")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackProtocolCertifications()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "protocols",
                    "certification",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track protocol certifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 125
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 126
    testRunner.When("I send a GET request to \"/api/protocols/certification-tracking\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 127
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2739 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2739.AddRow(new string[] {
                            "activeCertifications",
                            "array"});
                table2739.AddRow(new string[] {
                            "expiringCertifications",
                            "array"});
                table2739.AddRow(new string[] {
                            "availableTrainings",
                            "array"});
                table2739.AddRow(new string[] {
                            "ceuCredits",
                            "object"});
#line 128
    testRunner.And("the response should contain:", ((string)(null)), table2739, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Evidence_BasedProtocolLibrariesAPIEndpointsFR_023FR_038Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Evidence_BasedProtocolLibrariesAPIEndpointsFR_023FR_038Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
