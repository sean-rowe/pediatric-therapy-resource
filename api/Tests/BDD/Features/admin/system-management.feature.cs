// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Admin
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SystemManagementAndAdminAPIEndpointsFeature : object, Xunit.IClassFixture<SystemManagementAndAdminAPIEndpointsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "system-management.feature"
#line hidden
        
        public SystemManagementAndAdminAPIEndpointsFeature(SystemManagementAndAdminAPIEndpointsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/admin", "System Management and Admin API Endpoints", "  As a system administrator\n  I want to manage the platform\n  So that I can ensur" +
                    "e smooth operations", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"admin@uptrms.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("I have admin privileges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get admin dashboard")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get admin dashboard")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "dashboard")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetAdminDashboard()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "dashboard",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get admin dashboard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 14
    testRunner.When("I send a GET request to \"/api/admin/dashboard\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table42.AddRow(new string[] {
                            "systemHealth",
                            "object"});
                table42.AddRow(new string[] {
                            "userMetrics",
                            "object"});
                table42.AddRow(new string[] {
                            "resourceMetrics",
                            "object"});
                table42.AddRow(new string[] {
                            "revenueMetrics",
                            "object"});
                table42.AddRow(new string[] {
                            "alerts",
                            "array"});
                table42.AddRow(new string[] {
                            "pendingReviews",
                            "number"});
#line 16
    testRunner.And("the response should contain:", ((string)(null)), table42, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List all platform users")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "List all platform users")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "user-management")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ListAllPlatformUsers()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "user-management",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all platform users", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 28
    testRunner.When("I send a GET request to \"/api/admin/users?status=active&page=1&limit=50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table43.AddRow(new string[] {
                            "users",
                            "array"});
                table43.AddRow(new string[] {
                            "total",
                            "number"});
                table43.AddRow(new string[] {
                            "filters",
                            "object"});
#line 30
    testRunner.And("the response should contain:", ((string)(null)), table43, "And ");
#line hidden
#line 35
    testRunner.And("each user should include admin details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update user status")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Update user status")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "user-control")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateUserStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "user-control",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update user status", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table44.AddRow(new string[] {
                            "status",
                            "suspended"});
                table44.AddRow(new string[] {
                            "reason",
                            "Terms of service violation"});
                table44.AddRow(new string[] {
                            "duration",
                            "7-days"});
#line 40
    testRunner.When("I send a PUT request to \"/api/admin/users/user-123/status\" with:", ((string)(null)), table44, "When ");
#line hidden
#line 45
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
    testRunner.And("user should be suspended", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.And("notification should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
    testRunner.And("audit log should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get content pending review")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get content pending review")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "content-moderation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetContentPendingReview()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "content-moderation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get content pending review", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 53
    testRunner.When("I send a GET request to \"/api/admin/content/pending-review\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table45.AddRow(new string[] {
                            "contentId",
                            "string"});
                table45.AddRow(new string[] {
                            "contentType",
                            "string"});
                table45.AddRow(new string[] {
                            "submittedBy",
                            "object"});
                table45.AddRow(new string[] {
                            "submittedAt",
                            "string"});
                table45.AddRow(new string[] {
                            "flaggedIssues",
                            "array"});
                table45.AddRow(new string[] {
                            "priority",
                            "string"});
#line 55
    testRunner.And("the response should contain array of:", ((string)(null)), table45, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Review content submission")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Review content submission")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "content-approval")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ReviewContentSubmission()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "content-approval",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Review content submission", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 67
    testRunner.Given("content \"content-123\" is pending review", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table46.AddRow(new string[] {
                            "decision",
                            "approved-with-changes"});
                table46.AddRow(new string[] {
                            "changes",
                            "[\"Remove medical claim\"]"});
                table46.AddRow(new string[] {
                            "notes",
                            "Good resource overall"});
#line 68
    testRunner.When("I send a POST request to \"/api/admin/content/content-123/review\" with:", ((string)(null)), table46, "When ");
#line hidden
#line 73
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
    testRunner.And("content status should update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
    testRunner.And("creator should be notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
    testRunner.And("changes should be tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get system health status")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get system health status")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "monitoring")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetSystemHealthStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "monitoring",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get system health status", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 81
    testRunner.When("I send a GET request to \"/api/admin/system/health\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table47.AddRow(new string[] {
                            "apiStatus",
                            "string"});
                table47.AddRow(new string[] {
                            "databaseStatus",
                            "string"});
                table47.AddRow(new string[] {
                            "storageStatus",
                            "string"});
                table47.AddRow(new string[] {
                            "queueStatus",
                            "string"});
                table47.AddRow(new string[] {
                            "cacheStatus",
                            "string"});
                table47.AddRow(new string[] {
                            "integrations",
                            "array"});
                table47.AddRow(new string[] {
                            "errorRate",
                            "number"});
                table47.AddRow(new string[] {
                            "responseTime",
                            "number"});
#line 83
    testRunner.And("the response should contain:", ((string)(null)), table47, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Schedule maintenance window")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Schedule maintenance window")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "maintenance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ScheduleMaintenanceWindow()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "maintenance",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule maintenance window", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table48.AddRow(new string[] {
                            "startTime",
                            "2024-01-28T02:00:00Z"});
                table48.AddRow(new string[] {
                            "duration",
                            "120"});
                table48.AddRow(new string[] {
                            "type",
                            "database-upgrade"});
                table48.AddRow(new string[] {
                            "notification",
                            "24-hours"});
                table48.AddRow(new string[] {
                            "message",
                            "Scheduled maintenance"});
#line 97
    testRunner.When("I send a POST request to \"/api/admin/system/maintenance\" with:", ((string)(null)), table48, "When ");
#line hidden
#line 104
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
    testRunner.And("maintenance should be scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
    testRunner.And("users should be notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
    testRunner.And("banner should appear", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get platform usage report")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get platform usage report")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "reporting")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetPlatformUsageReport()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "reporting",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get platform usage report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 112
    testRunner.When("I send a GET request to \"/api/admin/reports/usage?period=month\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table49.AddRow(new string[] {
                            "activeUsers",
                            "number"});
                table49.AddRow(new string[] {
                            "newRegistrations",
                            "number"});
                table49.AddRow(new string[] {
                            "resourceDownloads",
                            "number"});
                table49.AddRow(new string[] {
                            "aiGenerations",
                            "number"});
                table49.AddRow(new string[] {
                            "marketplaceSales",
                            "number"});
                table49.AddRow(new string[] {
                            "peakUsageTimes",
                            "array"});
#line 114
    testRunner.And("the response should contain:", ((string)(null)), table49, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access security audit log")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Access security audit log")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "security")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessSecurityAuditLog()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "security",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access security audit log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 125
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 126
    testRunner.When("I send a GET request to \"/api/admin/security/audit-log?days=7\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 127
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table50.AddRow(new string[] {
                            "eventId",
                            "string"});
                table50.AddRow(new string[] {
                            "eventType",
                            "string"});
                table50.AddRow(new string[] {
                            "userId",
                            "string"});
                table50.AddRow(new string[] {
                            "ipAddress",
                            "string"});
                table50.AddRow(new string[] {
                            "timestamp",
                            "string"});
                table50.AddRow(new string[] {
                            "details",
                            "object"});
                table50.AddRow(new string[] {
                            "riskLevel",
                            "string"});
#line 128
    testRunner.And("the response should contain array of:", ((string)(null)), table50, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Respond to security threat")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Respond to security threat")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "incident-response")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RespondToSecurityThreat()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "incident-response",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Respond to security threat", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 140
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table51.AddRow(new string[] {
                            "threatType",
                            "brute-force-attempt"});
                table51.AddRow(new string[] {
                            "affectedUsers",
                            "[\"user-123\", \"user-456\"]"});
                table51.AddRow(new string[] {
                            "action",
                            "force-password-reset"});
                table51.AddRow(new string[] {
                            "blockIPs",
                            "[\"192.168.1.1\"]"});
#line 141
    testRunner.When("I send a POST request to \"/api/admin/security/threat-response\" with:", ((string)(null)), table51, "When ");
#line hidden
#line 147
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
    testRunner.And("security measures should be applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 149
    testRunner.And("affected users should be notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 150
    testRunner.And("incident should be logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get billing overview")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get billing overview")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "financial")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetBillingOverview()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "financial",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get billing overview", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 155
    testRunner.When("I send a GET request to \"/api/admin/billing/overview\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table52.AddRow(new string[] {
                            "monthlyRecurring",
                            "number"});
                table52.AddRow(new string[] {
                            "churnRate",
                            "number"});
                table52.AddRow(new string[] {
                            "averageRevenue",
                            "number"});
                table52.AddRow(new string[] {
                            "outstandingAmount",
                            "number"});
                table52.AddRow(new string[] {
                            "failedPayments",
                            "array"});
                table52.AddRow(new string[] {
                            "upcomingRenewals",
                            "array"});
#line 157
    testRunner.And("the response should contain:", ((string)(null)), table52, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create platform announcement")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Create platform announcement")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "communications")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreatePlatformAnnouncement()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "communications",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create platform announcement", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 168
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table53.AddRow(new string[] {
                            "title",
                            "New Features Released!"});
                table53.AddRow(new string[] {
                            "message",
                            "Check out our AI tools"});
                table53.AddRow(new string[] {
                            "type",
                            "info"});
                table53.AddRow(new string[] {
                            "audience",
                            "all-users"});
                table53.AddRow(new string[] {
                            "displayUntil",
                            "2024-02-01"});
                table53.AddRow(new string[] {
                            "dismissible",
                            "true"});
#line 169
    testRunner.When("I send a POST request to \"/api/admin/announcements\" with:", ((string)(null)), table53, "When ");
#line hidden
#line 177
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 178
    testRunner.And("announcement should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
    testRunner.And("should appear to target audience", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update platform settings")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Update platform settings")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "configuration")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdatePlatformSettings()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "configuration",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update platform settings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 183
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table54.AddRow(new string[] {
                            "maintenanceMode",
                            "false"});
                table54.AddRow(new string[] {
                            "registrationEnabled",
                            "true"});
                table54.AddRow(new string[] {
                            "aiGenerationLimit",
                            "100"});
                table54.AddRow(new string[] {
                            "marketplaceCommission",
                            "0.25"});
#line 184
    testRunner.When("I send a PUT request to \"/api/admin/settings/platform\" with:", ((string)(null)), table54, "When ");
#line hidden
#line 190
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
    testRunner.And("settings should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
    testRunner.And("changes should take effect immediately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View support tickets")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "View support tickets")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "support")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewSupportTickets()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "support",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View support tickets", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 196
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 197
    testRunner.When("I send a GET request to \"/api/admin/support/tickets?status=open&priority=high\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 198
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table55.AddRow(new string[] {
                            "ticketId",
                            "string"});
                table55.AddRow(new string[] {
                            "userId",
                            "string"});
                table55.AddRow(new string[] {
                            "category",
                            "string"});
                table55.AddRow(new string[] {
                            "priority",
                            "string"});
                table55.AddRow(new string[] {
                            "createdAt",
                            "string"});
                table55.AddRow(new string[] {
                            "lastResponse",
                            "string"});
#line 199
    testRunner.And("the response should contain array of:", ((string)(null)), table55, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Export platform analytics")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Export platform analytics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "data-export")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ExportPlatformAnalytics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "data-export",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export platform analytics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 210
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table56.AddRow(new string[] {
                            "reportType",
                            "comprehensive"});
                table56.AddRow(new string[] {
                            "dateRange",
                            "{\"start\": \"2024-01-01\", \"end\": \"2024-12-31\"}"});
                table56.AddRow(new string[] {
                            "format",
                            "csv"});
                table56.AddRow(new string[] {
                            "sections",
                            "[\"users\", \"revenue\", \"content\"]"});
#line 211
    testRunner.When("I send a POST request to \"/api/admin/analytics/export\" with:", ((string)(null)), table56, "When ");
#line hidden
#line 217
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 218
    testRunner.And("export job should be queued", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
    testRunner.And("download link should be provided when complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Clear system cache")]
        [Xunit.TraitAttribute("FeatureTitle", "System Management and Admin API Endpoints")]
        [Xunit.TraitAttribute("Description", "Clear system cache")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "performance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ClearSystemCache()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "admin",
                    "performance",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Clear system cache", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 223
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table57.AddRow(new string[] {
                            "cacheType",
                            "resource-previews"});
                table57.AddRow(new string[] {
                            "scope",
                            "all"});
#line 224
    testRunner.When("I send a POST request to \"/api/admin/cache/clear\" with:", ((string)(null)), table57, "When ");
#line hidden
#line 228
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 229
    testRunner.And("cache should be cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 230
    testRunner.And("performance metrics should be monitored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SystemManagementAndAdminAPIEndpointsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SystemManagementAndAdminAPIEndpointsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
