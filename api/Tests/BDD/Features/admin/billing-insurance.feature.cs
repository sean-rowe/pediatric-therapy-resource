// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Admin
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BillingAndInsuranceManagementFeature : object, Xunit.IClassFixture<BillingAndInsuranceManagementFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "billing-insurance.feature"
#line hidden
        
        public BillingAndInsuranceManagementFeature(BillingAndInsuranceManagementFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/admin", "Billing and Insurance Management", "  As a therapy practice\n  I want to manage billing and insurance claims\n  So that" +
                    " I can receive proper reimbursement for services", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ID",
                        "Name",
                        "Type",
                        "Default Rate"});
            table1.AddRow(new string[] {
                        "1",
                        "Texas Medicaid",
                        "medicaid",
                        "$45.00"});
            table1.AddRow(new string[] {
                        "2",
                        "BlueCross BlueShield",
                        "private",
                        "$125.00"});
#line 7
    testRunner.Given("the following insurance payers exist:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Description",
                        "Service Type",
                        "Units"});
            table2.AddRow(new string[] {
                        "97530",
                        "Therapeutic activities",
                        "OT",
                        "15 min"});
            table2.AddRow(new string[] {
                        "97110",
                        "Therapeutic exercises",
                        "PT",
                        "15 min"});
            table2.AddRow(new string[] {
                        "92507",
                        "Speech therapy treatment",
                        "SLP",
                        "15 min"});
#line 11
    testRunner.And("the following CPT codes are configured:", ((string)(null)), table2, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add insurance to student")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Add insurance to student")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AddInsuranceToStudent()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add insurance to student", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 21
      testRunner.Given("student \"Emma Wilson\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3.AddRow(new string[] {
                            "Payer",
                            "Texas Medicaid"});
                table3.AddRow(new string[] {
                            "Policy Number",
                            "TXM123456789"});
                table3.AddRow(new string[] {
                            "Group Number",
                            "GRP001"});
                table3.AddRow(new string[] {
                            "Subscriber Name",
                            "Lisa Wilson"});
                table3.AddRow(new string[] {
                            "Subscriber Relation",
                            "Mother"});
                table3.AddRow(new string[] {
                            "Effective Date",
                            "2024-01-01"});
#line 22
      testRunner.When("I add insurance information:", ((string)(null)), table3, "When ");
#line hidden
#line 30
      testRunner.Then("the insurance is saved successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
      testRunner.And("the insurance is marked as primary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
      testRunner.And("eligibility verification is triggered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add secondary insurance")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Add secondary insurance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AddSecondaryInsurance()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add secondary insurance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 36
      testRunner.Given("\"Emma Wilson\" has primary insurance \"Texas Medicaid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
      testRunner.When("I add secondary insurance \"BlueCross BlueShield\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
      testRunner.Then("both insurances are saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
      testRunner.And("coverage priority is set correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
      testRunner.And("coordination of benefits is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Insurance authorization tracking")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Insurance authorization tracking")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void InsuranceAuthorizationTracking()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Insurance authorization tracking", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 44
      testRunner.Given("\"Emma Wilson\" has \"Texas Medicaid\" insurance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table4.AddRow(new string[] {
                            "Authorization Number",
                            "AUTH789456"});
                table4.AddRow(new string[] {
                            "Start Date",
                            "2024-01-01"});
                table4.AddRow(new string[] {
                            "End Date",
                            "2024-06-30"});
                table4.AddRow(new string[] {
                            "Authorized Units",
                            "120"});
                table4.AddRow(new string[] {
                            "Services Authorized",
                            "OT, PT"});
#line 45
      testRunner.When("I add authorization:", ((string)(null)), table4, "When ");
#line hidden
#line 52
      testRunner.Then("the authorization is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
      testRunner.And("remaining units show \"120\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
      testRunner.And("authorization alerts are configured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create claim for single session")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Create claim for single session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateClaimForSingleSession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create claim for single session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 60
      testRunner.Given("\"Emma Wilson\" has a completed session on \"2024-01-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 61
      testRunner.And("the session was 30 minutes of \"Therapeutic activities\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
      testRunner.When("I create a claim for the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table5.AddRow(new string[] {
                            "Student",
                            "Emma Wilson"});
                table5.AddRow(new string[] {
                            "Service Date",
                            "2024-01-15"});
                table5.AddRow(new string[] {
                            "CPT Code",
                            "97530"});
                table5.AddRow(new string[] {
                            "Units",
                            "2"});
                table5.AddRow(new string[] {
                            "Rate",
                            "$45.00"});
                table5.AddRow(new string[] {
                            "Total",
                            "$90.00"});
#line 63
      testRunner.Then("the claim includes:", ((string)(null)), table5, "Then ");
#line hidden
#line 71
      testRunner.And("the claim status is \"draft\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Batch create claims")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Batch create claims")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BatchCreateClaims()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch create claims", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 75
      testRunner.Given("multiple students have completed sessions in \"January 2024\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
      testRunner.When("I batch create claims for \"Texas Medicaid\" from \"2024-01-01\" to \"2024-01-31\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
      testRunner.Then("claims are created for all eligible sessions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
      testRunner.And("each claim groups sessions by student", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Value"});
                table6.AddRow(new string[] {
                            "Claims Created",
                            "45"});
                table6.AddRow(new string[] {
                            "Total Amount",
                            "$8,550"});
                table6.AddRow(new string[] {
                            "Sessions Included",
                            "190"});
#line 79
      testRunner.And("a summary shows:", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate claim before submission")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Validate claim before submission")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ValidateClaimBeforeSubmission()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate claim before submission", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 87
      testRunner.Given("I have a draft claim for \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
      testRunner.When("I validate the claim", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Validation",
                            "Result"});
                table7.AddRow(new string[] {
                            "Authorization valid",
                            "Pass"});
                table7.AddRow(new string[] {
                            "Documentation complete",
                            "Pass"});
                table7.AddRow(new string[] {
                            "Timely filing",
                            "Pass"});
                table7.AddRow(new string[] {
                            "Diagnosis codes present",
                            "Pass"});
                table7.AddRow(new string[] {
                            "Referring physician",
                            "Pass"});
#line 89
      testRunner.Then("the system checks:", ((string)(null)), table7, "Then ");
#line hidden
#line 96
      testRunner.And("any failures prevent submission", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Submit claim within limits")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Submit claim within limits")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubmitClaimWithinLimits()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit claim within limits", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 102
      testRunner.Given("a claim for service date \"2024-01-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
      testRunner.And("today is \"2024-02-10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
      testRunner.And("\"Texas Medicaid\" has 95-day filing limit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
      testRunner.When("I submit the claim", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
      testRunner.Then("the submission is successful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
      testRunner.And("claim status changes to \"submitted\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
      testRunner.And("submission timestamp is recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Warn about approaching filing deadline")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Warn about approaching filing deadline")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void WarnAboutApproachingFilingDeadline()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Warn about approaching filing deadline", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 112
      testRunner.Given("a claim for service date \"2023-11-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 113
      testRunner.And("today is \"2024-01-25\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
      testRunner.And("filing deadline is \"2024-02-04\" (10 days away)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
      testRunner.When("I view the claim", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
      testRunner.Then("I see warning \"Filing deadline in 10 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
      testRunner.And("the claim is highlighted in the queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prevent late submission")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Prevent late submission")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PreventLateSubmission()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prevent late submission", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 121
      testRunner.Given("a claim for service date \"2023-10-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
      testRunner.And("today is \"2024-02-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
      testRunner.And("filing deadline was \"2024-01-04\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
      testRunner.When("I attempt to submit the claim", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 125
      testRunner.Then("submission fails with \"Past timely filing deadline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
      testRunner.And("I must request exception with justification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track claim status updates")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Track claim status updates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackClaimStatusUpdates()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track claim status updates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 131
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 132
      testRunner.Given("claim \"CLM-2024-0123\" was submitted on \"2024-01-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 133
      testRunner.When("the payer updates status to \"in review\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
      testRunner.Then("the claim status is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Status",
                            "Notes"});
                table8.AddRow(new string[] {
                            "2024-01-15",
                            "submitted",
                            "Sent via EDI"});
                table8.AddRow(new string[] {
                            "2024-01-18",
                            "received",
                            "Accepted by payer"});
                table8.AddRow(new string[] {
                            "2024-01-22",
                            "in review",
                            "Medical review required"});
#line 135
      testRunner.And("status history shows:", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Post payment for claim")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Post payment for claim")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PostPaymentForClaim()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post payment for claim", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 142
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 143
      testRunner.Given("claim \"CLM-2024-0123\" for $180.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table9.AddRow(new string[] {
                            "Payment Date",
                            "2024-02-15"});
                table9.AddRow(new string[] {
                            "Check Number",
                            "789456"});
                table9.AddRow(new string[] {
                            "Paid Amount",
                            "$162.00"});
                table9.AddRow(new string[] {
                            "Adjustment",
                            "$18.00"});
                table9.AddRow(new string[] {
                            "Adjustment Reason",
                            "Contractual"});
#line 144
      testRunner.When("I post payment:", ((string)(null)), table9, "When ");
#line hidden
#line 151
      testRunner.Then("the payment is posted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
      testRunner.And("claim status changes to \"paid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
      testRunner.And("patient responsibility is $0.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
      testRunner.And("AR balance is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Post partial payment")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Post partial payment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PostPartialPayment()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Post partial payment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 157
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 158
      testRunner.Given("claim \"CLM-2024-0123\" for $180.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 159
      testRunner.When("I post partial payment of $90.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 160
      testRunner.Then("claim balance shows $90.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 161
      testRunner.And("claim status remains \"partial payment\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
      testRunner.And("follow-up task is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle claim denial")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Handle claim denial")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleClaimDenial()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle claim denial", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 167
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 168
      testRunner.Given("claim \"CLM-2024-0123\" was submitted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table10.AddRow(new string[] {
                            "Denial Date",
                            "2024-02-01"});
                table10.AddRow(new string[] {
                            "Denial Code",
                            "197"});
                table10.AddRow(new string[] {
                            "Denial Reason",
                            "Authorization not on file"});
#line 169
      testRunner.When("the claim is denied with:", ((string)(null)), table10, "When ");
#line hidden
#line 174
      testRunner.Then("claim status changes to \"denied\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 175
      testRunner.And("denial is tracked in system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Due Date"});
                table11.AddRow(new string[] {
                            "Submit authorization",
                            "2024-02-15"});
                table11.AddRow(new string[] {
                            "Resubmit claim",
                            "2024-02-20"});
#line 176
      testRunner.And("action items are suggested:", ((string)(null)), table11, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Appeal denied claim")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Appeal denied claim")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AppealDeniedClaim()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Appeal denied claim", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 182
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 183
      testRunner.Given("claim \"CLM-2024-0123\" was denied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table12.AddRow(new string[] {
                            "Appeal Date",
                            "2024-02-05"});
                table12.AddRow(new string[] {
                            "Appeal Level",
                            "1"});
                table12.AddRow(new string[] {
                            "Justification",
                            "Authorization was valid, see attached"});
                table12.AddRow(new string[] {
                            "Supporting Docs",
                            "AUTH789456.pdf"});
#line 184
      testRunner.When("I create an appeal with:", ((string)(null)), table12, "When ");
#line hidden
#line 190
      testRunner.Then("the appeal is submitted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
      testRunner.And("claim status changes to \"appealed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
      testRunner.And("appeal deadline is tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track appeal outcome")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Track appeal outcome")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackAppealOutcome()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track appeal outcome", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 195
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 196
      testRunner.Given("claim \"CLM-2024-0123\" is under appeal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 197
      testRunner.When("the appeal is approved with payment $162.00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 198
      testRunner.Then("claim status changes to \"paid after appeal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 199
      testRunner.And("payment is posted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
      testRunner.And("appeal success rate is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate aging report")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Generate aging report")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateAgingReport()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate aging report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 205
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 206
      testRunner.Given("multiple claims in various statuses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 207
      testRunner.When("I generate AR aging report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Age Range",
                            "Count",
                            "Amount"});
                table13.AddRow(new string[] {
                            "0-30 days",
                            "45",
                            "$8,550"});
                table13.AddRow(new string[] {
                            "31-60 days",
                            "12",
                            "$2,340"});
                table13.AddRow(new string[] {
                            "61-90 days",
                            "5",
                            "$975"});
                table13.AddRow(new string[] {
                            ">90 days",
                            "2",
                            "$380"});
#line 208
      testRunner.Then("I see claims grouped by age:", ((string)(null)), table13, "Then ");
#line hidden
#line 214
      testRunner.And("total AR is $12,245", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Analyze denial trends")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Analyze denial trends")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AnalyzeDenialTrends()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Analyze denial trends", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 217
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 218
      testRunner.Given("claims history for past 6 months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 219
      testRunner.When("I view denial analytics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Denial Reason",
                            "Count",
                            "Percentage"});
                table14.AddRow(new string[] {
                            "Missing authorization",
                            "15",
                            "35%"});
                table14.AddRow(new string[] {
                            "Timely filing",
                            "8",
                            "19%"});
                table14.AddRow(new string[] {
                            "Documentation issues",
                            "12",
                            "28%"});
                table14.AddRow(new string[] {
                            "Invalid diagnosis",
                            "8",
                            "19%"});
#line 220
      testRunner.Then("I see:", ((string)(null)), table14, "Then ");
#line hidden
#line 226
      testRunner.And("recommendations for improvement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track collection rates")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Track collection rates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackCollectionRates()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track collection rates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 229
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 230
      testRunner.Given("payment history for 2024", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 231
      testRunner.When("I view collection metrics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Value"});
                table15.AddRow(new string[] {
                            "Gross charges",
                            "$125,000"});
                table15.AddRow(new string[] {
                            "Contractual adjustments",
                            "$25,000"});
                table15.AddRow(new string[] {
                            "Net expected",
                            "$100,000"});
                table15.AddRow(new string[] {
                            "Collected",
                            "$92,000"});
                table15.AddRow(new string[] {
                            "Collection rate",
                            "92%"});
                table15.AddRow(new string[] {
                            "Days in AR",
                            "42"});
#line 232
      testRunner.Then("I see:", ((string)(null)), table15, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Process electronic remittance (835)")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Process electronic remittance (835)")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ProcessElectronicRemittance835()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Process electronic remittance (835)", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 244
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 245
      testRunner.Given("an 835 file is received from \"Texas Medicaid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 246
      testRunner.When("I process the remittance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 247
      testRunner.Then("payments are automatically posted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 248
      testRunner.And("denials are recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
      testRunner.And("adjustments are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Count"});
                table16.AddRow(new string[] {
                            "Patient not found",
                            "2"});
                table16.AddRow(new string[] {
                            "Claim not found",
                            "1"});
                table16.AddRow(new string[] {
                            "Amount mismatch",
                            "3"});
#line 250
      testRunner.And("exceptions require manual review:", ((string)(null)), table16, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Submit claims via EDI")]
        [Xunit.TraitAttribute("FeatureTitle", "Billing and Insurance Management")]
        [Xunit.TraitAttribute("Description", "Submit claims via EDI")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubmitClaimsViaEDI()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit claims via EDI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 257
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 258
      testRunner.Given("I have 25 claims ready for \"BlueCross BlueShield\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 259
      testRunner.When("I submit via EDI batch", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 260
      testRunner.Then("claims are formatted as 837 file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 261
      testRunner.And("file is transmitted securely", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 262
      testRunner.And("acknowledgment (999) is received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 263
      testRunner.And("claims update to \"submitted\" status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BillingAndInsuranceManagementFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BillingAndInsuranceManagementFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
