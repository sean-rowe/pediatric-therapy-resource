// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Admin
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ContentManagementAdminPortalFR_005Feature : object, Xunit.IClassFixture<ContentManagementAdminPortalFR_005Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "content-management.feature"
#line hidden
        
        public ContentManagementAdminPortalFR_005Feature(ContentManagementAdminPortalFR_005Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/admin", "Content Management Admin Portal (FR-005)", "  As a content administrator\n  I want to manage the upload, categorization, and q" +
                    "uality review of therapy resources\n  So that only high-quality, properly categor" +
                    "ized resources are available in the library", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("I am logged in as a content administrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("the content management system is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("quality review workflows are configured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Content creator uploads new resource with metadata")]
        [Xunit.TraitAttribute("FeatureTitle", "Content Management Admin Portal (FR-005)")]
        [Xunit.TraitAttribute("Description", "Content creator uploads new resource with metadata")]
        [Xunit.TraitAttribute("Category", "content-upload")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ContentCreatorUploadsNewResourceWithMetadata()
        {
            string[] tagsOfScenario = new string[] {
                    "content-upload",
                    "admin",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Content creator uploads new resource with metadata", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.Given("I am a verified content creator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
    testRunner.And("I have a new therapy resource to upload", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
    testRunner.When("I access the content upload portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
    testRunner.And("I upload the resource file \"Fine_Motor_Worksheet.pdf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table17.AddRow(new string[] {
                            "Title",
                            "Fine Motor Skills Practice"});
                table17.AddRow(new string[] {
                            "Description",
                            "Worksheet for ages 4-6"});
                table17.AddRow(new string[] {
                            "Resource Type",
                            "Worksheet"});
                table17.AddRow(new string[] {
                            "Skill Areas",
                            "Fine motor, bilateral coordination"});
                table17.AddRow(new string[] {
                            "Grade Levels",
                            "PreK, Kindergarten"});
                table17.AddRow(new string[] {
                            "Evidence Level",
                            "4 (research-based)"});
                table17.AddRow(new string[] {
                            "Languages",
                            "English, Spanish"});
                table17.AddRow(new string[] {
                            "License Type",
                            "Platform exclusive"});
#line 17
    testRunner.And("I provide the required metadata:", ((string)(null)), table17, "And ");
#line hidden
#line 27
    testRunner.And("I submit the resource for review", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
    testRunner.Then("the resource should be assigned a unique ID", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
    testRunner.And("the resource should enter the QA review queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
    testRunner.And("I should receive a submission confirmation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.And("the resource status should be \"Pending Review\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Peer review process for clinical accuracy")]
        [Xunit.TraitAttribute("FeatureTitle", "Content Management Admin Portal (FR-005)")]
        [Xunit.TraitAttribute("Description", "Peer review process for clinical accuracy")]
        [Xunit.TraitAttribute("Category", "peer-review")]
        [Xunit.TraitAttribute("Category", "clinical-accuracy")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PeerReviewProcessForClinicalAccuracy()
        {
            string[] tagsOfScenario = new string[] {
                    "peer-review",
                    "clinical-accuracy",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Peer review process for clinical accuracy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 35
    testRunner.Given("there is a resource \"Sensory Diet Activities\" in the review queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
    testRunner.And("the resource targets children with autism", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
    testRunner.When("I assign the resource to a clinical reviewer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Review Criteria",
                            "Assessment"});
                table18.AddRow(new string[] {
                            "Clinical accuracy",
                            "Techniques are evidence-based"});
                table18.AddRow(new string[] {
                            "Age appropriateness",
                            "Activities suit target age"});
                table18.AddRow(new string[] {
                            "Safety compliance",
                            "No contraindicated activities"});
                table18.AddRow(new string[] {
                            "Therapeutic value",
                            "Addresses stated goals"});
#line 38
    testRunner.And("the reviewer evaluates the resource for:", ((string)(null)), table18, "And ");
#line hidden
#line 44
    testRunner.And("the reviewer approves the resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.Then("the resource should be marked as \"Clinically Reviewed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
    testRunner.And("the resource should progress to the next review stage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.And("the reviewer\'s assessment should be logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
    testRunner.And("the resource creator should be notified of approval", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Automated copyright checking system")]
        [Xunit.TraitAttribute("FeatureTitle", "Content Management Admin Portal (FR-005)")]
        [Xunit.TraitAttribute("Description", "Automated copyright checking system")]
        [Xunit.TraitAttribute("Category", "copyright-verification")]
        [Xunit.TraitAttribute("Category", "automated-checking")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AutomatedCopyrightCheckingSystem()
        {
            string[] tagsOfScenario = new string[] {
                    "copyright-verification",
                    "automated-checking",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Automated copyright checking system", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 52
    testRunner.Given("I upload a resource containing images and text", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
    testRunner.When("the automated copyright verification runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
    testRunner.Then("the system should check all images against copyright databases", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
    testRunner.And("the system should scan text for potential copyright violations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
    testRunner.And("the system should verify I have rights to use all content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
    testRunner.When("a potential copyright issue is detected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
    testRunner.Then("the resource should be flagged for manual review", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
    testRunner.And("I should receive notification of the copyright concern", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
    testRunner.And("the resource should not be published until resolved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.And("suggested alternative content should be provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Bulk content upload for large collections")]
        [Xunit.TraitAttribute("FeatureTitle", "Content Management Admin Portal (FR-005)")]
        [Xunit.TraitAttribute("Description", "Bulk content upload for large collections")]
        [Xunit.TraitAttribute("Category", "bulk-upload")]
        [Xunit.TraitAttribute("Category", "efficiency")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BulkContentUploadForLargeCollections()
        {
            string[] tagsOfScenario = new string[] {
                    "bulk-upload",
                    "efficiency",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bulk content upload for large collections", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 65
    testRunner.Given("I am a content partner with 50 resources to upload", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
    testRunner.When("I access the bulk upload interface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
    testRunner.And("I upload a CSV file with metadata for all resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
    testRunner.And("I upload a ZIP file containing all resource files", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
    testRunner.Then("the system should validate the CSV format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
    testRunner.And("the system should match each resource file to its metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
    testRunner.And("the system should process all uploads in background", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
    testRunner.And("I should receive progress updates during processing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
    testRunner.When("processing is complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
    testRunner.Then("all valid resources should be in the review queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
    testRunner.And("any errors should be reported with specific details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
    testRunner.And("I should receive a summary report of the upload results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Content retirement workflow")]
        [Xunit.TraitAttribute("FeatureTitle", "Content Management Admin Portal (FR-005)")]
        [Xunit.TraitAttribute("Description", "Content retirement workflow")]
        [Xunit.TraitAttribute("Category", "content-retirement")]
        [Xunit.TraitAttribute("Category", "lifecycle-management")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ContentRetirementWorkflow()
        {
            string[] tagsOfScenario = new string[] {
                    "content-retirement",
                    "lifecycle-management",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Content retirement workflow", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 80
    testRunner.Given("there is a published resource \"Outdated Therapy Technique\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 81
    testRunner.And("the resource has been flagged as outdated by users", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
    testRunner.When("I initiate the content retirement process", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
    testRunner.Then("the resource should be removed from active search results", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
    testRunner.And("existing downloads should remain accessible to users", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And("the resource should be marked as \"Retired\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.And("users should be notified of the retirement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.And("alternative resources should be suggested", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
    testRunner.And("the retirement should be logged in the audit trail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Version control for resource updates")]
        [Xunit.TraitAttribute("FeatureTitle", "Content Management Admin Portal (FR-005)")]
        [Xunit.TraitAttribute("Description", "Version control for resource updates")]
        [Xunit.TraitAttribute("Category", "version-control")]
        [Xunit.TraitAttribute("Category", "updates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void VersionControlForResourceUpdates()
        {
            string[] tagsOfScenario = new string[] {
                    "version-control",
                    "updates",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Version control for resource updates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 92
    testRunner.Given("there is a published resource \"Handwriting Guidelines v1.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
    testRunner.And("the creator submits an updated version \"Handwriting Guidelines v2.0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
    testRunner.When("I review the updated version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
    testRunner.And("I approve the changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
    testRunner.Then("the new version should be published", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
    testRunner.And("the old version should be marked as \"Superseded\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
    testRunner.And("users who downloaded the old version should be notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
    testRunner.And("the version history should be maintained", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
    testRunner.And("links to the old version should redirect to the new version", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Quality review analytics and metrics")]
        [Xunit.TraitAttribute("FeatureTitle", "Content Management Admin Portal (FR-005)")]
        [Xunit.TraitAttribute("Description", "Quality review analytics and metrics")]
        [Xunit.TraitAttribute("Category", "quality-metrics")]
        [Xunit.TraitAttribute("Category", "review-analytics")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void QualityReviewAnalyticsAndMetrics()
        {
            string[] tagsOfScenario = new string[] {
                    "quality-metrics",
                    "review-analytics",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Quality review analytics and metrics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 104
    testRunner.Given("I am viewing the content management dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 105
    testRunner.When("I access the quality metrics section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Current Value",
                            "Target"});
                table19.AddRow(new string[] {
                            "Average review time",
                            "2.5 days",
                            "3 days"});
                table19.AddRow(new string[] {
                            "Approval rate",
                            "87%",
                            "80%"});
                table19.AddRow(new string[] {
                            "Resources in queue",
                            "45",
                            "<50"});
                table19.AddRow(new string[] {
                            "Reviewer workload",
                            "8 per reviewer",
                            "<10"});
#line 106
    testRunner.Then("I should see review statistics:", ((string)(null)), table19, "Then ");
#line hidden
#line 112
    testRunner.And("I should see quality trends over time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
    testRunner.And("I should be able to identify bottlenecks in the review process", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
    testRunner.And("I should receive alerts for queue backlogs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Intelligent reviewer assignment system")]
        [Xunit.TraitAttribute("FeatureTitle", "Content Management Admin Portal (FR-005)")]
        [Xunit.TraitAttribute("Description", "Intelligent reviewer assignment system")]
        [Xunit.TraitAttribute("Category", "reviewer-assignment")]
        [Xunit.TraitAttribute("Category", "workload-management")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void IntelligentReviewerAssignmentSystem()
        {
            string[] tagsOfScenario = new string[] {
                    "reviewer-assignment",
                    "workload-management",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Intelligent reviewer assignment system", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 117
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 118
    testRunner.Given("there are 20 resources in the review queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Reviewer",
                            "Specialty",
                            "Current Workload"});
                table20.AddRow(new string[] {
                            "Dr. Smith",
                            "SLP",
                            "3 reviews"});
                table20.AddRow(new string[] {
                            "Dr. Johnson",
                            "OT",
                            "5 reviews"});
                table20.AddRow(new string[] {
                            "Dr. Williams",
                            "PT",
                            "2 reviews"});
                table20.AddRow(new string[] {
                            "Dr. Brown",
                            "ABA",
                            "4 reviews"});
                table20.AddRow(new string[] {
                            "Dr. Davis",
                            "General",
                            "6 reviews"});
#line 119
    testRunner.And("I have 5 clinical reviewers with different specialties:", ((string)(null)), table20, "And ");
#line hidden
#line 126
    testRunner.When("the auto-assignment system runs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Priority Factor",
                            "Weight",
                            "Rule"});
                table21.AddRow(new string[] {
                            "Specialty match",
                            "High",
                            "Assign to relevant specialist"});
                table21.AddRow(new string[] {
                            "Workload balance",
                            "Medium",
                            "Distribute evenly"});
                table21.AddRow(new string[] {
                            "Review urgency",
                            "Medium",
                            "Priority items first"});
                table21.AddRow(new string[] {
                            "Review complexity",
                            "Low",
                            "Complex items to experienced"});
#line 127
    testRunner.Then("resources should be assigned based on:", ((string)(null)), table21, "Then ");
#line hidden
#line 133
    testRunner.And("no reviewer should exceed 8 active reviews", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
    testRunner.And("urgent reviews should be assigned within 1 hour", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Manage content categorization taxonomy")]
        [Xunit.TraitAttribute("FeatureTitle", "Content Management Admin Portal (FR-005)")]
        [Xunit.TraitAttribute("Description", "Manage content categorization taxonomy")]
        [Xunit.TraitAttribute("Category", "content-categories")]
        [Xunit.TraitAttribute("Category", "taxonomy-management")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ManageContentCategorizationTaxonomy()
        {
            string[] tagsOfScenario = new string[] {
                    "content-categories",
                    "taxonomy-management",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manage content categorization taxonomy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 137
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 138
    testRunner.Given("I am managing the content taxonomy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 139
    testRunner.When("I add a new category \"Telehealth Resources\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Subcategory",
                            "Description"});
                table22.AddRow(new string[] {
                            "Virtual Backgrounds",
                            "Therapy-appropriate backgrounds"});
                table22.AddRow(new string[] {
                            "Digital Manipulatives",
                            "Interactive therapy tools"});
                table22.AddRow(new string[] {
                            "Screen Sharing Tools",
                            "Collaborative activities"});
#line 140
    testRunner.And("I define subcategories:", ((string)(null)), table22, "And ");
#line hidden
#line 145
    testRunner.Then("the new categories should be available for content tagging", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 146
    testRunner.And("existing content should be reviewable for new category assignment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
    testRunner.And("the taxonomy should be validated for consistency", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
    testRunner.And("category usage statistics should be tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate content metadata quality")]
        [Xunit.TraitAttribute("FeatureTitle", "Content Management Admin Portal (FR-005)")]
        [Xunit.TraitAttribute("Description", "Validate content metadata quality")]
        [Xunit.TraitAttribute("Category", "content-search")]
        [Xunit.TraitAttribute("Category", "metadata-quality")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ValidateContentMetadataQuality()
        {
            string[] tagsOfScenario = new string[] {
                    "content-search",
                    "metadata-quality",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate content metadata quality", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 151
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 152
    testRunner.Given("I am reviewing submitted content metadata", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 153
    testRunner.When("I check the quality of metadata fields", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Validation Rule"});
                table23.AddRow(new string[] {
                            "Title",
                            "Descriptive, under 100 chars"});
                table23.AddRow(new string[] {
                            "Description",
                            "Complete, 50-500 chars"});
                table23.AddRow(new string[] {
                            "Skill Areas",
                            "From approved taxonomy"});
                table23.AddRow(new string[] {
                            "Grade Levels",
                            "Valid educational levels"});
                table23.AddRow(new string[] {
                            "Evidence Level",
                            "1-5 scale with justification"});
                table23.AddRow(new string[] {
                            "Languages",
                            "ISO language codes"});
#line 154
    testRunner.Then("the system should validate:", ((string)(null)), table23, "Then ");
#line hidden
#line 162
    testRunner.And("incomplete metadata should be flagged for revision", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
    testRunner.And("metadata quality scores should be calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
    testRunner.And("creators should receive feedback on metadata improvements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ContentManagementAdminPortalFR_005Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ContentManagementAdminPortalFR_005Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
