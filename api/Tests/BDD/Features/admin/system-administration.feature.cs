// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Admin
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SystemAdministrationFeature : object, Xunit.IClassFixture<SystemAdministrationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "system-administration.feature"
#line hidden
        
        public SystemAdministrationFeature(SystemAdministrationFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/admin", "System Administration", "  As a system administrator\n  I want to configure and maintain the therapy docume" +
                    "ntation system\n  So that it operates efficiently and meets organizational needs", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("I am logged in as system administrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I have full administrative privileges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("the system has been operational for 6 months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Onboard new therapist")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Onboard new therapist")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void OnboardNewTherapist()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Onboard new therapist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 15
      testRunner.Given("a new therapist \"Jennifer Martinez\" is hired", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table24.AddRow(new string[] {
                            "Email",
                            "jmartinez@therapy.com"});
                table24.AddRow(new string[] {
                            "Role",
                            "Therapist"});
                table24.AddRow(new string[] {
                            "Service Type",
                            "Occupational Therapy"});
                table24.AddRow(new string[] {
                            "License Number",
                            "OT-98765"});
                table24.AddRow(new string[] {
                            "License State",
                            "TX"});
                table24.AddRow(new string[] {
                            "Supervisor",
                            "Sarah Johnson"});
                table24.AddRow(new string[] {
                            "Start Date",
                            "2024-02-01"});
                table24.AddRow(new string[] {
                            "Schools Assigned",
                            "Lincoln, Washington"});
#line 16
      testRunner.When("I create her user account with:", ((string)(null)), table24, "When ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Result"});
                table25.AddRow(new string[] {
                            "Creates account",
                            "With temporary password"});
                table25.AddRow(new string[] {
                            "Sends welcome email",
                            "With setup instructions"});
                table25.AddRow(new string[] {
                            "Assigns permissions",
                            "Based on therapist role"});
                table25.AddRow(new string[] {
                            "Creates audit entry",
                            "Account creation logged"});
                table25.AddRow(new string[] {
                            "Notifies supervisor",
                            "New supervisee alert"});
#line 26
      testRunner.Then("the system:", ((string)(null)), table25, "Then ");
#line hidden
#line 33
      testRunner.And("account requires password change on first login", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Manage user roles and permissions")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Manage user roles and permissions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ManageUserRolesAndPermissions()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manage user roles and permissions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 37
      testRunner.Given("multiple user roles exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
      testRunner.When("I review role permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Role",
                            "Permissions"});
                table26.AddRow(new string[] {
                            "Therapist",
                            "View own caseload, document sessions, run reports"});
                table26.AddRow(new string[] {
                            "Supervisor",
                            "Above + view team, approve documents, reassign"});
                table26.AddRow(new string[] {
                            "Administrator",
                            "Above + user management, billing, configuration"});
                table26.AddRow(new string[] {
                            "Billing Specialist",
                            "View billing, submit claims, post payments"});
                table26.AddRow(new string[] {
                            "Executive",
                            "View all reports, no PHI access, financial only"});
#line 39
      testRunner.Then("I can configure:", ((string)(null)), table26, "Then ");
#line hidden
#line 46
      testRunner.And("changes require second administrator approval", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Deactivate departing user")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Deactivate departing user")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DeactivateDepartingUser()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deactivate departing user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 50
      testRunner.Given("\"Former Employee\" is leaving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
      testRunner.When("I process termination on \"2024-01-31\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Step",
                            "Action"});
                table27.AddRow(new string[] {
                            "Access Removal",
                            "Immediate deactivation at 5:00 PM"});
                table27.AddRow(new string[] {
                            "Caseload Transfer",
                            "Students reassigned per plan"});
                table27.AddRow(new string[] {
                            "Document Retention",
                            "All records retained, access restricted"});
                table27.AddRow(new string[] {
                            "License Release",
                            "Removed from active license count"});
                table27.AddRow(new string[] {
                            "Audit Trail",
                            "Complete access history archived"});
                table27.AddRow(new string[] {
                            "Final Reports",
                            "Productivity and compliance summary"});
#line 52
      testRunner.Then("system executes:", ((string)(null)), table27, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Configure district-specific requirements")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Configure district-specific requirements")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConfigureDistrict_SpecificRequirements()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure district-specific requirements", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 65
      testRunner.Given("\"Springfield ISD\" has unique needs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
      testRunner.When("I create district configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Configuration"});
                table28.AddRow(new string[] {
                            "Session Duration Options",
                            "15, 30, 45, 60 minutes"});
                table28.AddRow(new string[] {
                            "Required Documentation",
                            "Additional behavior notes"});
                table28.AddRow(new string[] {
                            "Billing Codes",
                            "District-specific codes"});
                table28.AddRow(new string[] {
                            "Report Templates",
                            "Custom monthly format"});
                table28.AddRow(new string[] {
                            "Approval Workflows",
                            "Principal sign-off required"});
                table28.AddRow(new string[] {
                            "Data Retention",
                            "10 years (exceeds default)"});
#line 67
      testRunner.Then("I can customize:", ((string)(null)), table28, "Then ");
#line hidden
#line 75
      testRunner.And("settings apply only to that district\'s students", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Set up automated workflows")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Set up automated workflows")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SetUpAutomatedWorkflows()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set up automated workflows", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 79
      testRunner.Given("repetitive tasks need automation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 80
      testRunner.When("I configure workflow for \"session documentation reminders\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Trigger",
                            "Condition",
                            "Action"});
                table29.AddRow(new string[] {
                            "Session completed",
                            "No documentation after 24hr",
                            "Email therapist"});
                table29.AddRow(new string[] {
                            "Still pending",
                            "No documentation after 36hr",
                            "Email + SMS"});
                table29.AddRow(new string[] {
                            "Approaching deadline",
                            "6 hours until 48hr limit",
                            "Email + supervisor CC"});
                table29.AddRow(new string[] {
                            "Overdue",
                            "Past 48 hours",
                            "Lock billing + escalate"});
#line 81
      testRunner.Then("I set:", ((string)(null)), table29, "Then ");
#line hidden
#line 87
      testRunner.And("test mode available before activation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Manage integration settings")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Manage integration settings")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ManageIntegrationSettings()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manage integration settings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 91
      testRunner.Given("external systems need connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
      testRunner.When("I configure integrations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "System",
                            "Integration Type",
                            "Configuration"});
                table30.AddRow(new string[] {
                            "School SIS",
                            "REST API",
                            "API key, endpoints"});
                table30.AddRow(new string[] {
                            "Billing Clearinghouse",
                            "SFTP",
                            "Credentials, schedule"});
                table30.AddRow(new string[] {
                            "Email Server",
                            "SMTP",
                            "Server, port, TLS"});
                table30.AddRow(new string[] {
                            "Calendar System",
                            "CalDAV",
                            "URL, sync frequency"});
                table30.AddRow(new string[] {
                            "Telehealth Platform",
                            "OAuth 2.0",
                            "Client ID, permissions"});
#line 93
      testRunner.Then("I can set up:", ((string)(null)), table30, "Then ");
#line hidden
#line 100
    testRunner.And("connection testing is available for each integration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Schedule system maintenance")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Schedule system maintenance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ScheduleSystemMaintenance()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule system maintenance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 106
      testRunner.Given("updates need deployment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 107
      testRunner.When("I schedule maintenance window", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Value"});
                table31.AddRow(new string[] {
                            "Date/Time",
                            "2024-02-10 02:00-04:00 EST"});
                table31.AddRow(new string[] {
                            "Type",
                            "Database optimization"});
                table31.AddRow(new string[] {
                            "Impact",
                            "Read-only mode"});
                table31.AddRow(new string[] {
                            "Notification",
                            "1 week, 1 day, 1 hour prior"});
                table31.AddRow(new string[] {
                            "Rollback Plan",
                            "Automated with manual override"});
#line 108
      testRunner.Then("I configure:", ((string)(null)), table31, "Then ");
#line hidden
#line 115
      testRunner.And("system displays countdown banner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
      testRunner.And("emergency contacts documented", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Monitor system performance")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Monitor system performance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MonitorSystemPerformance()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Monitor system performance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 119
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 120
      testRunner.Given("performance metrics collected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 121
      testRunner.When("I view system health dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Current",
                            "Threshold",
                            "Status"});
                table32.AddRow(new string[] {
                            "Response Time",
                            "245ms avg",
                            "<500ms",
                            "Healthy"});
                table32.AddRow(new string[] {
                            "Database Load",
                            "42%",
                            "<80%",
                            "Healthy"});
                table32.AddRow(new string[] {
                            "Storage Used",
                            "1.2TB/2TB",
                            "<90%",
                            "Monitor"});
                table32.AddRow(new string[] {
                            "Concurrent Users",
                            "87",
                            "<200",
                            "Healthy"});
                table32.AddRow(new string[] {
                            "Error Rate",
                            "0.02%",
                            "<0.1%",
                            "Healthy"});
                table32.AddRow(new string[] {
                            "Backup Status",
                            "Current",
                            "Daily",
                            "Healthy"});
#line 122
      testRunner.Then("I see:", ((string)(null)), table32, "Then ");
#line hidden
#line 130
    testRunner.And("historical trends and alerts are displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Manage data archival")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Manage data archival")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ManageDataArchival()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manage data archival", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 133
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 134
      testRunner.Given("data retention policies exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 135
      testRunner.When("I run archival process", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Data Type",
                            "Action",
                            "Retention"});
                table33.AddRow(new string[] {
                            "Session notes >7yr",
                            "Move to cold storage",
                            "Accessible on request"});
                table33.AddRow(new string[] {
                            "Audit logs >6yr",
                            "Compress and archive",
                            "Searchable index"});
                table33.AddRow(new string[] {
                            "Billing >10yr",
                            "Archive with index",
                            "48hr retrieval"});
                table33.AddRow(new string[] {
                            "Emails >2yr",
                            "Delete after archive",
                            "PDF copies kept"});
#line 136
      testRunner.Then("system:", ((string)(null)), table33, "Then ");
#line hidden
#line 142
      testRunner.And("archival validated before deletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
      testRunner.And("restoration tested quarterly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Configure security policies")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Configure security policies")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConfigureSecurityPolicies()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure security policies", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 148
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 149
      testRunner.Given("security requirements defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 150
      testRunner.When("I set security parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Policy",
                            "Setting"});
                table34.AddRow(new string[] {
                            "Password Complexity",
                            "12+ chars, mixed case, special"});
                table34.AddRow(new string[] {
                            "Password Expiration",
                            "90 days"});
                table34.AddRow(new string[] {
                            "Session Timeout",
                            "30 minutes idle"});
                table34.AddRow(new string[] {
                            "MFA Requirement",
                            "All users, SMS or app"});
                table34.AddRow(new string[] {
                            "Login Attempts",
                            "Lock after 5 failed"});
                table34.AddRow(new string[] {
                            "IP Restrictions",
                            "Optional whitelist per role"});
#line 151
      testRunner.Then("I configure:", ((string)(null)), table34, "Then ");
#line hidden
#line 159
      testRunner.And("changes logged with justification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Review security audit log")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Review security audit log")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ReviewSecurityAuditLog()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Review security audit log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 162
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 163
      testRunner.Given("security events logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 164
      testRunner.When("I review security report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Event Type",
                            "Count",
                            "Severity",
                            "Action Required"});
                table35.AddRow(new string[] {
                            "Failed Logins",
                            "47",
                            "Low",
                            "Monitor"});
                table35.AddRow(new string[] {
                            "Permission Changes",
                            "12",
                            "Medium",
                            "Review each"});
                table35.AddRow(new string[] {
                            "Data Exports",
                            "23",
                            "Medium",
                            "Verify authorized"});
                table35.AddRow(new string[] {
                            "Access from New IP",
                            "8",
                            "Low",
                            "Verify legitimate"});
                table35.AddRow(new string[] {
                            "Admin Actions",
                            "31",
                            "High",
                            "Audit trail"});
#line 165
      testRunner.Then("I see:", ((string)(null)), table35, "Then ");
#line hidden
#line 172
    testRunner.And("drill-down to specific events is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Configure billing rules")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Configure billing rules")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConfigureBillingRules()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure billing rules", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 177
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 178
      testRunner.Given("multiple payers with different requirements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 179
      testRunner.When("I set up billing automation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Payer",
                            "Rules"});
                table36.AddRow(new string[] {
                            "Medicaid",
                            "Require auth, 15-min units"});
                table36.AddRow(new string[] {
                            "BCBS",
                            "Prior auth for >8 sessions"});
                table36.AddRow(new string[] {
                            "School District",
                            "Monthly batch, net 45"});
                table36.AddRow(new string[] {
                            "Private Pay",
                            "Payment due at service"});
#line 180
      testRunner.Then("I configure:", ((string)(null)), table36, "Then ");
#line hidden
#line 186
      testRunner.And("validations prevent incorrect billing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Set up fee schedules")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Set up fee schedules")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SetUpFeeSchedules()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set up fee schedules", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 189
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 190
      testRunner.Given("contract negotiations completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 191
      testRunner.When("I update fee schedules for \"2024\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Service",
                            "CPT Code",
                            "Medicaid",
                            "BCBS",
                            "Private"});
                table37.AddRow(new string[] {
                            "OT Eval",
                            "97165",
                            "$125.00",
                            "$285.00",
                            "$350.00"});
                table37.AddRow(new string[] {
                            "OT Treatment",
                            "97530",
                            "$45.00",
                            "$95.00",
                            "$125.00"});
                table37.AddRow(new string[] {
                            "PT Eval",
                            "97161",
                            "$125.00",
                            "$275.00",
                            "$350.00"});
#line 192
      testRunner.Then("I enter:", ((string)(null)), table37, "Then ");
#line hidden
#line 197
    testRunner.And("effective dates and version control are maintained", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add new therapy clinic location")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Add new therapy clinic location")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AddNewTherapyClinicLocation()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add new therapy clinic location", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 202
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 203
      testRunner.Given("expansion to new location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 204
      testRunner.When("I configure \"Northside Therapy Center\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Component",
                            "Configuration"});
                table38.AddRow(new string[] {
                            "Address",
                            "123 North Ave, Suite 100"});
                table38.AddRow(new string[] {
                            "Time Zone",
                            "CST"});
                table38.AddRow(new string[] {
                            "Tax ID",
                            "Separate EIN"});
                table38.AddRow(new string[] {
                            "Billing Entity",
                            "Northside LLC"});
                table38.AddRow(new string[] {
                            "Staff Assignments",
                            "Therapists by location"});
                table38.AddRow(new string[] {
                            "Service Area",
                            "5 new schools"});
#line 205
      testRunner.Then("I set up:", ((string)(null)), table38, "Then ");
#line hidden
#line 213
      testRunner.And("location appears in all relevant dropdowns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Configure multi-tenant architecture")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Configure multi-tenant architecture")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConfigureMulti_TenantArchitecture()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure multi-tenant architecture", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 216
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 217
      testRunner.Given("multiple practice entities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 218
      testRunner.When("I set up data segregation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Isolation",
                            "Implementation"});
                table39.AddRow(new string[] {
                            "Database",
                            "Separate schemas"});
                table39.AddRow(new string[] {
                            "User Management",
                            "Independent admin"});
                table39.AddRow(new string[] {
                            "Billing",
                            "Separate clearinghouse IDs"});
                table39.AddRow(new string[] {
                            "Reporting",
                            "No cross-tenant access"});
                table39.AddRow(new string[] {
                            "Customization",
                            "Independent configurations"});
#line 219
      testRunner.Then("each tenant has:", ((string)(null)), table39, "Then ");
#line hidden
#line 226
    testRunner.And("single sign-on capability is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Test disaster recovery plan")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Test disaster recovery plan")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TestDisasterRecoveryPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test disaster recovery plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 231
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 232
      testRunner.Given("DR plan documented", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 233
      testRunner.When("I initiate DR test", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Step",
                            "Validation"});
                table40.AddRow(new string[] {
                            "Backup Restoration",
                            "<4 hours to restore"});
                table40.AddRow(new string[] {
                            "Failover Test",
                            "Secondary site operational"});
                table40.AddRow(new string[] {
                            "Data Integrity",
                            "Checksums match"});
                table40.AddRow(new string[] {
                            "Communication",
                            "All stakeholders notified"});
                table40.AddRow(new string[] {
                            "Documentation",
                            "Runbook accurate"});
#line 234
      testRunner.Then("process includes:", ((string)(null)), table40, "Then ");
#line hidden
#line 241
      testRunner.And("lessons learned documented", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Configure automated backups")]
        [Xunit.TraitAttribute("FeatureTitle", "System Administration")]
        [Xunit.TraitAttribute("Description", "Configure automated backups")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConfigureAutomatedBackups()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure automated backups", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 244
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 245
      testRunner.Given("backup requirements defined", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 246
      testRunner.When("I set backup parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Backup Type",
                            "Frequency",
                            "Retention",
                            "Location"});
                table41.AddRow(new string[] {
                            "Database Full",
                            "Daily 2 AM",
                            "30 days",
                            "Primary + offsite"});
                table41.AddRow(new string[] {
                            "Database Incremental",
                            "Hourly",
                            "7 days",
                            "Primary + offsite"});
                table41.AddRow(new string[] {
                            "File Storage",
                            "Daily 3 AM",
                            "30 days",
                            "Cloud + local"});
                table41.AddRow(new string[] {
                            "Configuration",
                            "On change",
                            "All versions",
                            "Version control"});
#line 247
      testRunner.Then("schedule includes:", ((string)(null)), table41, "Then ");
#line hidden
#line 253
    testRunner.And("automated testing and alerts are configured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SystemAdministrationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SystemAdministrationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
