// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Resources
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ResourceManagementAPIEndpointsFeature : object, Xunit.IClassFixture<ResourceManagementAPIEndpointsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "resource-management.feature"
#line hidden
        
        public ResourceManagementAPIEndpointsFeature(ResourceManagementAPIEndpointsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/resources", "Resource Management API Endpoints", "  As a therapy professional\n  I want to manage individual resources\n  So that I c" +
                    "an access, download, and organize therapy materials", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get resource details by ID")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get resource details by ID")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetResourceDetailsByID()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get resource details by ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.Given("a resource exists with id \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
    testRunner.When("I send a GET request to \"/api/resources/res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2093 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2093.AddRow(new string[] {
                            "id",
                            "string"});
                table2093.AddRow(new string[] {
                            "title",
                            "string"});
                table2093.AddRow(new string[] {
                            "description",
                            "string"});
                table2093.AddRow(new string[] {
                            "content",
                            "string"});
                table2093.AddRow(new string[] {
                            "thumbnailUrl",
                            "string"});
                table2093.AddRow(new string[] {
                            "previewUrls",
                            "array"});
                table2093.AddRow(new string[] {
                            "skillAreas",
                            "array"});
                table2093.AddRow(new string[] {
                            "gradeLevels",
                            "array"});
                table2093.AddRow(new string[] {
                            "resourceType",
                            "string"});
                table2093.AddRow(new string[] {
                            "format",
                            "string"});
                table2093.AddRow(new string[] {
                            "fileSize",
                            "number"});
                table2093.AddRow(new string[] {
                            "evidenceLevel",
                            "number"});
                table2093.AddRow(new string[] {
                            "rating",
                            "number"});
                table2093.AddRow(new string[] {
                            "downloadCount",
                            "number"});
                table2093.AddRow(new string[] {
                            "createdAt",
                            "string"});
                table2093.AddRow(new string[] {
                            "updatedAt",
                            "string"});
                table2093.AddRow(new string[] {
                            "createdBy",
                            "object"});
                table2093.AddRow(new string[] {
                            "clinicalReview",
                            "object"});
                table2093.AddRow(new string[] {
                            "relatedResources",
                            "array"});
#line 16
    testRunner.And("the response should contain:", ((string)(null)), table2093, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Resource not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Resource not found")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "not-found")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ResourceNotFound()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "not-found",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resource not found", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 40
    testRunner.When("I send a GET request to \"/api/resources/nonexistent-id\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
    testRunner.Then("the response status should be 404", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
    testRunner.And("the response should contain error \"Resource not found\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Download resource file")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Download resource file")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "download")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DownloadResourceFile()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "download",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Download resource file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 46
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 47
    testRunner.Given("a resource exists with id \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
    testRunner.When("I send a GET request to \"/api/resources/res-123/download\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2094 = new TechTalk.SpecFlow.Table(new string[] {
                            "header",
                            "value"});
                table2094.AddRow(new string[] {
                            "Content-Type",
                            "application/pdf"});
                table2094.AddRow(new string[] {
                            "Content-Disposition",
                            "attachment; filename=..."});
#line 50
    testRunner.And("the response headers should contain:", ((string)(null)), table2094, "And ");
#line hidden
#line 54
    testRunner.And("the download should be tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
    testRunner.And("usage analytics should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Enforce download limits for basic users")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Enforce download limits for basic users")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "download")]
        [Xunit.TraitAttribute("Category", "limits")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnforceDownloadLimitsForBasicUsers()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "download",
                    "limits",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enforce download limits for basic users", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 59
    testRunner.Given("I have a \"basic\" subscription with 10 downloads per month", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
    testRunner.And("I have already downloaded 10 resources this month", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.When("I send a GET request to \"/api/resources/res-123/download\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
    testRunner.Then("the response status should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
    testRunner.And("the response should contain error \"Monthly download limit reached\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add resource to favorites")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Add resource to favorites")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "favorites")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AddResourceToFavorites()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "favorites",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add resource to favorites", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 68
    testRunner.Given("a resource exists with id \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 69
    testRunner.When("I send a POST request to \"/api/resources/res-123/favorite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.And("the response should contain message \"Added to favorites\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
    testRunner.And("the resource should appear in my favorites list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Remove resource from favorites")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Remove resource from favorites")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "favorites")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RemoveResourceFromFavorites()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "favorites",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove resource from favorites", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 77
    testRunner.Given("resource \"res-123\" is in my favorites", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 78
    testRunner.When("I send a DELETE request to \"/api/resources/res-123/favorite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
    testRunner.And("the response should contain message \"Removed from favorites\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get user\'s favorite resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get user\'s favorite resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "favorites")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetUsersFavoriteResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "favorites",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get user\'s favorite resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 85
    testRunner.Given("I have 25 favorite resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
    testRunner.When("I send a GET request to \"/api/resources/favorites?page=1&limit=20\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2095 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2095.AddRow(new string[] {
                            "favorites",
                            "array"});
                table2095.AddRow(new string[] {
                            "total",
                            "number"});
                table2095.AddRow(new string[] {
                            "page",
                            "number"});
#line 88
    testRunner.And("the response should contain:", ((string)(null)), table2095, "And ");
#line hidden
#line 93
    testRunner.And("each favorite should include resource details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Rate a resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Rate a resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "ratings")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RateAResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "ratings",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rate a resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 98
    testRunner.Given("a resource exists with id \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2096 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2096.AddRow(new string[] {
                            "rating",
                            "5"});
                table2096.AddRow(new string[] {
                            "comment",
                            "Excellent resource for fine motor skills"});
#line 99
    testRunner.When("I send a POST request to \"/api/resources/res-123/rate\" with:", ((string)(null)), table2096, "When ");
#line hidden
#line 103
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2097 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2097.AddRow(new string[] {
                            "averageRating",
                            "number"});
                table2097.AddRow(new string[] {
                            "totalRatings",
                            "number"});
#line 104
    testRunner.And("the response should contain:", ((string)(null)), table2097, "And ");
#line hidden
#line 108
    testRunner.And("the rating should be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate rating value")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Validate rating value")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "ratings")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ValidateRatingValue()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "ratings",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate rating value", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2098 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2098.AddRow(new string[] {
                            "rating",
                            "7"});
#line 112
    testRunner.When("I send a POST request to \"/api/resources/res-123/rate\" with:", ((string)(null)), table2098, "When ");
#line hidden
#line 115
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
    testRunner.And("the response should contain error \"Rating must be between 1 and 5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get resource ratings and reviews")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get resource ratings and reviews")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "ratings")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetResourceRatingsAndReviews()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "ratings",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get resource ratings and reviews", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 121
    testRunner.Given("resource \"res-123\" has multiple ratings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
    testRunner.When("I send a GET request to \"/api/resources/res-123/ratings\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 123
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2099 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2099.AddRow(new string[] {
                            "averageRating",
                            "number"});
                table2099.AddRow(new string[] {
                            "distribution",
                            "object"});
                table2099.AddRow(new string[] {
                            "reviews",
                            "array"});
#line 124
    testRunner.And("the response should contain:", ((string)(null)), table2099, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2100 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2100.AddRow(new string[] {
                            "userId",
                            "string"});
                table2100.AddRow(new string[] {
                            "userName",
                            "string"});
                table2100.AddRow(new string[] {
                            "rating",
                            "number"});
                table2100.AddRow(new string[] {
                            "comment",
                            "string"});
                table2100.AddRow(new string[] {
                            "helpfulCount",
                            "number"});
                table2100.AddRow(new string[] {
                            "createdAt",
                            "string"});
#line 129
    testRunner.And("each review should contain:", ((string)(null)), table2100, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Report inappropriate resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Report inappropriate resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "moderation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ReportInappropriateResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "moderation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Report inappropriate resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 140
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 141
    testRunner.Given("a resource exists with id \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2101 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2101.AddRow(new string[] {
                            "reason",
                            "Inappropriate content"});
                table2101.AddRow(new string[] {
                            "details",
                            "Contains medical advice"});
#line 142
    testRunner.When("I send a POST request to \"/api/resources/res-123/report\" with:", ((string)(null)), table2101, "When ");
#line hidden
#line 146
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
    testRunner.And("the response should contain message \"Report submitted\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
    testRunner.And("a moderation review should be triggered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get resource version history")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get resource version history")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "versions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetResourceVersionHistory()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "versions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get resource version history", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 152
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 153
    testRunner.Given("resource \"res-123\" has multiple versions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 154
    testRunner.When("I send a GET request to \"/api/resources/res-123/versions\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 155
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2102 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2102.AddRow(new string[] {
                            "versionId",
                            "string"});
                table2102.AddRow(new string[] {
                            "versionNumber",
                            "number"});
                table2102.AddRow(new string[] {
                            "changedBy",
                            "object"});
                table2102.AddRow(new string[] {
                            "changeNotes",
                            "string"});
                table2102.AddRow(new string[] {
                            "createdAt",
                            "string"});
#line 156
    testRunner.And("the response should contain array of:", ((string)(null)), table2102, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create copy of resource for modification")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Create copy of resource for modification")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "organization")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateCopyOfResourceForModification()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "organization",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create copy of resource for modification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 167
    testRunner.Given("a resource exists with id \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2103 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2103.AddRow(new string[] {
                            "title",
                            "My Modified Version"});
                table2103.AddRow(new string[] {
                            "notes",
                            "Adapted for younger kids"});
#line 168
    testRunner.When("I send a POST request to \"/api/resources/res-123/copy\" with:", ((string)(null)), table2103, "When ");
#line hidden
#line 172
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2104 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2104.AddRow(new string[] {
                            "newResourceId",
                            "string"});
                table2104.AddRow(new string[] {
                            "originalId",
                            "string"});
#line 173
    testRunner.And("the response should contain:", ((string)(null)), table2104, "And ");
#line hidden
#line 177
    testRunner.And("the new resource should be editable by me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get related resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get related resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "discovery")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetRelatedResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "discovery",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get related resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 181
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 182
    testRunner.Given("a resource exists with id \"res-123\" about fine motor skills", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 183
    testRunner.When("I send a GET request to \"/api/resources/res-123/related\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 184
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
    testRunner.And("the response should contain array of related resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
    testRunner.And("resources should be sorted by relevance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 187
    testRunner.And("should include similar skill areas and grade levels", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Share resource with colleague")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Share resource with colleague")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "sharing")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ShareResourceWithColleague()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "sharing",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Share resource with colleague", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 191
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 192
    testRunner.Given("a resource exists with id \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2105 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2105.AddRow(new string[] {
                            "email",
                            "colleague@clinic.com"});
                table2105.AddRow(new string[] {
                            "message",
                            "Check out this resource"});
                table2105.AddRow(new string[] {
                            "expiresIn",
                            "7d"});
#line 193
    testRunner.When("I send a POST request to \"/api/resources/res-123/share\" with:", ((string)(null)), table2105, "When ");
#line hidden
#line 198
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2106 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2106.AddRow(new string[] {
                            "shareId",
                            "string"});
                table2106.AddRow(new string[] {
                            "shareUrl",
                            "string"});
#line 199
    testRunner.And("the response should contain:", ((string)(null)), table2106, "And ");
#line hidden
#line 203
    testRunner.And("an email should be sent to the colleague", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get resources shared with me")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get resources shared with me")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "sharing")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetResourcesSharedWithMe()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "sharing",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get resources shared with me", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 207
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 208
    testRunner.Given("colleagues have shared resources with me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 209
    testRunner.When("I send a GET request to \"/api/resources/shared-with-me\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 210
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2107 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2107.AddRow(new string[] {
                            "resourceId",
                            "string"});
                table2107.AddRow(new string[] {
                            "sharedBy",
                            "object"});
                table2107.AddRow(new string[] {
                            "sharedAt",
                            "string"});
                table2107.AddRow(new string[] {
                            "message",
                            "string"});
                table2107.AddRow(new string[] {
                            "expiresAt",
                            "string"});
#line 211
    testRunner.And("the response should contain array of:", ((string)(null)), table2107, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add resource to collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Add resource to collection")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "collections")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AddResourceToCollection()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "collections",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add resource to collection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 221
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 222
    testRunner.Given("a resource exists with id \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 223
    testRunner.And("I have a collection \"Fine Motor Activities\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2108 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2108.AddRow(new string[] {
                            "collectionId",
                            "coll-456"});
                table2108.AddRow(new string[] {
                            "notes",
                            "Good for beginners"});
#line 224
    testRunner.When("I send a POST request to \"/api/resources/res-123/collections\" with:", ((string)(null)), table2108, "When ");
#line hidden
#line 228
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 229
    testRunner.And("the resource should be added to the collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get resource usage statistics")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get resource usage statistics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetResourceUsageStatistics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "analytics",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get resource usage statistics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 233
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 234
    testRunner.Given("I own resource \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 235
    testRunner.When("I send a GET request to \"/api/resources/res-123/usage\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 236
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2109 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2109.AddRow(new string[] {
                            "totalDownloads",
                            "number"});
                table2109.AddRow(new string[] {
                            "uniqueUsers",
                            "number"});
                table2109.AddRow(new string[] {
                            "averageRating",
                            "number"});
                table2109.AddRow(new string[] {
                            "usageByMonth",
                            "array"});
                table2109.AddRow(new string[] {
                            "usageByGrade",
                            "object"});
                table2109.AddRow(new string[] {
                            "topReferrers",
                            "array"});
#line 237
    testRunner.And("the response should contain:", ((string)(null)), table2109, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Submit resource for clinical review")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Submit resource for clinical review")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "quality")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubmitResourceForClinicalReview()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "quality",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit resource for clinical review", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 248
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 249
    testRunner.Given("I created resource \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2110 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2110.AddRow(new string[] {
                            "requestedReviewers",
                            "[\"OT\", \"SLP\"]"});
                table2110.AddRow(new string[] {
                            "notes",
                            "Please verify terminology accuracy"});
#line 250
    testRunner.When("I send a POST request to \"/api/resources/res-123/clinical-review\" with:", ((string)(null)), table2110, "When ");
#line hidden
#line 254
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2111 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2111.AddRow(new string[] {
                            "reviewId",
                            "string"});
                table2111.AddRow(new string[] {
                            "status",
                            "string"});
                table2111.AddRow(new string[] {
                            "estimatedCompletion",
                            "string"});
#line 255
    testRunner.And("the response should contain:", ((string)(null)), table2111, "And ");
#line hidden
#line 260
    testRunner.And("review requests should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ResourceManagementAPIEndpointsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ResourceManagementAPIEndpointsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
