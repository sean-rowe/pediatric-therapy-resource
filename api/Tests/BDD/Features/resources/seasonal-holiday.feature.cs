// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Resources
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SeasonalAndHolidayContentAPIEndpointsFR_020Feature : object, Xunit.IClassFixture<SeasonalAndHolidayContentAPIEndpointsFR_020Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "seasonal-holiday.feature"
#line hidden
        
        public SeasonalAndHolidayContentAPIEndpointsFR_020Feature(SeasonalAndHolidayContentAPIEndpointsFR_020Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/resources", "Seasonal and Holiday Content API Endpoints (FR-020)", "  As a therapy professional\n  I want access to themed seasonal and holiday resour" +
                    "ces\n  So that I can provide engaging, timely therapy materials", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get current seasonal resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Seasonal and Holiday Content API Endpoints (FR-020)")]
        [Xunit.TraitAttribute("Description", "Get current seasonal resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "seasonal")]
        [Xunit.TraitAttribute("Category", "current")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetCurrentSeasonalResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "seasonal",
                    "current",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get current seasonal resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.Given("the current date is \"2024-10-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
    testRunner.When("I send a GET request to \"/api/resources/seasonal/current\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2172 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2172.AddRow(new string[] {
                            "season",
                            "fall"});
                table2172.AddRow(new string[] {
                            "featuredThemes",
                            "[\"halloween\", \"harvest\", \"thanksgiving\"]"});
                table2172.AddRow(new string[] {
                            "resources",
                            "array"});
                table2172.AddRow(new string[] {
                            "autoRotated",
                            "true"});
#line 16
    testRunner.And("the response should contain:", ((string)(null)), table2172, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View multi-cultural holiday calendar")]
        [Xunit.TraitAttribute("FeatureTitle", "Seasonal and Holiday Content API Endpoints (FR-020)")]
        [Xunit.TraitAttribute("Description", "View multi-cultural holiday calendar")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "holidays")]
        [Xunit.TraitAttribute("Category", "calendar")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewMulti_CulturalHolidayCalendar()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "holidays",
                    "calendar",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View multi-cultural holiday calendar", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 26
    testRunner.When("I send a GET request to \"/api/resources/holidays/calendar?year=2024&cultures=all\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2173 = new TechTalk.SpecFlow.Table(new string[] {
                            "culture",
                            "holidays"});
                table2173.AddRow(new string[] {
                            "christian",
                            "Christmas, Easter"});
                table2173.AddRow(new string[] {
                            "jewish",
                            "Hanukkah, Passover"});
                table2173.AddRow(new string[] {
                            "islamic",
                            "Eid al-Fitr, Eid al-Adha"});
                table2173.AddRow(new string[] {
                            "hindu",
                            "Diwali, Holi"});
                table2173.AddRow(new string[] {
                            "secular",
                            "New Year, Valentine\'s Day"});
                table2173.AddRow(new string[] {
                            "cultural",
                            "Lunar New Year, Cinco de Mayo"});
#line 28
    testRunner.And("calendar should include:", ((string)(null)), table2173, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Set seasonal content preferences")]
        [Xunit.TraitAttribute("FeatureTitle", "Seasonal and Holiday Content API Endpoints (FR-020)")]
        [Xunit.TraitAttribute("Description", "Set seasonal content preferences")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "seasonal")]
        [Xunit.TraitAttribute("Category", "preferences")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SetSeasonalContentPreferences()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "seasonal",
                    "preferences",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set seasonal content preferences", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2174 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2174.AddRow(new string[] {
                            "autoRotate",
                            "true"});
                table2174.AddRow(new string[] {
                            "includedHolidays",
                            "[\"secular\", \"cultural\"]"});
                table2174.AddRow(new string[] {
                            "excludedThemes",
                            "[\"scary\", \"religious\"]"});
                table2174.AddRow(new string[] {
                            "ageAppropriate",
                            "3-8"});
                table2174.AddRow(new string[] {
                            "notificationDays",
                            "7"});
#line 40
    testRunner.When("I send a POST request to \"/api/resources/seasonal/preferences\" with:", ((string)(null)), table2174, "When ");
#line hidden
#line 47
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
    testRunner.And("preferences should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
    testRunner.And("content should filter accordingly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get resources for specific theme")]
        [Xunit.TraitAttribute("FeatureTitle", "Seasonal and Holiday Content API Endpoints (FR-020)")]
        [Xunit.TraitAttribute("Description", "Get resources for specific theme")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "seasonal")]
        [Xunit.TraitAttribute("Category", "theme")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetResourcesForSpecificTheme()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "seasonal",
                    "theme",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get resources for specific theme", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 54
    testRunner.When("I send a GET request to \"/api/resources/seasonal/theme/winter?skills=fine-motor\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2175 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "examples"});
                table2175.AddRow(new string[] {
                            "crafts",
                            "Snowflake cutting practice"});
                table2175.AddRow(new string[] {
                            "worksheets",
                            "Winter clothing sequences"});
                table2175.AddRow(new string[] {
                            "games",
                            "Snowman building dice game"});
                table2175.AddRow(new string[] {
                            "sensory",
                            "Fake snow sensory bins"});
#line 56
    testRunner.And("resources should include:", ((string)(null)), table2175, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create custom seasonal theme pack")]
        [Xunit.TraitAttribute("FeatureTitle", "Seasonal and Holiday Content API Endpoints (FR-020)")]
        [Xunit.TraitAttribute("Description", "Create custom seasonal theme pack")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "seasonal")]
        [Xunit.TraitAttribute("Category", "custom")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateCustomSeasonalThemePack()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "seasonal",
                    "custom",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create custom seasonal theme pack", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2176 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2176.AddRow(new string[] {
                            "themeName",
                            "\"Spring Garden\""});
                table2176.AddRow(new string[] {
                            "elements",
                            "[\"flowers\", \"bugs\", \"rain\"]"});
                table2176.AddRow(new string[] {
                            "skills",
                            "[\"counting\", \"colors\", \"vocabulary\"]"});
                table2176.AddRow(new string[] {
                            "ageRange",
                            "4-6"});
#line 66
    testRunner.When("I send a POST request to \"/api/resources/seasonal/custom-theme\" with:", ((string)(null)), table2176, "When ");
#line hidden
#line 72
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
    testRunner.And("custom theme should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
    testRunner.And("AI should suggest matching resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get holiday-specific therapy activities")]
        [Xunit.TraitAttribute("FeatureTitle", "Seasonal and Holiday Content API Endpoints (FR-020)")]
        [Xunit.TraitAttribute("Description", "Get holiday-specific therapy activities")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "holidays")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetHoliday_SpecificTherapyActivities()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "holidays",
                    "activities",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get holiday-specific therapy activities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 79
    testRunner.When("I send a GET request to \"/api/resources/holidays/thanksgiving/activities\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2177 = new TechTalk.SpecFlow.Table(new string[] {
                            "category",
                            "examples"});
                table2177.AddRow(new string[] {
                            "gratitude",
                            "Thankful tree craft"});
                table2177.AddRow(new string[] {
                            "sequencing",
                            "Turkey sandwich making"});
                table2177.AddRow(new string[] {
                            "social",
                            "Family traditions discussion"});
                table2177.AddRow(new string[] {
                            "motor",
                            "Leaf pile jumping cards"});
#line 81
    testRunner.And("activities should include:", ((string)(null)), table2177, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get seasonal virtual backgrounds")]
        [Xunit.TraitAttribute("FeatureTitle", "Seasonal and Holiday Content API Endpoints (FR-020)")]
        [Xunit.TraitAttribute("Description", "Get seasonal virtual backgrounds")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "seasonal")]
        [Xunit.TraitAttribute("Category", "backgrounds")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetSeasonalVirtualBackgrounds()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "seasonal",
                    "backgrounds",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get seasonal virtual backgrounds", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2178 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2178.AddRow(new string[] {
                            "season",
                            "winter"});
                table2178.AddRow(new string[] {
                            "style",
                            "animated"});
                table2178.AddRow(new string[] {
                            "interactive",
                            "true"});
#line 91
    testRunner.When("I send a POST request to \"/api/resources/seasonal/backgrounds\" with:", ((string)(null)), table2178, "When ");
#line hidden
#line 96
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2179 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "features"});
                table2179.AddRow(new string[] {
                            "snow scene",
                            "Falling snow animation"});
                table2179.AddRow(new string[] {
                            "fireplace",
                            "Crackling fire sounds"});
                table2179.AddRow(new string[] {
                            "ice palace",
                            "Interactive elements"});
#line 97
    testRunner.And("backgrounds should include:", ((string)(null)), table2179, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access countdown calendars")]
        [Xunit.TraitAttribute("FeatureTitle", "Seasonal and Holiday Content API Endpoints (FR-020)")]
        [Xunit.TraitAttribute("Description", "Access countdown calendars")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "seasonal")]
        [Xunit.TraitAttribute("Category", "countdown")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessCountdownCalendars()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "seasonal",
                    "countdown",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access countdown calendars", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 105
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 106
    testRunner.When("I send a GET request to \"/api/resources/seasonal/countdown/christmas\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2180 = new TechTalk.SpecFlow.Table(new string[] {
                            "day",
                            "activity"});
                table2180.AddRow(new string[] {
                            "1",
                            "Fine motor ornament craft"});
                table2180.AddRow(new string[] {
                            "2",
                            "Holiday vocabulary bingo"});
                table2180.AddRow(new string[] {
                            "3",
                            "Gift wrapping practice"});
                table2180.AddRow(new string[] {
                            "24",
                            "Special celebration activity"});
#line 108
    testRunner.And("calendar should include:", ((string)(null)), table2180, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Schedule seasonal content rotation")]
        [Xunit.TraitAttribute("FeatureTitle", "Seasonal and Holiday Content API Endpoints (FR-020)")]
        [Xunit.TraitAttribute("Description", "Schedule seasonal content rotation")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "seasonal")]
        [Xunit.TraitAttribute("Category", "scheduling")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ScheduleSeasonalContentRotation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "seasonal",
                    "scheduling",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule seasonal content rotation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 117
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2181 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2181.AddRow(new string[] {
                            "rotationType",
                            "automatic"});
                table2181.AddRow(new string[] {
                            "leadTime",
                            "2-weeks"});
                table2181.AddRow(new string[] {
                            "transitionDays",
                            "3"});
                table2181.AddRow(new string[] {
                            "notify",
                            "true"});
#line 118
    testRunner.When("I send a POST request to \"/api/resources/seasonal/schedule\" with:", ((string)(null)), table2181, "When ");
#line hidden
#line 124
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
    testRunner.And("rotation schedule should be set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
    testRunner.And("notifications should be configured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get seasonal reward systems")]
        [Xunit.TraitAttribute("FeatureTitle", "Seasonal and Holiday Content API Endpoints (FR-020)")]
        [Xunit.TraitAttribute("Description", "Get seasonal reward systems")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "seasonal")]
        [Xunit.TraitAttribute("Category", "rewards")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetSeasonalRewardSystems()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "seasonal",
                    "rewards",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get seasonal reward systems", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 131
    testRunner.When("I send a GET request to \"/api/resources/seasonal/rewards/fall\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 132
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2182 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "theme"});
                table2182.AddRow(new string[] {
                            "stickers",
                            "Autumn leaves, pumpkins"});
                table2182.AddRow(new string[] {
                            "certificates",
                            "Harvest themed"});
                table2182.AddRow(new string[] {
                            "tokens",
                            "Acorn collection"});
                table2182.AddRow(new string[] {
                            "charts",
                            "Apple tree progress"});
#line 133
    testRunner.And("rewards should include:", ((string)(null)), table2182, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SeasonalAndHolidayContentAPIEndpointsFR_020Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SeasonalAndHolidayContentAPIEndpointsFR_020Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
