// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Resources
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AdvocacyAndLegalResourcesAPIEndpointsFR_039Feature : object, Xunit.IClassFixture<AdvocacyAndLegalResourcesAPIEndpointsFR_039Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "advocacy-legal.feature"
#line hidden
        
        public AdvocacyAndLegalResourcesAPIEndpointsFR_039Feature(AdvocacyAndLegalResourcesAPIEndpointsFR_039Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/resources", "Advocacy and Legal Resources API Endpoints (FR-039)", "  As a therapy professional or parent\n  I want access to advocacy resources and l" +
                    "egal templates\n  So that I can effectively advocate for student needs", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access IEP preparation checklist")]
        [Xunit.TraitAttribute("FeatureTitle", "Advocacy and Legal Resources API Endpoints (FR-039)")]
        [Xunit.TraitAttribute("Description", "Access IEP preparation checklist")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "advocacy")]
        [Xunit.TraitAttribute("Category", "iep")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessIEPPreparationChecklist()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "advocacy",
                    "iep",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access IEP preparation checklist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/advocacy/iep-prep/checklist?meeting=annual\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1965 = new TechTalk.SpecFlow.Table(new string[] {
                            "category",
                            "items"});
                table1965.AddRow(new string[] {
                            "documentation",
                            "Progress reports, evaluations"});
                table1965.AddRow(new string[] {
                            "goals",
                            "Draft goals with data"});
                table1965.AddRow(new string[] {
                            "questions",
                            "Key questions to ask"});
                table1965.AddRow(new string[] {
                            "rights",
                            "Parent rights summary"});
                table1965.AddRow(new string[] {
                            "timeline",
                            "Important deadlines"});
#line 15
    testRunner.And("checklist should include:", ((string)(null)), table1965, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get state-specific rights information")]
        [Xunit.TraitAttribute("FeatureTitle", "Advocacy and Legal Resources API Endpoints (FR-039)")]
        [Xunit.TraitAttribute("Description", "Get state-specific rights information")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "advocacy")]
        [Xunit.TraitAttribute("Category", "rights")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetState_SpecificRightsInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "advocacy",
                    "rights",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get state-specific rights information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 26
    testRunner.When("I send a GET request to \"/api/advocacy/rights/CA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1966 = new TechTalk.SpecFlow.Table(new string[] {
                            "topic",
                            "details"});
                table1966.AddRow(new string[] {
                            "evaluationRights",
                            "Timeline and procedures"});
                table1966.AddRow(new string[] {
                            "iepRights",
                            "Meeting requirements"});
                table1966.AddRow(new string[] {
                            "disciplineRights",
                            "Manifestation determination"});
                table1966.AddRow(new string[] {
                            "privateSchool",
                            "Equitable services"});
#line 28
    testRunner.And("information should include:", ((string)(null)), table1966, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate advocacy letter template")]
        [Xunit.TraitAttribute("FeatureTitle", "Advocacy and Legal Resources API Endpoints (FR-039)")]
        [Xunit.TraitAttribute("Description", "Generate advocacy letter template")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "advocacy")]
        [Xunit.TraitAttribute("Category", "letters")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateAdvocacyLetterTemplate()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "advocacy",
                    "letters",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate advocacy letter template", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1967 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1967.AddRow(new string[] {
                            "letterType",
                            "\"request-evaluation\""});
                table1967.AddRow(new string[] {
                            "recipient",
                            "\"school-district\""});
                table1967.AddRow(new string[] {
                            "childInfo",
                            "{\"name\": \"Emma\", \"grade\": 3}"});
                table1967.AddRow(new string[] {
                            "concerns",
                            "[\"reading\", \"attention\"]"});
#line 38
    testRunner.When("I send a POST request to \"/api/advocacy/letters/generate\" with:", ((string)(null)), table1967, "When ");
#line hidden
#line 44
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1968 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "content"});
                table1968.AddRow(new string[] {
                            "formalRequest",
                            "Legal language"});
                table1968.AddRow(new string[] {
                            "timeline",
                            "Response requirements"});
                table1968.AddRow(new string[] {
                            "citations",
                            "Relevant laws"});
                table1968.AddRow(new string[] {
                            "nextSteps",
                            "What happens next"});
#line 45
    testRunner.And("letter should include:", ((string)(null)), table1968, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access due process guides")]
        [Xunit.TraitAttribute("FeatureTitle", "Advocacy and Legal Resources API Endpoints (FR-039)")]
        [Xunit.TraitAttribute("Description", "Access due process guides")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "advocacy")]
        [Xunit.TraitAttribute("Category", "dueprocess")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessDueProcessGuides()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "advocacy",
                    "dueprocess",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access due process guides", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 55
    testRunner.When("I send a GET request to \"/api/advocacy/due-process/guides\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1969 = new TechTalk.SpecFlow.Table(new string[] {
                            "stage",
                            "resources"});
                table1969.AddRow(new string[] {
                            "preFiling",
                            "Resolution attempts"});
                table1969.AddRow(new string[] {
                            "filing",
                            "Complaint templates"});
                table1969.AddRow(new string[] {
                            "mediation",
                            "Preparation tips"});
                table1969.AddRow(new string[] {
                            "hearing",
                            "Evidence organization"});
#line 57
    testRunner.And("guides should cover:", ((string)(null)), table1969, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access advocacy training modules")]
        [Xunit.TraitAttribute("FeatureTitle", "Advocacy and Legal Resources API Endpoints (FR-039)")]
        [Xunit.TraitAttribute("Description", "Access advocacy training modules")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "advocacy")]
        [Xunit.TraitAttribute("Category", "training")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessAdvocacyTrainingModules()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "advocacy",
                    "training",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access advocacy training modules", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1970 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1970.AddRow(new string[] {
                            "role",
                            "\"parent\""});
                table1970.AddRow(new string[] {
                            "experience",
                            "\"beginner\""});
                table1970.AddRow(new string[] {
                            "topics",
                            "[\"iep-basics\", \"rights\"]"});
#line 67
    testRunner.When("I send a POST request to \"/api/advocacy/training/modules\" with:", ((string)(null)), table1970, "When ");
#line hidden
#line 72
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1971 = new TechTalk.SpecFlow.Table(new string[] {
                            "module",
                            "format",
                            "duration"});
                table1971.AddRow(new string[] {
                            "IEP 101",
                            "video",
                            "30 min"});
                table1971.AddRow(new string[] {
                            "Your Rights",
                            "interactive",
                            "45 min"});
                table1971.AddRow(new string[] {
                            "Effective Communication",
                            "workbook",
                            "self-paced"});
#line 73
    testRunner.And("modules should include:", ((string)(null)), table1971, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access grant writing templates")]
        [Xunit.TraitAttribute("FeatureTitle", "Advocacy and Legal Resources API Endpoints (FR-039)")]
        [Xunit.TraitAttribute("Description", "Access grant writing templates")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "advocacy")]
        [Xunit.TraitAttribute("Category", "grants")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessGrantWritingTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "advocacy",
                    "grants",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access grant writing templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 82
    testRunner.When("I send a GET request to \"/api/advocacy/grants/templates?purpose=therapy-equipment" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1972 = new TechTalk.SpecFlow.Table(new string[] {
                            "grantType",
                            "components"});
                table1972.AddRow(new string[] {
                            "foundation",
                            "Narrative, budget, outcomes"});
                table1972.AddRow(new string[] {
                            "corporate",
                            "Brief proposal, impact"});
                table1972.AddRow(new string[] {
                            "government",
                            "Detailed application"});
#line 84
    testRunner.And("templates should include:", ((string)(null)), table1972, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate insurance appeal letter")]
        [Xunit.TraitAttribute("FeatureTitle", "Advocacy and Legal Resources API Endpoints (FR-039)")]
        [Xunit.TraitAttribute("Description", "Generate insurance appeal letter")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "advocacy")]
        [Xunit.TraitAttribute("Category", "insurance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateInsuranceAppealLetter()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "advocacy",
                    "insurance",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate insurance appeal letter", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1973 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1973.AddRow(new string[] {
                            "denialReason",
                            "\"not medically necessary\""});
                table1973.AddRow(new string[] {
                            "service",
                            "\"occupational therapy\""});
                table1973.AddRow(new string[] {
                            "diagnosis",
                            "\"autism spectrum disorder\""});
                table1973.AddRow(new string[] {
                            "evidence",
                            "[\"eval-report\", \"physician-letter\"]"});
#line 93
    testRunner.When("I send a POST request to \"/api/advocacy/insurance/appeals\" with:", ((string)(null)), table1973, "When ");
#line hidden
#line 99
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1974 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "content"});
                table1974.AddRow(new string[] {
                            "argument",
                            "Medical necessity justification"});
                table1974.AddRow(new string[] {
                            "research",
                            "Supporting studies"});
                table1974.AddRow(new string[] {
                            "credentials",
                            "Provider qualifications"});
                table1974.AddRow(new string[] {
                            "request",
                            "Specific approval sought"});
#line 100
    testRunner.And("appeal should include:", ((string)(null)), table1974, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Find advocacy organizations")]
        [Xunit.TraitAttribute("FeatureTitle", "Advocacy and Legal Resources API Endpoints (FR-039)")]
        [Xunit.TraitAttribute("Description", "Find advocacy organizations")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "advocacy")]
        [Xunit.TraitAttribute("Category", "organizations")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void FindAdvocacyOrganizations()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "advocacy",
                    "organizations",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find advocacy organizations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 110
    testRunner.When("I send a GET request to \"/api/advocacy/resources/organizations?disability=autism&" +
                        "state=CA\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1975 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "services",
                            "contact"});
                table1975.AddRow(new string[] {
                            "Autism Speaks",
                            "Resources, toolkits",
                            "1-888-288-4762"});
                table1975.AddRow(new string[] {
                            "DREDF",
                            "Legal advocacy",
                            "info@dredf.org"});
                table1975.AddRow(new string[] {
                            "CID",
                            "Parent training",
                            "Local chapters"});
#line 112
    testRunner.And("organizations should include:", ((string)(null)), table1975, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create advocacy case file")]
        [Xunit.TraitAttribute("FeatureTitle", "Advocacy and Legal Resources API Endpoints (FR-039)")]
        [Xunit.TraitAttribute("Description", "Create advocacy case file")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "advocacy")]
        [Xunit.TraitAttribute("Category", "case")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateAdvocacyCaseFile()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "advocacy",
                    "case",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create advocacy case file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 120
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1976 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1976.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table1976.AddRow(new string[] {
                            "concerns",
                            "[\"services\", \"placement\"]"});
                table1976.AddRow(new string[] {
                            "documents",
                            "[\"iep-2023\", \"eval-2023\"]"});
                table1976.AddRow(new string[] {
                            "timeline",
                            "{\"started\": \"2024-01-01\"}"});
#line 121
    testRunner.When("I send a POST request to \"/api/advocacy/case-management/create\" with:", ((string)(null)), table1976, "When ");
#line hidden
#line 127
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
    testRunner.And("case file should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
    testRunner.And("document organization should be provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get legislative updates")]
        [Xunit.TraitAttribute("FeatureTitle", "Advocacy and Legal Resources API Endpoints (FR-039)")]
        [Xunit.TraitAttribute("Description", "Get legislative updates")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "advocacy")]
        [Xunit.TraitAttribute("Category", "legislation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetLegislativeUpdates()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "advocacy",
                    "legislation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get legislative updates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 133
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 134
    testRunner.When("I send a GET request to \"/api/advocacy/updates/legislation?impacting=special-educ" +
                        "ation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 135
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1977 = new TechTalk.SpecFlow.Table(new string[] {
                            "bill",
                            "status",
                            "impact"});
                table1977.AddRow(new string[] {
                            "HR-1234",
                            "committee",
                            "Funding increase"});
                table1977.AddRow(new string[] {
                            "SB-5678",
                            "passed",
                            "New requirements"});
                table1977.AddRow(new string[] {
                            "AB-9012",
                            "pending",
                            "Service definitions"});
#line 136
    testRunner.And("updates should include:", ((string)(null)), table1977, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AdvocacyAndLegalResourcesAPIEndpointsFR_039Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AdvocacyAndLegalResourcesAPIEndpointsFR_039Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
