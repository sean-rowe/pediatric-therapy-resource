// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Resources
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ResearchAndEvidenceAPIEndpointsFR_029Feature : object, Xunit.IClassFixture<ResearchAndEvidenceAPIEndpointsFR_029Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "research-evidence.feature"
#line hidden
        
        public ResearchAndEvidenceAPIEndpointsFR_029Feature(ResearchAndEvidenceAPIEndpointsFR_029Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/resources", "Research and Evidence API Endpoints (FR-029)", "  As a therapy professional\n  I want access to research and evidence-based inform" +
                    "ation\n  So that I can make informed clinical decisions", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search research database")]
        [Xunit.TraitAttribute("FeatureTitle", "Research and Evidence API Endpoints (FR-029)")]
        [Xunit.TraitAttribute("Description", "Search research database")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "research")]
        [Xunit.TraitAttribute("Category", "search")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SearchResearchDatabase()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "research",
                    "search",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search research database", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/research/search?topic=sensory-integration&years=202" +
                        "0-2024\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2062 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2062.AddRow(new string[] {
                            "papers",
                            "array"});
                table2062.AddRow(new string[] {
                            "totalResults",
                            "number"});
                table2062.AddRow(new string[] {
                            "evidenceLevels",
                            "object"});
                table2062.AddRow(new string[] {
                            "filters",
                            "object"});
#line 15
    testRunner.And("results should include:", ((string)(null)), table2062, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get research paper summary")]
        [Xunit.TraitAttribute("FeatureTitle", "Research and Evidence API Endpoints (FR-029)")]
        [Xunit.TraitAttribute("Description", "Get research paper summary")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "research")]
        [Xunit.TraitAttribute("Category", "summary")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetResearchPaperSummary()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "research",
                    "summary",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get research paper summary", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 25
    testRunner.When("I send a GET request to \"/api/research/paper/paper-123/summary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2063 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "content"});
                table2063.AddRow(new string[] {
                            "objectives",
                            "Study goals"});
                table2063.AddRow(new string[] {
                            "methods",
                            "Research design"});
                table2063.AddRow(new string[] {
                            "keyFindings",
                            "Main results"});
                table2063.AddRow(new string[] {
                            "clinicalImpact",
                            "Practice implications"});
                table2063.AddRow(new string[] {
                            "limitations",
                            "Study constraints"});
#line 27
    testRunner.And("summary should contain:", ((string)(null)), table2063, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check evidence level for intervention")]
        [Xunit.TraitAttribute("FeatureTitle", "Research and Evidence API Endpoints (FR-029)")]
        [Xunit.TraitAttribute("Description", "Check evidence level for intervention")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "research")]
        [Xunit.TraitAttribute("Category", "evidence")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CheckEvidenceLevelForIntervention()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "research",
                    "evidence",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check evidence level for intervention", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 38
    testRunner.When("I send a GET request to \"/api/research/evidence-levels/weighted-vests\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2064 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2064.AddRow(new string[] {
                            "evidenceLevel",
                            "\"Level II\""});
                table2064.AddRow(new string[] {
                            "studyCount",
                            "15"});
                table2064.AddRow(new string[] {
                            "recommendation",
                            "\"Moderate evidence\""});
                table2064.AddRow(new string[] {
                            "lastUpdated",
                            "\"2024-01-15\""});
                table2064.AddRow(new string[] {
                            "references",
                            "array"});
#line 40
    testRunner.And("the response should show:", ((string)(null)), table2064, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate proper citations")]
        [Xunit.TraitAttribute("FeatureTitle", "Research and Evidence API Endpoints (FR-029)")]
        [Xunit.TraitAttribute("Description", "Generate proper citations")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "research")]
        [Xunit.TraitAttribute("Category", "citation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateProperCitations()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "research",
                    "citation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate proper citations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2065 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2065.AddRow(new string[] {
                            "paperIds",
                            "[\"paper-1\", \"paper-2\"]"});
                table2065.AddRow(new string[] {
                            "style",
                            "APA"});
                table2065.AddRow(new string[] {
                            "format",
                            "text"});
#line 51
    testRunner.When("I send a POST request to \"/api/research/citation/generate\" with:", ((string)(null)), table2065, "When ");
#line hidden
#line 56
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
    testRunner.And("citations should be properly formatted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
    testRunner.And("ready for documentation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access best practice guidelines")]
        [Xunit.TraitAttribute("FeatureTitle", "Research and Evidence API Endpoints (FR-029)")]
        [Xunit.TraitAttribute("Description", "Access best practice guidelines")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "research")]
        [Xunit.TraitAttribute("Category", "guidelines")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessBestPracticeGuidelines()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "research",
                    "guidelines",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access best practice guidelines", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 63
    testRunner.When("I send a GET request to \"/api/research/practice-guidelines/autism\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2066 = new TechTalk.SpecFlow.Table(new string[] {
                            "source",
                            "recommendation",
                            "strength"});
                table2066.AddRow(new string[] {
                            "AOTA",
                            "Sensory interventions",
                            "Moderate"});
                table2066.AddRow(new string[] {
                            "ASHA",
                            "Social communication",
                            "Strong"});
                table2066.AddRow(new string[] {
                            "AAP",
                            "Early intervention",
                            "Strong"});
#line 65
    testRunner.And("guidelines should include:", ((string)(null)), table2066, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track intervention outcomes")]
        [Xunit.TraitAttribute("FeatureTitle", "Research and Evidence API Endpoints (FR-029)")]
        [Xunit.TraitAttribute("Description", "Track intervention outcomes")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "research")]
        [Xunit.TraitAttribute("Category", "outcomes")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackInterventionOutcomes()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "research",
                    "outcomes",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track intervention outcomes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 73
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2067 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2067.AddRow(new string[] {
                            "intervention",
                            "\"CIMT\""});
                table2067.AddRow(new string[] {
                            "measureUsed",
                            "\"QUEST\""});
                table2067.AddRow(new string[] {
                            "preScore",
                            "45"});
                table2067.AddRow(new string[] {
                            "postScore",
                            "62"});
                table2067.AddRow(new string[] {
                            "duration",
                            "\"6 weeks\""});
#line 74
    testRunner.When("I send a POST request to \"/api/research/outcomes/track\" with:", ((string)(null)), table2067, "When ");
#line hidden
#line 81
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
    testRunner.And("outcome should be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
    testRunner.And("contribute to evidence base", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Manage research alerts")]
        [Xunit.TraitAttribute("FeatureTitle", "Research and Evidence API Endpoints (FR-029)")]
        [Xunit.TraitAttribute("Description", "Manage research alerts")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "research")]
        [Xunit.TraitAttribute("Category", "alerts")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ManageResearchAlerts()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "research",
                    "alerts",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manage research alerts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 87
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 88
    testRunner.When("I send a GET request to \"/api/research/alerts/subscriptions\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2068 = new TechTalk.SpecFlow.Table(new string[] {
                            "topic",
                            "frequency",
                            "lastAlert"});
                table2068.AddRow(new string[] {
                            "sensory-processing",
                            "weekly",
                            "2024-01-15"});
                table2068.AddRow(new string[] {
                            "telehealth-OT",
                            "monthly",
                            "2024-01-01"});
#line 90
    testRunner.And("subscriptions should show:", ((string)(null)), table2068, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Request research review")]
        [Xunit.TraitAttribute("FeatureTitle", "Research and Evidence API Endpoints (FR-029)")]
        [Xunit.TraitAttribute("Description", "Request research review")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "research")]
        [Xunit.TraitAttribute("Category", "review")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RequestResearchReview()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "research",
                    "review",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request research review", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2069 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2069.AddRow(new string[] {
                            "question",
                            "\"Effectiveness of hippotherapy for CP\""});
                table2069.AddRow(new string[] {
                            "urgency",
                            "\"routine\""});
                table2069.AddRow(new string[] {
                            "purpose",
                            "\"Treatment planning\""});
#line 98
    testRunner.When("I send a POST request to \"/api/research/request-review\" with:", ((string)(null)), table2069, "When ");
#line hidden
#line 103
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
    testRunner.And("request should be queued", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
    testRunner.And("estimated completion should be provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access research-based protocols")]
        [Xunit.TraitAttribute("FeatureTitle", "Research and Evidence API Endpoints (FR-029)")]
        [Xunit.TraitAttribute("Description", "Access research-based protocols")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "research")]
        [Xunit.TraitAttribute("Category", "protocols")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessResearch_BasedProtocols()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "research",
                    "protocols",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access research-based protocols", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 110
    testRunner.When("I send a GET request to \"/api/research/protocols/constraint-induced-therapy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2070 = new TechTalk.SpecFlow.Table(new string[] {
                            "component",
                            "details"});
                table2070.AddRow(new string[] {
                            "inclusion",
                            "Criteria for use"});
                table2070.AddRow(new string[] {
                            "procedures",
                            "Step-by-step protocol"});
                table2070.AddRow(new string[] {
                            "dosage",
                            "Frequency and duration"});
                table2070.AddRow(new string[] {
                            "modifications",
                            "Adaptations allowed"});
                table2070.AddRow(new string[] {
                            "measures",
                            "Outcome tracking tools"});
#line 112
    testRunner.And("protocol should include:", ((string)(null)), table2070, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access journal club resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Research and Evidence API Endpoints (FR-029)")]
        [Xunit.TraitAttribute("Description", "Access journal club resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "research")]
        [Xunit.TraitAttribute("Category", "journal")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessJournalClubResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "research",
                    "journal",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access journal club resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 122
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 123
    testRunner.When("I send a GET request to \"/api/research/journal-club?month=2024-01\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2071 = new TechTalk.SpecFlow.Table(new string[] {
                            "resource",
                            "content"});
                table2071.AddRow(new string[] {
                            "featuredPaper",
                            "Current month\'s selection"});
                table2071.AddRow(new string[] {
                            "discussion",
                            "Guided questions"});
                table2071.AddRow(new string[] {
                            "criticalAppraisal",
                            "Evaluation tools"});
                table2071.AddRow(new string[] {
                            "ceuCredits",
                            "Available credits"});
#line 125
    testRunner.And("resources should include:", ((string)(null)), table2071, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ResearchAndEvidenceAPIEndpointsFR_029Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ResearchAndEvidenceAPIEndpointsFR_029Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
