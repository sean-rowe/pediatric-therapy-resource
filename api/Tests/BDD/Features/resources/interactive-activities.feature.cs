// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Resources
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class InteractiveDigitalActivitiesAPIEndpointsFR_009FR_042Feature : object, Xunit.IClassFixture<InteractiveDigitalActivitiesAPIEndpointsFR_009FR_042Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "interactive-activities.feature"
#line hidden
        
        public InteractiveDigitalActivitiesAPIEndpointsFR_009FR_042Feature(InteractiveDigitalActivitiesAPIEndpointsFR_009FR_042Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/resources", "Interactive Digital Activities API Endpoints (FR-009, FR-042)", "  As a therapy professional\n  I want to create and manage interactive digital act" +
                    "ivities\n  So that students can practice independently with immediate feedback", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List available digital activities")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "List available digital activities")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ListAvailableDigitalActivities()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List available digital activities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/activities?type=interactive&skillArea=articulation\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2011 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2011.AddRow(new string[] {
                            "activities",
                            "array"});
                table2011.AddRow(new string[] {
                            "total",
                            "number"});
                table2011.AddRow(new string[] {
                            "filters",
                            "object"});
#line 15
    testRunner.And("the response should contain:", ((string)(null)), table2011, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2012 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2012.AddRow(new string[] {
                            "activityId",
                            "string"});
                table2012.AddRow(new string[] {
                            "title",
                            "string"});
                table2012.AddRow(new string[] {
                            "activityType",
                            "string"});
                table2012.AddRow(new string[] {
                            "skillAreas",
                            "array"});
                table2012.AddRow(new string[] {
                            "gradeLevel",
                            "array"});
                table2012.AddRow(new string[] {
                            "duration",
                            "number"});
                table2012.AddRow(new string[] {
                            "selfGrading",
                            "boolean"});
                table2012.AddRow(new string[] {
                            "dataCollection",
                            "boolean"});
#line 20
    testRunner.And("each activity should contain:", ((string)(null)), table2012, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get digital activity details")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Get digital activity details")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "details")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetDigitalActivityDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "details",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get digital activity details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 34
    testRunner.Given("digital activity \"activity-123\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
    testRunner.When("I send a GET request to \"/api/activities/activity-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2013 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2013.AddRow(new string[] {
                            "activityId",
                            "string"});
                table2013.AddRow(new string[] {
                            "title",
                            "string"});
                table2013.AddRow(new string[] {
                            "instructions",
                            "string"});
                table2013.AddRow(new string[] {
                            "settings",
                            "object"});
                table2013.AddRow(new string[] {
                            "interactionTypes",
                            "array"});
                table2013.AddRow(new string[] {
                            "feedbackMode",
                            "string"});
                table2013.AddRow(new string[] {
                            "scoringCriteria",
                            "object"});
                table2013.AddRow(new string[] {
                            "customizationOptions",
                            "object"});
#line 37
    testRunner.And("the response should contain:", ((string)(null)), table2013, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create new digital activity")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Create new digital activity")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateNewDigitalActivity()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "creation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create new digital activity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2014 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2014.AddRow(new string[] {
                            "title",
                            "R Sound Matching Game"});
                table2014.AddRow(new string[] {
                            "activityType",
                            "drag-drop"});
                table2014.AddRow(new string[] {
                            "skillAreas",
                            "[\"articulation\", \"phonology\"]"});
                table2014.AddRow(new string[] {
                            "targetAge",
                            "5-8"});
                table2014.AddRow(new string[] {
                            "items",
                            "[{\"word\": \"rabbit\", \"audio\": \"rabbit.mp3\"}]"});
                table2014.AddRow(new string[] {
                            "feedbackType",
                            "immediate"});
                table2014.AddRow(new string[] {
                            "scoringMethod",
                            "percentage"});
#line 51
    testRunner.When("I send a POST request to \"/api/activities\" with:", ((string)(null)), table2014, "When ");
#line hidden
#line 60
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2015 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2015.AddRow(new string[] {
                            "activityId",
                            "string"});
                table2015.AddRow(new string[] {
                            "editUrl",
                            "string"});
                table2015.AddRow(new string[] {
                            "previewUrl",
                            "string"});
#line 61
    testRunner.And("the response should contain:", ((string)(null)), table2015, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update digital activity")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Update digital activity")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "update")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateDigitalActivity()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "update",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update digital activity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 70
    testRunner.Given("I own activity \"activity-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2016 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2016.AddRow(new string[] {
                            "title",
                            "Updated R Sound Game"});
                table2016.AddRow(new string[] {
                            "difficulty",
                            "adaptive"});
                table2016.AddRow(new string[] {
                            "maxAttempts",
                            "3"});
#line 71
    testRunner.When("I send a PUT request to \"/api/activities/activity-123\" with:", ((string)(null)), table2016, "When ");
#line hidden
#line 76
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
    testRunner.And("the activity should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
    testRunner.And("assigned students should see updates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Assign activity to students")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Assign activity to students")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "assignment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AssignActivityToStudents()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "assignment",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign activity to students", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 83
    testRunner.Given("activity \"activity-123\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2017 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2017.AddRow(new string[] {
                            "studentIds",
                            "[\"student-123\", \"student-456\"]"});
                table2017.AddRow(new string[] {
                            "dueDate",
                            "2024-01-29"});
                table2017.AddRow(new string[] {
                            "attempts",
                            "unlimited"});
                table2017.AddRow(new string[] {
                            "instructions",
                            "Complete 3 times this week"});
#line 84
    testRunner.When("I send a POST request to \"/api/activities/activity-123/assign\" with:", ((string)(null)), table2017, "When ");
#line hidden
#line 90
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
    testRunner.And("activities should be assigned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
    testRunner.And("students should receive notifications", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get activity results")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Get activity results")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "results")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetActivityResults()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "results",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get activity results", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 97
    testRunner.Given("students completed activity \"activity-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
    testRunner.When("I send a GET request to \"/api/activities/activity-123/results\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2018 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2018.AddRow(new string[] {
                            "completions",
                            "array"});
                table2018.AddRow(new string[] {
                            "averageScore",
                            "number"});
                table2018.AddRow(new string[] {
                            "averageTime",
                            "number"});
                table2018.AddRow(new string[] {
                            "commonErrors",
                            "array"});
                table2018.AddRow(new string[] {
                            "masteryRate",
                            "number"});
#line 100
    testRunner.And("the response should contain:", ((string)(null)), table2018, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Student attempts activity")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Student attempts activity")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "student-attempt")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void StudentAttemptsActivity()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "student-attempt",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Student attempts activity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 111
    testRunner.Given("I am a student with activity \"activity-123\" assigned", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2019 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2019.AddRow(new string[] {
                            "responses",
                            "[{\"itemId\": \"1\", \"answer\": \"rabbit\", \"time\": 5.2}]"});
                table2019.AddRow(new string[] {
                            "startTime",
                            "2024-01-22T10:00:00Z"});
                table2019.AddRow(new string[] {
                            "endTime",
                            "2024-01-22T10:15:00Z"});
                table2019.AddRow(new string[] {
                            "deviceInfo",
                            "{\"platform\": \"iPad\", \"os\": \"iOS 16\"}"});
#line 112
    testRunner.When("I send a POST request to \"/api/activities/activity-123/attempt\" with:", ((string)(null)), table2019, "When ");
#line hidden
#line 118
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2020 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2020.AddRow(new string[] {
                            "score",
                            "number"});
                table2020.AddRow(new string[] {
                            "feedback",
                            "array"});
                table2020.AddRow(new string[] {
                            "accuracy",
                            "number"});
                table2020.AddRow(new string[] {
                            "nextActivity",
                            "string"});
#line 119
    testRunner.And("the response should contain:", ((string)(null)), table2020, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get customization options")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Get customization options")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "customization")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetCustomizationOptions()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "customization",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get customization options", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 128
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 129
    testRunner.Given("activity \"activity-123\" is customizable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 130
    testRunner.When("I send a GET request to \"/api/activities/activity-123/customize\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2021 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2021.AddRow(new string[] {
                            "hidableElements",
                            "array"});
                table2021.AddRow(new string[] {
                            "difficultyOptions",
                            "array"});
                table2021.AddRow(new string[] {
                            "contentOptions",
                            "array"});
                table2021.AddRow(new string[] {
                            "visualOptions",
                            "object"});
                table2021.AddRow(new string[] {
                            "audioOptions",
                            "object"});
#line 132
    testRunner.And("the response should contain:", ((string)(null)), table2021, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Apply customizations for student")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Apply customizations for student")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "apply-customization")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ApplyCustomizationsForStudent()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "apply-customization",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apply customizations for student", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 142
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2022 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2022.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2022.AddRow(new string[] {
                            "hideElements",
                            "[\"timer\", \"score\"]"});
                table2022.AddRow(new string[] {
                            "fontSize",
                            "large"});
                table2022.AddRow(new string[] {
                            "audioFeedback",
                            "true"});
                table2022.AddRow(new string[] {
                            "reducedItems",
                            "10"});
#line 143
    testRunner.When("I send a PUT request to \"/api/activities/activity-123/customize\" with:", ((string)(null)), table2022, "When ");
#line hidden
#line 150
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 151
    testRunner.And("customizations should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
    testRunner.And("apply only to specified student", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate activity with AI")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Generate activity with AI")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "ai-generation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateActivityWithAI()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "ai-generation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate activity with AI", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 156
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2023 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2023.AddRow(new string[] {
                            "activityType",
                            "memory-match"});
                table2023.AddRow(new string[] {
                            "content",
                            "CVC words with \'at\' family"});
                table2023.AddRow(new string[] {
                            "pairs",
                            "6"});
                table2023.AddRow(new string[] {
                            "visuals",
                            "simple-illustrations"});
#line 157
    testRunner.When("I send a POST request to \"/api/activities/generate\" with:", ((string)(null)), table2023, "When ");
#line hidden
#line 163
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 164
    testRunner.And("AI should generate activity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
    testRunner.And("preview should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Duplicate and modify activity")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Duplicate and modify activity")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "duplication")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DuplicateAndModifyActivity()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "duplication",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate and modify activity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 169
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 170
    testRunner.Given("activity \"activity-123\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2024 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2024.AddRow(new string[] {
                            "newTitle",
                            "R Sound Game - Level 2"});
                table2024.AddRow(new string[] {
                            "modifications",
                            "{\"difficulty\": \"harder\", \"items\": \"+10\"}"});
#line 171
    testRunner.When("I send a POST request to \"/api/activities/activity-123/duplicate\" with:", ((string)(null)), table2024, "When ");
#line hidden
#line 175
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 176
    testRunner.And("new activity should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
    testRunner.And("maintain original structure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get activity templates")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Get activity templates")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "templates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetActivityTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "templates",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get activity templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 181
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 182
    testRunner.When("I send a GET request to \"/api/activities/templates?category=articulation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 183
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2025 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2025.AddRow(new string[] {
                            "templates",
                            "array"});
                table2025.AddRow(new string[] {
                            "categories",
                            "array"});
#line 184
    testRunner.And("the response should contain:", ((string)(null)), table2025, "And ");
#line hidden
#line 188
    testRunner.And("each template should be customizable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Enable offline mode for activity")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Enable offline mode for activity")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "offline")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnableOfflineModeForActivity()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "offline",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enable offline mode for activity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 192
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2026 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2026.AddRow(new string[] {
                            "studentIds",
                            "[\"student-123\", \"student-456\"]"});
                table2026.AddRow(new string[] {
                            "duration",
                            "7-days"});
#line 193
    testRunner.When("I send a POST request to \"/api/activities/activity-123/offline\" with:", ((string)(null)), table2026, "When ");
#line hidden
#line 197
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 198
    testRunner.And("activity should be downloadable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
    testRunner.And("work without internet connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get detailed activity analytics")]
        [Xunit.TraitAttribute("FeatureTitle", "Interactive Digital Activities API Endpoints (FR-009, FR-042)")]
        [Xunit.TraitAttribute("Description", "Get detailed activity analytics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "activities")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetDetailedActivityAnalytics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "activities",
                    "analytics",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get detailed activity analytics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 203
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 204
    testRunner.Given("activity \"activity-123\" has usage data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 205
    testRunner.When("I send a GET request to \"/api/activities/activity-123/analytics\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 206
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2027 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2027.AddRow(new string[] {
                            "usageStats",
                            "object"});
                table2027.AddRow(new string[] {
                            "performanceMetrics",
                            "object"});
                table2027.AddRow(new string[] {
                            "engagementData",
                            "object"});
                table2027.AddRow(new string[] {
                            "errorPatterns",
                            "array"});
                table2027.AddRow(new string[] {
                            "recommendations",
                            "array"});
#line 207
    testRunner.And("the response should contain:", ((string)(null)), table2027, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                InteractiveDigitalActivitiesAPIEndpointsFR_009FR_042Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                InteractiveDigitalActivitiesAPIEndpointsFR_009FR_042Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
