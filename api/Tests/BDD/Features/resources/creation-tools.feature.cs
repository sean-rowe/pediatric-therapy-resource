// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Resources
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreationToolsAPIEndpointsFR_026Feature : object, Xunit.IClassFixture<CreationToolsAPIEndpointsFR_026Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "creation-tools.feature"
#line hidden
        
        public CreationToolsAPIEndpointsFR_026Feature(CreationToolsAPIEndpointsFR_026Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/resources", "Creation Tools API Endpoints (FR-026)", "  As a therapy professional\n  I want template-based resource creation tools\n  So " +
                    "that I can create customized materials efficiently", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Browse creation templates")]
        [Xunit.TraitAttribute("FeatureTitle", "Creation Tools API Endpoints (FR-026)")]
        [Xunit.TraitAttribute("Description", "Browse creation templates")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "templates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BrowseCreationTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "creation",
                    "templates",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Browse creation templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/creation/templates?category=worksheets\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2024 = new TechTalk.SpecFlow.Table(new string[] {
                            "templateId",
                            "name",
                            "customizable"});
                table2024.AddRow(new string[] {
                            "tmpl-001",
                            "Tracing Lines",
                            "text, images, difficulty"});
                table2024.AddRow(new string[] {
                            "tmpl-002",
                            "Word Search",
                            "words, size, theme"});
                table2024.AddRow(new string[] {
                            "tmpl-003",
                            "Bingo Cards",
                            "items, layout, size"});
                table2024.AddRow(new string[] {
                            "tmpl-004",
                            "Visual Schedule",
                            "activities, times"});
#line 15
    testRunner.And("templates should include:", ((string)(null)), table2024, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customize template with drag-drop editor")]
        [Xunit.TraitAttribute("FeatureTitle", "Creation Tools API Endpoints (FR-026)")]
        [Xunit.TraitAttribute("Description", "Customize template with drag-drop editor")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "customize")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CustomizeTemplateWithDrag_DropEditor()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "creation",
                    "customize",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customize template with drag-drop editor", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2025 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2025.AddRow(new string[] {
                            "templateId",
                            "tmpl-word-search"});
                table2025.AddRow(new string[] {
                            "customization",
                            "{\"words\": [\"cat\", \"dog\", \"bird\"], \"size\": \"10x10\"}"});
                table2025.AddRow(new string[] {
                            "theme",
                            "animals"});
                table2025.AddRow(new string[] {
                            "difficulty",
                            "easy"});
#line 25
    testRunner.When("I send a POST request to \"/api/creation/customize\" with:", ((string)(null)), table2025, "When ");
#line hidden
#line 31
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2026 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2026.AddRow(new string[] {
                            "projectId",
                            "string"});
                table2026.AddRow(new string[] {
                            "previewUrl",
                            "string"});
                table2026.AddRow(new string[] {
                            "editUrl",
                            "string"});
#line 32
    testRunner.And("the response should contain:", ((string)(null)), table2026, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access copyright-cleared image library")]
        [Xunit.TraitAttribute("FeatureTitle", "Creation Tools API Endpoints (FR-026)")]
        [Xunit.TraitAttribute("Description", "Access copyright-cleared image library")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "images")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessCopyright_ClearedImageLibrary()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "creation",
                    "images",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access copyright-cleared image library", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 41
    testRunner.When("I send a GET request to \"/api/creation/image-library?search=emotions\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2027 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2027.AddRow(new string[] {
                            "copyrightFree",
                            "true"});
                table2027.AddRow(new string[] {
                            "resolution",
                            "high"});
                table2027.AddRow(new string[] {
                            "formats",
                            "[\"png\", \"svg\"]"});
                table2027.AddRow(new string[] {
                            "categories",
                            "[\"faces\", \"expressions\"]"});
#line 43
    testRunner.And("images should be:", ((string)(null)), table2027, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Apply brand customization to materials")]
        [Xunit.TraitAttribute("FeatureTitle", "Creation Tools API Endpoints (FR-026)")]
        [Xunit.TraitAttribute("Description", "Apply brand customization to materials")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "branding")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ApplyBrandCustomizationToMaterials()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "creation",
                    "branding",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Apply brand customization to materials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2028 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2028.AddRow(new string[] {
                            "projectId",
                            "proj-123"});
                table2028.AddRow(new string[] {
                            "brandElements",
                            "{\"logo\": \"url\", \"colors\": [\"#FF5733\", \"#33FF57\"]}"});
                table2028.AddRow(new string[] {
                            "position",
                            "top-right"});
                table2028.AddRow(new string[] {
                            "opacity",
                            "0.8"});
#line 53
    testRunner.When("I send a POST request to \"/api/creation/brand/apply\" with:", ((string)(null)), table2028, "When ");
#line hidden
#line 59
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
    testRunner.And("materials should include brand elements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.And("consistency should be maintained", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create collaborative template")]
        [Xunit.TraitAttribute("FeatureTitle", "Creation Tools API Endpoints (FR-026)")]
        [Xunit.TraitAttribute("Description", "Create collaborative template")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "collaborative")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateCollaborativeTemplate()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "creation",
                    "collaborative",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create collaborative template", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2029 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2029.AddRow(new string[] {
                            "projectId",
                            "proj-123"});
                table2029.AddRow(new string[] {
                            "collaborators",
                            "[\"therapist2@clinic.com\"]"});
                table2029.AddRow(new string[] {
                            "permissions",
                            "[\"edit\", \"comment\"]"});
                table2029.AddRow(new string[] {
                            "message",
                            "\"Let\'s work on this together\""});
#line 66
    testRunner.When("I send a POST request to \"/api/creation/collaborative/invite\" with:", ((string)(null)), table2029, "When ");
#line hidden
#line 72
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
    testRunner.And("invitations should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
    testRunner.And("real-time collaboration should be enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Save template version")]
        [Xunit.TraitAttribute("FeatureTitle", "Creation Tools API Endpoints (FR-026)")]
        [Xunit.TraitAttribute("Description", "Save template version")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "versioning")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SaveTemplateVersion()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "creation",
                    "versioning",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Save template version", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2030 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2030.AddRow(new string[] {
                            "versionName",
                            "\"Spring 2024 Update\""});
                table2030.AddRow(new string[] {
                            "changes",
                            "\"Added new vocabulary\""});
                table2030.AddRow(new string[] {
                            "autoSave",
                            "true"});
#line 79
    testRunner.When("I send a PUT request to \"/api/creation/projects/proj-123/version\" with:", ((string)(null)), table2030, "When ");
#line hidden
#line 84
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
    testRunner.And("version should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.And("previous versions should be accessible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Export created materials")]
        [Xunit.TraitAttribute("FeatureTitle", "Creation Tools API Endpoints (FR-026)")]
        [Xunit.TraitAttribute("Description", "Export created materials")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "export")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ExportCreatedMaterials()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "creation",
                    "export",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export created materials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2031 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2031.AddRow(new string[] {
                            "projectId",
                            "proj-123"});
                table2031.AddRow(new string[] {
                            "format",
                            "pdf"});
                table2031.AddRow(new string[] {
                            "quality",
                            "print"});
                table2031.AddRow(new string[] {
                            "pages",
                            "all"});
#line 91
    testRunner.When("I send a POST request to \"/api/creation/export\" with:", ((string)(null)), table2031, "When ");
#line hidden
#line 97
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2032 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2032.AddRow(new string[] {
                            "downloadUrl",
                            "string"});
                table2032.AddRow(new string[] {
                            "fileSize",
                            "number"});
                table2032.AddRow(new string[] {
                            "printReady",
                            "true"});
#line 98
    testRunner.And("export should include:", ((string)(null)), table2032, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access therapy-appropriate fonts")]
        [Xunit.TraitAttribute("FeatureTitle", "Creation Tools API Endpoints (FR-026)")]
        [Xunit.TraitAttribute("Description", "Access therapy-appropriate fonts")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "fonts")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessTherapy_AppropriateFonts()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "creation",
                    "fonts",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access therapy-appropriate fonts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 107
    testRunner.When("I send a GET request to \"/api/creation/fonts?category=handwriting\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2033 = new TechTalk.SpecFlow.Table(new string[] {
                            "fontFamily",
                            "features"});
                table2033.AddRow(new string[] {
                            "DNealian",
                            "Handwriting practice"});
                table2033.AddRow(new string[] {
                            "ComicSans",
                            "Friendly, readable"});
                table2033.AddRow(new string[] {
                            "OpenDyslexic",
                            "Dyslexia-friendly"});
                table2033.AddRow(new string[] {
                            "SignLanguage",
                            "ASL characters"});
#line 109
    testRunner.And("fonts should include:", ((string)(null)), table2033, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Merge multiple created resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Creation Tools API Endpoints (FR-026)")]
        [Xunit.TraitAttribute("Description", "Merge multiple created resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "merge")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MergeMultipleCreatedResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "creation",
                    "merge",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Merge multiple created resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 118
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2034 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2034.AddRow(new string[] {
                            "projectIds",
                            "[\"proj-1\", \"proj-2\", \"proj-3\"]"});
                table2034.AddRow(new string[] {
                            "order",
                            "sequential"});
                table2034.AddRow(new string[] {
                            "pageNumbers",
                            "true"});
                table2034.AddRow(new string[] {
                            "tableOfContents",
                            "true"});
#line 119
    testRunner.When("I send a POST request to \"/api/creation/merge-documents\" with:", ((string)(null)), table2034, "When ");
#line hidden
#line 125
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
    testRunner.And("merged document should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
    testRunner.And("formatting should be preserved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get AI assistance for content creation")]
        [Xunit.TraitAttribute("FeatureTitle", "Creation Tools API Endpoints (FR-026)")]
        [Xunit.TraitAttribute("Description", "Get AI assistance for content creation")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "ai-assist")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetAIAssistanceForContentCreation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "creation",
                    "ai-assist",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get AI assistance for content creation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 131
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2035 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2035.AddRow(new string[] {
                            "projectId",
                            "proj-123"});
                table2035.AddRow(new string[] {
                            "requestType",
                            "\"suggest-content\""});
                table2035.AddRow(new string[] {
                            "context",
                            "\"working on /r/ sounds\""});
                table2035.AddRow(new string[] {
                            "studentAge",
                            "6"});
#line 132
    testRunner.When("I send a POST request to \"/api/creation/ai-assist\" with:", ((string)(null)), table2035, "When ");
#line hidden
#line 138
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2036 = new TechTalk.SpecFlow.Table(new string[] {
                            "suggestion",
                            "type"});
                table2036.AddRow(new string[] {
                            "words",
                            "Age-appropriate /r/ words"});
                table2036.AddRow(new string[] {
                            "sentences",
                            "Practice phrases"});
                table2036.AddRow(new string[] {
                            "activities",
                            "Complementary exercises"});
#line 139
    testRunner.And("AI should suggest:", ((string)(null)), table2036, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreationToolsAPIEndpointsFR_026Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreationToolsAPIEndpointsFR_026Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
