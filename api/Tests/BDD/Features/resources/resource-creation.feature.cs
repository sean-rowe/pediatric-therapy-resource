// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Resources
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ResourceCreationAPIEndpointsFR_005Feature : object, Xunit.IClassFixture<ResourceCreationAPIEndpointsFR_005Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "resource-creation.feature"
#line hidden
        
        public ResourceCreationAPIEndpointsFR_005Feature(ResourceCreationAPIEndpointsFR_005Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/resources", "Resource Creation API Endpoints (FR-005)", "  As a content creator\n  I want to create and upload therapy resources\n  So that " +
                    "I can share materials with other professionals", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"creator@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("I have content creation permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create a new resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Create a new resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateANewResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "creation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a new resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2072 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2072.AddRow(new string[] {
                            "title",
                            "Fine Motor Tracing Worksheets"});
                table2072.AddRow(new string[] {
                            "description",
                            "Age-appropriate tracing activities"});
                table2072.AddRow(new string[] {
                            "skillAreas",
                            "[\"fine-motor\", \"pre-writing\"]"});
                table2072.AddRow(new string[] {
                            "gradeLevels",
                            "[\"prek\", \"kindergarten\"]"});
                table2072.AddRow(new string[] {
                            "resourceType",
                            "worksheet"});
                table2072.AddRow(new string[] {
                            "format",
                            "pdf"});
                table2072.AddRow(new string[] {
                            "language",
                            "en"});
                table2072.AddRow(new string[] {
                            "tags",
                            "[\"tracing\", \"pencil-grip\"]"});
#line 14
    testRunner.When("I send a POST request to \"/api/resources\" with:", ((string)(null)), table2072, "When ");
#line hidden
#line 24
    testRunner.And("I attach file \"tracing-worksheets.pdf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2073 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2073.AddRow(new string[] {
                            "resourceId",
                            "string"});
                table2073.AddRow(new string[] {
                            "status",
                            "string"});
                table2073.AddRow(new string[] {
                            "uploadUrl",
                            "string"});
#line 26
    testRunner.And("the response should contain:", ((string)(null)), table2073, "And ");
#line hidden
#line 31
    testRunner.And("the resource should be created in draft status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate required fields")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Validate required fields")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "creation")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ValidateRequiredFields()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "creation",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate required fields", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2074 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2074.AddRow(new string[] {
                            "title",
                            ""});
#line 35
    testRunner.When("I send a POST request to \"/api/resources\" with:", ((string)(null)), table2074, "When ");
#line hidden
#line 38
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.And("the response should contain error \"Title is required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Upload resource file")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Upload resource file")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "upload")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UploadResourceFile()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "upload",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload resource file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 44
    testRunner.Given("I have created resource \"res-123\" in draft status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
    testRunner.When("I send a POST request to \"/api/resources/res-123/upload\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2075 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2075.AddRow(new string[] {
                            "contentType",
                            "application/pdf"});
                table2075.AddRow(new string[] {
                            "fileSize",
                            "2048000"});
#line 46
    testRunner.And("I attach file \"worksheet.pdf\" with:", ((string)(null)), table2075, "And ");
#line hidden
#line 50
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2076 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2076.AddRow(new string[] {
                            "uploadId",
                            "string"});
                table2076.AddRow(new string[] {
                            "status",
                            "string"});
                table2076.AddRow(new string[] {
                            "processingId",
                            "string"});
#line 51
    testRunner.And("the response should contain:", ((string)(null)), table2076, "And ");
#line hidden
#line 56
    testRunner.And("file processing should begin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate file size limits")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Validate file size limits")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "upload")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ValidateFileSizeLimits()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "upload",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate file size limits", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 60
    testRunner.Given("I have created resource \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 61
    testRunner.When("I send a POST request to \"/api/resources/res-123/upload\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
    testRunner.And("I attach file larger than 50MB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
    testRunner.And("the response should contain error \"File size exceeds 50MB limit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update resource metadata")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Update resource metadata")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "update")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateResourceMetadata()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "update",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update resource metadata", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 69
    testRunner.Given("I own resource \"res-123\" in draft status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2077 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2077.AddRow(new string[] {
                            "title",
                            "Updated Fine Motor Worksheets"});
                table2077.AddRow(new string[] {
                            "description",
                            "Now includes cutting practice"});
                table2077.AddRow(new string[] {
                            "tags",
                            "[\"tracing\", \"cutting\", \"scissors\"]"});
#line 70
    testRunner.When("I send a PUT request to \"/api/resources/res-123\" with:", ((string)(null)), table2077, "When ");
#line hidden
#line 75
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
    testRunner.And("the resource metadata should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
    testRunner.And("version history should be maintained", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot update published resource owned by others")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Cannot update published resource owned by others")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "update")]
        [Xunit.TraitAttribute("Category", "authorization")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CannotUpdatePublishedResourceOwnedByOthers()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "update",
                    "authorization",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot update published resource owned by others", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 81
    testRunner.Given("resource \"res-456\" is owned by another user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 82
    testRunner.And("the resource is published", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
    testRunner.When("I send a PUT request to \"/api/resources/res-456\" with any data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
    testRunner.Then("the response status should be 403", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
    testRunner.And("the response should contain error \"Access denied\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate resource preview")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Generate resource preview")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "preview")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateResourcePreview()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "preview",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate resource preview", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 90
    testRunner.Given("I have uploaded resource \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2078 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2078.AddRow(new string[] {
                            "pages",
                            "[1,2,3]"});
                table2078.AddRow(new string[] {
                            "quality",
                            "high"});
#line 91
    testRunner.When("I send a POST request to \"/api/resources/res-123/preview\" with:", ((string)(null)), table2078, "When ");
#line hidden
#line 95
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2079 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2079.AddRow(new string[] {
                            "previewUrls",
                            "array"});
                table2079.AddRow(new string[] {
                            "thumbnailUrl",
                            "string"});
#line 96
    testRunner.And("the response should contain:", ((string)(null)), table2079, "And ");
#line hidden
#line 100
    testRunner.And("preview images should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Publish resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Publish resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "publish")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PublishResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "publish",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Publish resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 105
    testRunner.Given("I own resource \"res-123\" in draft status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 106
    testRunner.And("the resource has passed quality checks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2080 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2080.AddRow(new string[] {
                            "visibility",
                            "public"});
                table2080.AddRow(new string[] {
                            "licensing",
                            "single-classroom"});
                table2080.AddRow(new string[] {
                            "allowDownload",
                            "true"});
                table2080.AddRow(new string[] {
                            "requireApproval",
                            "false"});
#line 107
    testRunner.When("I send a POST request to \"/api/resources/res-123/publish\" with:", ((string)(null)), table2080, "When ");
#line hidden
#line 113
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
    testRunner.And("the resource status should be \"published\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.And("the resource should be searchable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cannot publish incomplete resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Cannot publish incomplete resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "publish")]
        [Xunit.TraitAttribute("Category", "validation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CannotPublishIncompleteResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "publish",
                    "validation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot publish incomplete resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 118
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 119
    testRunner.Given("I own resource \"res-123\" without uploaded file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 120
    testRunner.When("I send a POST request to \"/api/resources/res-123/publish\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
    testRunner.Then("the response status should be 400", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
    testRunner.And("the response should contain error \"Resource file is required\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete draft resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Delete draft resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "deletion")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DeleteDraftResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "deletion",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete draft resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 126
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 127
    testRunner.Given("I own resource \"res-123\" in draft status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 128
    testRunner.When("I send a DELETE request to \"/api/resources/res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
    testRunner.And("the resource should be deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
    testRunner.And("associated files should be removed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Soft delete published resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Soft delete published resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "deletion")]
        [Xunit.TraitAttribute("Category", "soft-delete")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SoftDeletePublishedResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "deletion",
                    "soft-delete",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Soft delete published resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 134
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 135
    testRunner.Given("I own published resource \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 136
    testRunner.When("I send a DELETE request to \"/api/resources/res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 137
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
    testRunner.And("the resource should be marked as deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
    testRunner.And("existing downloads should still work", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
    testRunner.And("the resource should not appear in searches", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create multiple resources in batch")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Create multiple resources in batch")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "batch")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateMultipleResourcesInBatch()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "batch",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create multiple resources in batch", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 144
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2081 = new TechTalk.SpecFlow.Table(new string[] {
                            "resources",
                            "array of 5 resource objects"});
#line 145
    testRunner.When("I send a POST request to \"/api/resources/batch\" with:", ((string)(null)), table2081, "When ");
#line hidden
#line 147
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2082 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2082.AddRow(new string[] {
                            "created",
                            "array"});
                table2082.AddRow(new string[] {
                            "failed",
                            "array"});
                table2082.AddRow(new string[] {
                            "batchId",
                            "string"});
#line 148
    testRunner.And("the response should contain:", ((string)(null)), table2082, "And ");
#line hidden
#line 153
    testRunner.And("batch processing should begin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Duplicate existing resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Duplicate existing resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "duplication")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DuplicateExistingResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "duplication",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Duplicate existing resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 157
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 158
    testRunner.Given("I own resource \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2083 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2083.AddRow(new string[] {
                            "title",
                            "Copy of Original Resource"});
                table2083.AddRow(new string[] {
                            "copyFiles",
                            "true"});
#line 159
    testRunner.When("I send a POST request to \"/api/resources/res-123/duplicate\" with:", ((string)(null)), table2083, "When ");
#line hidden
#line 163
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2084 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2084.AddRow(new string[] {
                            "newResourceId",
                            "string"});
                table2084.AddRow(new string[] {
                            "status",
                            "string"});
#line 164
    testRunner.And("the response should contain:", ((string)(null)), table2084, "And ");
#line hidden
#line 168
    testRunner.And("all files should be copied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Convert resource format")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Convert resource format")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "conversion")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConvertResourceFormat()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "conversion",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert resource format", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 172
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 173
    testRunner.Given("I own PDF resource \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2085 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2085.AddRow(new string[] {
                            "toFormat",
                            "interactive"});
                table2085.AddRow(new string[] {
                            "options",
                            "{\"editable\": true}"});
#line 174
    testRunner.When("I send a POST request to \"/api/resources/res-123/convert\" with:", ((string)(null)), table2085, "When ");
#line hidden
#line 178
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2086 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2086.AddRow(new string[] {
                            "jobId",
                            "string"});
                table2086.AddRow(new string[] {
                            "status",
                            "string"});
                table2086.AddRow(new string[] {
                            "estimatedTime",
                            "number"});
#line 179
    testRunner.And("the response should contain:", ((string)(null)), table2086, "And ");
#line hidden
#line 184
    testRunner.And("conversion job should be queued", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate resource quality")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Validate resource quality")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "quality")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ValidateResourceQuality()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "quality",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate resource quality", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 188
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 189
    testRunner.Given("I have uploaded resource \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 190
    testRunner.When("I send a GET request to \"/api/resources/res-123/validation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 191
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2087 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2087.AddRow(new string[] {
                            "spellCheck",
                            "object"});
                table2087.AddRow(new string[] {
                            "readabilityScore",
                            "number"});
                table2087.AddRow(new string[] {
                            "accessibility",
                            "object"});
                table2087.AddRow(new string[] {
                            "clinicalAccuracy",
                            "object"});
                table2087.AddRow(new string[] {
                            "suggestions",
                            "array"});
#line 192
    testRunner.And("the response should contain:", ((string)(null)), table2087, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Import resources from external source")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Import resources from external source")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "import")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ImportResourcesFromExternalSource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "import",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import resources from external source", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 202
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2088 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2088.AddRow(new string[] {
                            "source",
                            "google-drive"});
                table2088.AddRow(new string[] {
                            "folderId",
                            "1234567890"});
                table2088.AddRow(new string[] {
                            "mapping",
                            "{\"title\": \"name\", \"tags\": \"labels\"}"});
#line 203
    testRunner.When("I send a POST request to \"/api/resources/import\" with:", ((string)(null)), table2088, "When ");
#line hidden
#line 208
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2089 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2089.AddRow(new string[] {
                            "importId",
                            "string"});
                table2089.AddRow(new string[] {
                            "status",
                            "string"});
                table2089.AddRow(new string[] {
                            "itemCount",
                            "number"});
#line 209
    testRunner.And("the response should contain:", ((string)(null)), table2089, "And ");
#line hidden
#line 214
    testRunner.And("import job should be initiated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add translation to resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Add translation to resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "multilingual")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AddTranslationToResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "multilingual",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add translation to resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 218
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 219
    testRunner.Given("I own resource \"res-123\" in English", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2090 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2090.AddRow(new string[] {
                            "language",
                            "es"});
                table2090.AddRow(new string[] {
                            "title",
                            "Hojas de Trazado de Motricidad Fina"});
                table2090.AddRow(new string[] {
                            "description",
                            "Actividades de trazado apropiadas para la edad"});
#line 220
    testRunner.When("I send a POST request to \"/api/resources/res-123/translations\" with:", ((string)(null)), table2090, "When ");
#line hidden
#line 225
    testRunner.And("I attach file \"trazado-es.pdf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 226
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 227
    testRunner.And("the Spanish translation should be added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 228
    testRunner.And("both versions should be linked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create clinical adaptation of resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Create clinical adaptation of resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "clinical")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateClinicalAdaptationOfResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "clinical",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create clinical adaptation of resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 232
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 233
    testRunner.Given("resource \"res-123\" exists for typical development", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2091 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2091.AddRow(new string[] {
                            "adaptationType",
                            "autism-friendly"});
                table2091.AddRow(new string[] {
                            "modifications",
                            "[\"visual-supports\", \"simplified-language\"]"});
                table2091.AddRow(new string[] {
                            "notes",
                            "Added visual schedule and reduced text"});
#line 234
    testRunner.When("I send a POST request to \"/api/resources/res-123/clinical-adaptation\" with:", ((string)(null)), table2091, "When ");
#line hidden
#line 239
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 240
    testRunner.And("an adapted version should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 241
    testRunner.And("both versions should be linked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Archive outdated resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Resource Creation API Endpoints (FR-005)")]
        [Xunit.TraitAttribute("Description", "Archive outdated resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "lifecycle")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ArchiveOutdatedResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "resources",
                    "lifecycle",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Archive outdated resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 245
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 246
    testRunner.Given("I own resource \"res-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2092 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2092.AddRow(new string[] {
                            "reason",
                            "Outdated clinical guidelines"});
                table2092.AddRow(new string[] {
                            "replacementId",
                            "res-789"});
#line 247
    testRunner.When("I send a POST request to \"/api/resources/res-123/archive\" with:", ((string)(null)), table2092, "When ");
#line hidden
#line 251
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 252
    testRunner.And("the resource should be archived", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 253
    testRunner.And("users should be notified of replacement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
    testRunner.And("existing links should redirect to replacement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ResourceCreationAPIEndpointsFR_005Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ResourceCreationAPIEndpointsFR_005Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
