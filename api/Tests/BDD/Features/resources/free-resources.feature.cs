// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Resources
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FreeResourcesAPIEndpointsFR_021Feature : object, Xunit.IClassFixture<FreeResourcesAPIEndpointsFR_021Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "free-resources.feature"
#line hidden
        
        public FreeResourcesAPIEndpointsFR_021Feature(FreeResourcesAPIEndpointsFR_021Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/resources", "Free Resources API Endpoints (FR-021)", "  As a platform visitor or user\n  I want access to free resources and samples\n  S" +
                    "o that I can try the platform and access basic materials", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access weekly free resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Free Resources API Endpoints (FR-021)")]
        [Xunit.TraitAttribute("Description", "Access weekly free resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "free")]
        [Xunit.TraitAttribute("Category", "weekly")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessWeeklyFreeResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "free",
                    "weekly",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access weekly free resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 12
    testRunner.When("I send a GET request to \"/api/resources/free/weekly\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2000 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2000.AddRow(new string[] {
                            "weekOf",
                            "string"});
                table2000.AddRow(new string[] {
                            "resources",
                            "array"});
                table2000.AddRow(new string[] {
                            "downloadLimit",
                            "number"});
                table2000.AddRow(new string[] {
                            "nextRotation",
                            "string"});
                table2000.AddRow(new string[] {
                            "requiresAccount",
                            "boolean"});
#line 14
    testRunner.And("the response should contain:", ((string)(null)), table2000, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Download sample pages from paid resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Free Resources API Endpoints (FR-021)")]
        [Xunit.TraitAttribute("Description", "Download sample pages from paid resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "free")]
        [Xunit.TraitAttribute("Category", "samples")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DownloadSamplePagesFromPaidResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "free",
                    "samples",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Download sample pages from paid resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 25
    testRunner.When("I send a GET request to \"/api/resources/free/samples/res-premium-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2001 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2001.AddRow(new string[] {
                            "samplePages",
                            "array"});
                table2001.AddRow(new string[] {
                            "watermarked",
                            "boolean"});
                table2001.AddRow(new string[] {
                            "fullVersion",
                            "object"});
                table2001.AddRow(new string[] {
                            "purchaseLink",
                            "string"});
#line 27
    testRunner.And("the response should contain:", ((string)(null)), table2001, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Sign up for newsletter with free resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Free Resources API Endpoints (FR-021)")]
        [Xunit.TraitAttribute("Description", "Sign up for newsletter with free resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "free")]
        [Xunit.TraitAttribute("Category", "newsletter")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SignUpForNewsletterWithFreeResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "free",
                    "newsletter",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sign up for newsletter with free resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2002 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2002.AddRow(new string[] {
                            "email",
                            "parent@email.com"});
                table2002.AddRow(new string[] {
                            "preferences",
                            "[\"OT\", \"preschool\"]"});
                table2002.AddRow(new string[] {
                            "frequency",
                            "weekly"});
                table2002.AddRow(new string[] {
                            "includeFreebies",
                            "true"});
#line 37
    testRunner.When("I send a POST request to \"/api/resources/free/newsletter-signup\" with:", ((string)(null)), table2002, "When ");
#line hidden
#line 43
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
    testRunner.And("welcome email should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.And("bonus resources should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Browse free educational handouts")]
        [Xunit.TraitAttribute("FeatureTitle", "Free Resources API Endpoints (FR-021)")]
        [Xunit.TraitAttribute("Description", "Browse free educational handouts")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "free")]
        [Xunit.TraitAttribute("Category", "handouts")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BrowseFreeEducationalHandouts()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "free",
                    "handouts",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Browse free educational handouts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 50
    testRunner.When("I send a GET request to \"/api/resources/free/educational-handouts?topic=developme" +
                        "nt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2003 = new TechTalk.SpecFlow.Table(new string[] {
                            "topic",
                            "audience"});
                table2003.AddRow(new string[] {
                            "milestones",
                            "parents"});
                table2003.AddRow(new string[] {
                            "warning signs",
                            "educators"});
                table2003.AddRow(new string[] {
                            "activity ideas",
                            "caregivers"});
                table2003.AddRow(new string[] {
                            "referral guidelines",
                            "professionals"});
#line 52
    testRunner.And("handouts should include:", ((string)(null)), table2003, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access birthday month special resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Free Resources API Endpoints (FR-021)")]
        [Xunit.TraitAttribute("Description", "Access birthday month special resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "free")]
        [Xunit.TraitAttribute("Category", "birthday")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessBirthdayMonthSpecialResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "free",
                    "birthday",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access birthday month special resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 62
    testRunner.Given("I am authenticated as \"user@email.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
    testRunner.And("my birthday month is January", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
    testRunner.And("current month is January", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
    testRunner.When("I send a GET request to \"/api/resources/free/birthday-special\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2004 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2004.AddRow(new string[] {
                            "specialResources",
                            "array"});
                table2004.AddRow(new string[] {
                            "bonusCredits",
                            "number"});
                table2004.AddRow(new string[] {
                            "exclusiveContent",
                            "array"});
                table2004.AddRow(new string[] {
                            "validUntil",
                            "string"});
#line 67
    testRunner.And("the response should contain:", ((string)(null)), table2004, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Claim first-time user bonus")]
        [Xunit.TraitAttribute("FeatureTitle", "Free Resources API Endpoints (FR-021)")]
        [Xunit.TraitAttribute("Description", "Claim first-time user bonus")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "free")]
        [Xunit.TraitAttribute("Category", "firsttime")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ClaimFirst_TimeUserBonus()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "free",
                    "firsttime",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Claim first-time user bonus", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 77
    testRunner.Given("I am a new authenticated user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2005 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2005.AddRow(new string[] {
                            "claimCode",
                            "WELCOME2024"});
                table2005.AddRow(new string[] {
                            "userType",
                            "therapist"});
#line 78
    testRunner.When("I send a POST request to \"/api/resources/free/first-time-bonus\" with:", ((string)(null)), table2005, "When ");
#line hidden
#line 82
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2006 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "quantity"});
                table2006.AddRow(new string[] {
                            "freeResources",
                            "20"});
                table2006.AddRow(new string[] {
                            "aiCredits",
                            "5"});
                table2006.AddRow(new string[] {
                            "trialDays",
                            "14"});
#line 83
    testRunner.And("bonus should include:", ((string)(null)), table2006, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access resources during free trial")]
        [Xunit.TraitAttribute("FeatureTitle", "Free Resources API Endpoints (FR-021)")]
        [Xunit.TraitAttribute("Description", "Access resources during free trial")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "free")]
        [Xunit.TraitAttribute("Category", "trial")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessResourcesDuringFreeTrial()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "free",
                    "trial",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access resources during free trial", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 92
    testRunner.Given("I am in free trial period", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
    testRunner.When("I send a GET request to \"/api/resources/free/trial-resources\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2007 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2007.AddRow(new string[] {
                            "trialResources",
                            "array"});
                table2007.AddRow(new string[] {
                            "daysRemaining",
                            "number"});
                table2007.AddRow(new string[] {
                            "fullAccessDemo",
                            "boolean"});
                table2007.AddRow(new string[] {
                            "conversionOffer",
                            "object"});
#line 95
    testRunner.And("the response should contain:", ((string)(null)), table2007, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access community-contributed free resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Free Resources API Endpoints (FR-021)")]
        [Xunit.TraitAttribute("Description", "Access community-contributed free resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "free")]
        [Xunit.TraitAttribute("Category", "community")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessCommunity_ContributedFreeResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "free",
                    "community",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access community-contributed free resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 105
    testRunner.When("I send a GET request to \"/api/resources/free/community-contributions?sort=popular" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2008 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2008.AddRow(new string[] {
                            "contributor",
                            "string"});
                table2008.AddRow(new string[] {
                            "downloads",
                            "number"});
                table2008.AddRow(new string[] {
                            "rating",
                            "number"});
                table2008.AddRow(new string[] {
                            "license",
                            "string"});
#line 107
    testRunner.And("resources should include:", ((string)(null)), table2008, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unlock resources by sharing")]
        [Xunit.TraitAttribute("FeatureTitle", "Free Resources API Endpoints (FR-021)")]
        [Xunit.TraitAttribute("Description", "Unlock resources by sharing")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "free")]
        [Xunit.TraitAttribute("Category", "social")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UnlockResourcesBySharing()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "free",
                    "social",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unlock resources by sharing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 116
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 117
    testRunner.Given("I am authenticated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2009 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2009.AddRow(new string[] {
                            "platform",
                            "facebook"});
                table2009.AddRow(new string[] {
                            "resourceId",
                            "free-pack-123"});
                table2009.AddRow(new string[] {
                            "verified",
                            "true"});
#line 118
    testRunner.When("I send a POST request to \"/api/resources/free/share-to-unlock\" with:", ((string)(null)), table2009, "When ");
#line hidden
#line 123
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
    testRunner.And("resource should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
    testRunner.And("share should be tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Browse preview library")]
        [Xunit.TraitAttribute("FeatureTitle", "Free Resources API Endpoints (FR-021)")]
        [Xunit.TraitAttribute("Description", "Browse preview library")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "free")]
        [Xunit.TraitAttribute("Category", "preview")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BrowsePreviewLibrary()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "free",
                    "preview",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Browse preview library", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 130
    testRunner.When("I send a GET request to \"/api/resources/free/preview-library?limit=10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 131
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2010 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2010.AddRow(new string[] {
                            "previewType",
                            "string"});
                table2010.AddRow(new string[] {
                            "previewDuration",
                            "number"});
                table2010.AddRow(new string[] {
                            "watermarked",
                            "boolean"});
                table2010.AddRow(new string[] {
                            "upgradePrompt",
                            "object"});
#line 132
    testRunner.And("each resource should contain:", ((string)(null)), table2010, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FreeResourcesAPIEndpointsFR_021Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FreeResourcesAPIEndpointsFR_021Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
