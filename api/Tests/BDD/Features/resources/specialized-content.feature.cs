// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Resources
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class HighlySpecializedTherapyContentModulesFR_023Feature : object, Xunit.IClassFixture<HighlySpecializedTherapyContentModulesFR_023Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "specialized-content.feature"
#line hidden
        
        public HighlySpecializedTherapyContentModulesFR_023Feature(HighlySpecializedTherapyContentModulesFR_023Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/resources", "Highly Specialized Therapy Content Modules (FR-023)", "  As a therapy professional\n  I want access to highly specialized therapy content" +
                    " and protocols\n  So that I can address specific conditions with evidence-based m" +
                    "aterials", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("I am logged in as a professional therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I have access to specialized content modules", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("content is clinically reviewed and evidence-based", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access apraxia card sets with hierarchical progression")]
        [Xunit.TraitAttribute("FeatureTitle", "Highly Specialized Therapy Content Modules (FR-023)")]
        [Xunit.TraitAttribute("Description", "Access apraxia card sets with hierarchical progression")]
        [Xunit.TraitAttribute("Category", "apraxia")]
        [Xunit.TraitAttribute("Category", "speech-hierarchy")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessApraxiaCardSetsWithHierarchicalProgression()
        {
            string[] tagsOfScenario = new string[] {
                    "apraxia",
                    "speech-hierarchy",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access apraxia card sets with hierarchical progression", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.Given("I work with students who have childhood apraxia of speech", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
    testRunner.When("I access apraxia-specific resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2220 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hierarchy Level",
                            "Content Focus"});
                table2220.AddRow(new string[] {
                            "Level 1 - Vowels",
                            "Single vowel sounds /a/, /e/, /i/"});
                table2220.AddRow(new string[] {
                            "Level 2 - CV patterns",
                            "Consonant-vowel combinations"});
                table2220.AddRow(new string[] {
                            "Level 3 - VC patterns",
                            "Vowel-consonant combinations"});
                table2220.AddRow(new string[] {
                            "Level 4 - CVC words",
                            "Simple consonant-vowel-consonant"});
                table2220.AddRow(new string[] {
                            "Level 5 - Multi-syllabic",
                            "Two and three syllable words"});
                table2220.AddRow(new string[] {
                            "Level 6 - Sentences",
                            "Functional phrase practice"});
#line 15
    testRunner.Then("I should find card sets organized by:", ((string)(null)), table2220, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2221 = new TechTalk.SpecFlow.Table(new string[] {
                            "Resource Type",
                            "Features"});
                table2221.AddRow(new string[] {
                            "Visual cue cards",
                            "Clear articulation photos"});
                table2221.AddRow(new string[] {
                            "Audio models",
                            "Perfect pronunciation examples"});
                table2221.AddRow(new string[] {
                            "Motor cues",
                            "Tactile and gestural prompts"});
                table2221.AddRow(new string[] {
                            "Progress tracking",
                            "Mastery criteria for advancement"});
                table2221.AddRow(new string[] {
                            "Parent home practice",
                            "Simplified versions for home"});
                table2221.AddRow(new string[] {
                            "Generalization tasks",
                            "Real-world application"});
#line 23
    testRunner.And("each hierarchy should include:", ((string)(null)), table2221, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access comprehensive minimal pairs library")]
        [Xunit.TraitAttribute("FeatureTitle", "Highly Specialized Therapy Content Modules (FR-023)")]
        [Xunit.TraitAttribute("Description", "Access comprehensive minimal pairs library")]
        [Xunit.TraitAttribute("Category", "minimal-pairs")]
        [Xunit.TraitAttribute("Category", "phonological-awareness")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessComprehensiveMinimalPairsLibrary()
        {
            string[] tagsOfScenario = new string[] {
                    "minimal-pairs",
                    "phonological-awareness",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access comprehensive minimal pairs library", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 34
    testRunner.Given("I need to work on phonological contrasts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
    testRunner.When("I search for minimal pairs activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2222 = new TechTalk.SpecFlow.Table(new string[] {
                            "Contrast Type",
                            "Examples"});
                table2222.AddRow(new string[] {
                            "Place contrasts",
                            "/p/ vs /t/, /k/ vs /g/"});
                table2222.AddRow(new string[] {
                            "Manner contrasts",
                            "/p/ vs /f/, /t/ vs /s/"});
                table2222.AddRow(new string[] {
                            "Voicing contrasts",
                            "/p/ vs /b/, /t/ vs /d/"});
                table2222.AddRow(new string[] {
                            "Complex contrasts",
                            "Consonant clusters"});
#line 36
    testRunner.Then("I should find pairs organized by:", ((string)(null)), table2222, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2223 = new TechTalk.SpecFlow.Table(new string[] {
                            "Material Type",
                            "Content"});
                table2223.AddRow(new string[] {
                            "Picture card pairs",
                            "High-quality illustrated pairs"});
                table2223.AddRow(new string[] {
                            "Audio discrimination",
                            "Listening activities"});
                table2223.AddRow(new string[] {
                            "Production practice",
                            "Speaking exercises"});
                table2223.AddRow(new string[] {
                            "Auditory bombardment",
                            "Listening exposure activities"});
                table2223.AddRow(new string[] {
                            "Generalization games",
                            "Fun application activities"});
#line 42
    testRunner.And("materials should include:", ((string)(null)), table2223, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2224 = new TechTalk.SpecFlow.Table(new string[] {
                            "Function",
                            "Capability"});
                table2224.AddRow(new string[] {
                            "Filter by phonemes",
                            "Find specific sound contrasts"});
                table2224.AddRow(new string[] {
                            "Adjust difficulty",
                            "Beginning to advanced levels"});
                table2224.AddRow(new string[] {
                            "Track discrimination",
                            "Data on auditory skills"});
                table2224.AddRow(new string[] {
                            "Track production",
                            "Data on speaking accuracy"});
                table2224.AddRow(new string[] {
                            "Generate reports",
                            "Progress summaries"});
#line 49
    testRunner.And("I should be able to:", ((string)(null)), table2224, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access vocalic R resources for all word positions")]
        [Xunit.TraitAttribute("FeatureTitle", "Highly Specialized Therapy Content Modules (FR-023)")]
        [Xunit.TraitAttribute("Description", "Access vocalic R resources for all word positions")]
        [Xunit.TraitAttribute("Category", "vocalic-r")]
        [Xunit.TraitAttribute("Category", "all-positions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessVocalicRResourcesForAllWordPositions()
        {
            string[] tagsOfScenario = new string[] {
                    "vocalic-r",
                    "all-positions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access vocalic R resources for all word positions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 59
    testRunner.Given("I specialize in R sound remediation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
    testRunner.When("I access vocalic R materials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2225 = new TechTalk.SpecFlow.Table(new string[] {
                            "R Type",
                            "Word Positions"});
                table2225.AddRow(new string[] {
                            "ER (stressed)",
                            "Initial, medial, final"});
                table2225.AddRow(new string[] {
                            "ER (unstressed)",
                            "Initial, medial, final"});
                table2225.AddRow(new string[] {
                            "AR",
                            "Initial, medial, final"});
                table2225.AddRow(new string[] {
                            "OR",
                            "Initial, medial, final"});
                table2225.AddRow(new string[] {
                            "AIR",
                            "Initial, medial, final"});
                table2225.AddRow(new string[] {
                            "EAR",
                            "Initial, medial, final"});
                table2225.AddRow(new string[] {
                            "IRE",
                            "Initial, medial, final"});
#line 61
    testRunner.Then("I should find comprehensive resources for:", ((string)(null)), table2225, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2226 = new TechTalk.SpecFlow.Table(new string[] {
                            "Resource Category",
                            "Materials"});
                table2226.AddRow(new string[] {
                            "Isolation practice",
                            "R sound in isolation"});
                table2226.AddRow(new string[] {
                            "Syllable practice",
                            "R in syllables"});
                table2226.AddRow(new string[] {
                            "Word level practice",
                            "R in single words"});
                table2226.AddRow(new string[] {
                            "Phrase level",
                            "R in short phrases"});
                table2226.AddRow(new string[] {
                            "Sentence level",
                            "R in connected speech"});
                table2226.AddRow(new string[] {
                            "Conversation level",
                            "Carryover activities"});
#line 70
    testRunner.And("each R type should include:", ((string)(null)), table2226, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2227 = new TechTalk.SpecFlow.Table(new string[] {
                            "Tool Type",
                            "Purpose"});
                table2227.AddRow(new string[] {
                            "Visual cues",
                            "Tongue position diagrams"});
                table2227.AddRow(new string[] {
                            "Tactile cues",
                            "Physical prompting guides"});
                table2227.AddRow(new string[] {
                            "Auditory models",
                            "Perfect R sound examples"});
                table2227.AddRow(new string[] {
                            "Self-monitoring",
                            "Student evaluation tools"});
#line 78
    testRunner.And("specialized tools like:", ((string)(null)), table2227, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access comprehensive feeding therapy protocols")]
        [Xunit.TraitAttribute("FeatureTitle", "Highly Specialized Therapy Content Modules (FR-023)")]
        [Xunit.TraitAttribute("Description", "Access comprehensive feeding therapy protocols")]
        [Xunit.TraitAttribute("Category", "feeding-therapy")]
        [Xunit.TraitAttribute("Category", "oral-motor")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessComprehensiveFeedingTherapyProtocols()
        {
            string[] tagsOfScenario = new string[] {
                    "feeding-therapy",
                    "oral-motor",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access comprehensive feeding therapy protocols", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 87
    testRunner.Given("I work with students with feeding difficulties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
    testRunner.When("I access feeding therapy resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2228 = new TechTalk.SpecFlow.Table(new string[] {
                            "Feeding Challenge",
                            "Protocol Elements"});
                table2228.AddRow(new string[] {
                            "Oral motor weakness",
                            "Strengthening exercises"});
                table2228.AddRow(new string[] {
                            "Sensory defensiveness",
                            "Desensitization activities"});
                table2228.AddRow(new string[] {
                            "Swallowing issues",
                            "Safe swallowing techniques"});
                table2228.AddRow(new string[] {
                            "Food selectivity",
                            "Expansion strategies"});
                table2228.AddRow(new string[] {
                            "Texture progression",
                            "Gradual texture advancement"});
                table2228.AddRow(new string[] {
                            "Behavioral feeding",
                            "Mealtime behavior management"});
#line 89
    testRunner.Then("I should find protocols for:", ((string)(null)), table2228, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2229 = new TechTalk.SpecFlow.Table(new string[] {
                            "Component",
                            "Content"});
                table2229.AddRow(new string[] {
                            "Assessment tools",
                            "Standardized feeding evaluations"});
                table2229.AddRow(new string[] {
                            "Intervention hierarchy",
                            "Step-by-step progression"});
                table2229.AddRow(new string[] {
                            "Safety protocols",
                            "Aspiration prevention"});
                table2229.AddRow(new string[] {
                            "Family education",
                            "Parent training materials"});
                table2229.AddRow(new string[] {
                            "Progress monitoring",
                            "Data collection sheets"});
                table2229.AddRow(new string[] {
                            "Interdisciplinary",
                            "Team collaboration guides"});
#line 97
    testRunner.And("each protocol should include:", ((string)(null)), table2229, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access literacy-based therapy units for language development")]
        [Xunit.TraitAttribute("FeatureTitle", "Highly Specialized Therapy Content Modules (FR-023)")]
        [Xunit.TraitAttribute("Description", "Access literacy-based therapy units for language development")]
        [Xunit.TraitAttribute("Category", "literacy-therapy")]
        [Xunit.TraitAttribute("Category", "reading-intervention")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessLiteracy_BasedTherapyUnitsForLanguageDevelopment()
        {
            string[] tagsOfScenario = new string[] {
                    "literacy-therapy",
                    "reading-intervention",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access literacy-based therapy units for language development", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 107
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 108
    testRunner.Given("I integrate literacy into speech-language therapy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 109
    testRunner.When("I search for literacy-based materials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2230 = new TechTalk.SpecFlow.Table(new string[] {
                            "Literacy Skill",
                            "Therapy Integration"});
                table2230.AddRow(new string[] {
                            "Phonological awareness",
                            "Sound manipulation activities"});
                table2230.AddRow(new string[] {
                            "Letter knowledge",
                            "Alphabet and sound-symbol"});
                table2230.AddRow(new string[] {
                            "Decoding skills",
                            "Reading strategy instruction"});
                table2230.AddRow(new string[] {
                            "Reading comprehension",
                            "Language processing support"});
                table2230.AddRow(new string[] {
                            "Narrative skills",
                            "Story structure and retelling"});
                table2230.AddRow(new string[] {
                            "Vocabulary development",
                            "Word learning strategies"});
#line 110
    testRunner.Then("I should find units targeting:", ((string)(null)), table2230, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2231 = new TechTalk.SpecFlow.Table(new string[] {
                            "Resource Type",
                            "Content"});
                table2231.AddRow(new string[] {
                            "Lesson plans",
                            "Structured therapy sessions"});
                table2231.AddRow(new string[] {
                            "Assessment tools",
                            "Reading and language measures"});
                table2231.AddRow(new string[] {
                            "Visual supports",
                            "Graphic organizers and charts"});
                table2231.AddRow(new string[] {
                            "Technology integration",
                            "Apps and digital tools"});
                table2231.AddRow(new string[] {
                            "Home extension",
                            "Family literacy activities"});
                table2231.AddRow(new string[] {
                            "Progress monitoring",
                            "Curriculum-based measurements"});
#line 118
    testRunner.And("each unit should provide:", ((string)(null)), table2231, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access social story builder with customization options")]
        [Xunit.TraitAttribute("FeatureTitle", "Highly Specialized Therapy Content Modules (FR-023)")]
        [Xunit.TraitAttribute("Description", "Access social story builder with customization options")]
        [Xunit.TraitAttribute("Category", "social-stories")]
        [Xunit.TraitAttribute("Category", "visual-supports")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessSocialStoryBuilderWithCustomizationOptions()
        {
            string[] tagsOfScenario = new string[] {
                    "social-stories",
                    "visual-supports",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access social story builder with customization options", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 128
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 129
    testRunner.Given("I need to create individualized social stories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 130
    testRunner.When("I use the social story builder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2232 = new TechTalk.SpecFlow.Table(new string[] {
                            "Customization Option",
                            "Choices"});
                table2232.AddRow(new string[] {
                            "Story topic",
                            "Pre-made or custom scenarios"});
                table2232.AddRow(new string[] {
                            "Character selection",
                            "Diverse, representative people"});
                table2232.AddRow(new string[] {
                            "Setting backgrounds",
                            "School, home, community"});
                table2232.AddRow(new string[] {
                            "Language level",
                            "Adjust complexity for age"});
                table2232.AddRow(new string[] {
                            "Visual style",
                            "Photos, illustrations, symbols"});
                table2232.AddRow(new string[] {
                            "Story length",
                            "Short, medium, or detailed"});
#line 131
    testRunner.Then("I should be able to:", ((string)(null)), table2232, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2233 = new TechTalk.SpecFlow.Table(new string[] {
                            "Feature",
                            "Function"});
                table2233.AddRow(new string[] {
                            "Template library",
                            "Common social situations"});
                table2233.AddRow(new string[] {
                            "Photo integration",
                            "Upload real photos of student"});
                table2233.AddRow(new string[] {
                            "Voice recording",
                            "Add narration to stories"});
                table2233.AddRow(new string[] {
                            "Multiple formats",
                            "Print, digital, interactive"});
                table2233.AddRow(new string[] {
                            "Sharing options",
                            "Send to parents and teachers"});
                table2233.AddRow(new string[] {
                            "Translation tools",
                            "Multiple language versions"});
#line 139
    testRunner.And("the builder should include:", ((string)(null)), table2233, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create comprehensive visual schedules for various settings")]
        [Xunit.TraitAttribute("FeatureTitle", "Highly Specialized Therapy Content Modules (FR-023)")]
        [Xunit.TraitAttribute("Description", "Create comprehensive visual schedules for various settings")]
        [Xunit.TraitAttribute("Category", "visual-schedules")]
        [Xunit.TraitAttribute("Category", "structured-teaching")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateComprehensiveVisualSchedulesForVariousSettings()
        {
            string[] tagsOfScenario = new string[] {
                    "visual-schedules",
                    "structured-teaching",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create comprehensive visual schedules for various settings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 149
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 150
    testRunner.Given("I support students who need visual structure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 151
    testRunner.When("I access visual schedule creation tools", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2234 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting Type",
                            "Schedule Elements"});
                table2234.AddRow(new string[] {
                            "Daily routines",
                            "Morning, afternoon, evening"});
                table2234.AddRow(new string[] {
                            "Therapy sessions",
                            "Activity sequence and timing"});
                table2234.AddRow(new string[] {
                            "Classroom activities",
                            "Subject transitions"});
                table2234.AddRow(new string[] {
                            "Social situations",
                            "Step-by-step social scripts"});
                table2234.AddRow(new string[] {
                            "Life skills tasks",
                            "Task analysis breakdowns"});
                table2234.AddRow(new string[] {
                            "Behavioral supports",
                            "Coping strategy sequences"});
#line 152
    testRunner.Then("I should be able to create schedules for:", ((string)(null)), table2234, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2235 = new TechTalk.SpecFlow.Table(new string[] {
                            "Visual Element",
                            "Options"});
                table2235.AddRow(new string[] {
                            "Symbol system",
                            "PECS, Boardmaker, photos"});
                table2235.AddRow(new string[] {
                            "Layout style",
                            "Horizontal, vertical, grid"});
                table2235.AddRow(new string[] {
                            "Timing indicators",
                            "Clocks, timers, countdowns"});
                table2235.AddRow(new string[] {
                            "Completion tracking",
                            "Checkboxes, stars, stamps"});
                table2235.AddRow(new string[] {
                            "Transition cues",
                            "First/then, next, finished"});
                table2235.AddRow(new string[] {
                            "Portable formats",
                            "Laminated, digital, wearable"});
#line 160
    testRunner.And("customization should include:", ((string)(null)), table2235, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access detailed articulation treatment hierarchies")]
        [Xunit.TraitAttribute("FeatureTitle", "Highly Specialized Therapy Content Modules (FR-023)")]
        [Xunit.TraitAttribute("Description", "Access detailed articulation treatment hierarchies")]
        [Xunit.TraitAttribute("Category", "articulation-hierarchies")]
        [Xunit.TraitAttribute("Category", "motor-planning")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessDetailedArticulationTreatmentHierarchies()
        {
            string[] tagsOfScenario = new string[] {
                    "articulation-hierarchies",
                    "motor-planning",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access detailed articulation treatment hierarchies", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 170
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 171
    testRunner.Given("I provide articulation therapy for various sound errors", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 172
    testRunner.When("I select a target phoneme", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2236 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hierarchy Level",
                            "Activities"});
                table2236.AddRow(new string[] {
                            "Auditory discrimination",
                            "Can hear the difference"});
                table2236.AddRow(new string[] {
                            "Sound isolation",
                            "Produce sound alone"});
                table2236.AddRow(new string[] {
                            "Syllable level",
                            "Sound in CV, VC, CVC"});
                table2236.AddRow(new string[] {
                            "Word level initial",
                            "Sound at beginning of words"});
                table2236.AddRow(new string[] {
                            "Word level medial",
                            "Sound in middle of words"});
                table2236.AddRow(new string[] {
                            "Word level final",
                            "Sound at end of words"});
                table2236.AddRow(new string[] {
                            "Phrase level",
                            "Sound in short phrases"});
                table2236.AddRow(new string[] {
                            "Sentence level",
                            "Sound in sentences"});
                table2236.AddRow(new string[] {
                            "Conversation level",
                            "Sound in spontaneous speech"});
                table2236.AddRow(new string[] {
                            "Generalization",
                            "Sound in all environments"});
#line 173
    testRunner.Then("I should find treatment hierarchies including:", ((string)(null)), table2236, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2237 = new TechTalk.SpecFlow.Table(new string[] {
                            "Support Material",
                            "Content"});
                table2237.AddRow(new string[] {
                            "Stimulus materials",
                            "Words and pictures for practice"});
                table2237.AddRow(new string[] {
                            "Cuing strategies",
                            "Visual, auditory, tactile"});
                table2237.AddRow(new string[] {
                            "Data collection",
                            "Progress tracking sheets"});
                table2237.AddRow(new string[] {
                            "Homework materials",
                            "Home practice activities"});
                table2237.AddRow(new string[] {
                            "Mastery criteria",
                            "When to advance levels"});
#line 185
    testRunner.And("each level should provide:", ((string)(null)), table2237, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access article companions and activities for teenagers")]
        [Xunit.TraitAttribute("FeatureTitle", "Highly Specialized Therapy Content Modules (FR-023)")]
        [Xunit.TraitAttribute("Description", "Access article companions and activities for teenagers")]
        [Xunit.TraitAttribute("Category", "complex-communication")]
        [Xunit.TraitAttribute("Category", "teen-resources")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessArticleCompanionsAndActivitiesForTeenagers()
        {
            string[] tagsOfScenario = new string[] {
                    "complex-communication",
                    "teen-resources",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access article companions and activities for teenagers", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 194
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 195
    testRunner.Given("I work with teenagers on advanced language skills", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 196
    testRunner.When("I access teen-focused materials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2238 = new TechTalk.SpecFlow.Table(new string[] {
                            "Resource Type",
                            "Content Focus"});
                table2238.AddRow(new string[] {
                            "Current events articles",
                            "Age-appropriate news stories"});
                table2238.AddRow(new string[] {
                            "Academic text supports",
                            "Textbook comprehension aids"});
                table2238.AddRow(new string[] {
                            "Social media analysis",
                            "Digital communication skills"});
                table2238.AddRow(new string[] {
                            "Career exploration",
                            "Job interview and resume skills"});
                table2238.AddRow(new string[] {
                            "Abstract reasoning",
                            "Higher-level thinking tasks"});
                table2238.AddRow(new string[] {
                            "Peer interaction",
                            "Social communication scenarios"});
#line 197
    testRunner.Then("I should find:", ((string)(null)), table2238, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2239 = new TechTalk.SpecFlow.Table(new string[] {
                            "Language Skill",
                            "Intervention Approach"});
                table2239.AddRow(new string[] {
                            "Reading comprehension",
                            "Graphic organizers and strategies"});
                table2239.AddRow(new string[] {
                            "Written expression",
                            "Essay structure and editing"});
                table2239.AddRow(new string[] {
                            "Oral presentation",
                            "Public speaking and confidence"});
                table2239.AddRow(new string[] {
                            "Critical thinking",
                            "Analysis and evaluation tasks"});
                table2239.AddRow(new string[] {
                            "Vocabulary expansion",
                            "Academic and technical terms"});
                table2239.AddRow(new string[] {
                            "Pragmatic skills",
                            "Real-world communication"});
#line 205
    testRunner.And("activities should target:", ((string)(null)), table2239, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Ensure protocol fidelity with evidence-based implementation")]
        [Xunit.TraitAttribute("FeatureTitle", "Highly Specialized Therapy Content Modules (FR-023)")]
        [Xunit.TraitAttribute("Description", "Ensure protocol fidelity with evidence-based implementation")]
        [Xunit.TraitAttribute("Category", "protocol-fidelity")]
        [Xunit.TraitAttribute("Category", "evidence-tracking")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnsureProtocolFidelityWithEvidence_BasedImplementation()
        {
            string[] tagsOfScenario = new string[] {
                    "protocol-fidelity",
                    "evidence-tracking",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure protocol fidelity with evidence-based implementation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 215
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 216
    testRunner.Given("I want to implement specialized protocols correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 217
    testRunner.When("I access any specialized content module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2240 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fidelity Support",
                            "Content"});
                table2240.AddRow(new string[] {
                            "Implementation guides",
                            "Step-by-step procedures"});
                table2240.AddRow(new string[] {
                            "Training materials",
                            "How to learn the protocol"});
                table2240.AddRow(new string[] {
                            "Fidelity checklists",
                            "Self-monitoring tools"});
                table2240.AddRow(new string[] {
                            "Video demonstrations",
                            "Expert implementation examples"});
                table2240.AddRow(new string[] {
                            "Troubleshooting guides",
                            "Common problems and solutions"});
                table2240.AddRow(new string[] {
                            "Outcome measures",
                            "How to track effectiveness"});
#line 218
    testRunner.Then("I should find:", ((string)(null)), table2240, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2241 = new TechTalk.SpecFlow.Table(new string[] {
                            "Evidence Type",
                            "Information"});
                table2241.AddRow(new string[] {
                            "Research citations",
                            "Supporting scientific studies"});
                table2241.AddRow(new string[] {
                            "Efficacy data",
                            "Treatment effectiveness rates"});
                table2241.AddRow(new string[] {
                            "Best practice guidelines",
                            "Professional recommendations"});
                table2241.AddRow(new string[] {
                            "Contraindications",
                            "When not to use the protocol"});
                table2241.AddRow(new string[] {
                            "Modification guides",
                            "Adapting for different populations"});
#line 226
    testRunner.And("evidence base should include:", ((string)(null)), table2241, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                HighlySpecializedTherapyContentModulesFR_023Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                HighlySpecializedTherapyContentModulesFR_023Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
