// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Resources
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class PhysicalDigitalHybridAPIEndpointsFR_013Feature : object, Xunit.IClassFixture<PhysicalDigitalHybridAPIEndpointsFR_013Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "physical-digital-hybrid.feature"
#line hidden
        
        public PhysicalDigitalHybridAPIEndpointsFR_013Feature(PhysicalDigitalHybridAPIEndpointsFR_013Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/resources", "Physical/Digital Hybrid API Endpoints (FR-013)", "  As a therapy professional\n  I want to integrate physical therapy materials with" +
                    " digital features\n  So that I can enhance traditional materials with technology", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Register physical product for digital access")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Register physical product for digital access")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "hybrid")]
        [Xunit.TraitAttribute("Category", "registration")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RegisterPhysicalProductForDigitalAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "hybrid",
                    "registration",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register physical product for digital access", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2065 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2065.AddRow(new string[] {
                            "productCode",
                            "SENSORY-CARDS-2024"});
                table2065.AddRow(new string[] {
                            "purchaseDate",
                            "2024-01-15"});
                table2065.AddRow(new string[] {
                            "receiptNumber",
                            "REC-123456"});
                table2065.AddRow(new string[] {
                            "email",
                            "therapist@clinic.com"});
#line 13
    testRunner.When("I send a POST request to \"/api/hybrid/products/register\" with:", ((string)(null)), table2065, "When ");
#line hidden
#line 19
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2066 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2066.AddRow(new string[] {
                            "digitalAccessCode",
                            "string"});
                table2066.AddRow(new string[] {
                            "unlockedContent",
                            "array"});
                table2066.AddRow(new string[] {
                            "expirationDate",
                            "string"});
#line 20
    testRunner.And("the response should contain:", ((string)(null)), table2066, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Scan QR code from physical product")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Scan QR code from physical product")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "hybrid")]
        [Xunit.TraitAttribute("Category", "qr")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ScanQRCodeFromPhysicalProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "hybrid",
                    "qr",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scan QR code from physical product", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2067 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2067.AddRow(new string[] {
                            "qrData",
                            "QR://UPTRMS/PROD/CARD-SET-123"});
                table2067.AddRow(new string[] {
                            "deviceId",
                            "ipad-456"});
                table2067.AddRow(new string[] {
                            "location",
                            "therapy-room"});
#line 29
    testRunner.When("I send a POST request to \"/api/hybrid/qr-scan\" with:", ((string)(null)), table2067, "When ");
#line hidden
#line 34
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2068 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2068.AddRow(new string[] {
                            "productName",
                            "string"});
                table2068.AddRow(new string[] {
                            "digitalContent",
                            "array"});
                table2068.AddRow(new string[] {
                            "arEnabled",
                            "boolean"});
                table2068.AddRow(new string[] {
                            "sessionLink",
                            "string"});
#line 35
    testRunner.And("the response should contain:", ((string)(null)), table2068, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access digital companions for physical product")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Access digital companions for physical product")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "hybrid")]
        [Xunit.TraitAttribute("Category", "content")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessDigitalCompanionsForPhysicalProduct()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "hybrid",
                    "content",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access digital companions for physical product", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 45
    testRunner.Given("I own physical product \"prod-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
    testRunner.When("I send a GET request to \"/api/hybrid/products/prod-123/digital-content\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2069 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2069.AddRow(new string[] {
                            "videos",
                            "array"});
                table2069.AddRow(new string[] {
                            "printables",
                            "array"});
                table2069.AddRow(new string[] {
                            "apps",
                            "array"});
                table2069.AddRow(new string[] {
                            "arMarkers",
                            "array"});
                table2069.AddRow(new string[] {
                            "instructions",
                            "object"});
#line 48
    testRunner.And("the response should contain:", ((string)(null)), table2069, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Start AR session with physical materials")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Start AR session with physical materials")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "hybrid")]
        [Xunit.TraitAttribute("Category", "ar")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void StartARSessionWithPhysicalMaterials()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "hybrid",
                    "ar",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start AR session with physical materials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2070 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2070.AddRow(new string[] {
                            "productId",
                            "anatomy-cards-123"});
                table2070.AddRow(new string[] {
                            "deviceType",
                            "tablet"});
                table2070.AddRow(new string[] {
                            "cameraAccess",
                            "granted"});
#line 59
    testRunner.When("I send a POST request to \"/api/hybrid/ar/session\" with:", ((string)(null)), table2070, "When ");
#line hidden
#line 64
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2071 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2071.AddRow(new string[] {
                            "sessionId",
                            "string"});
                table2071.AddRow(new string[] {
                            "arModels",
                            "array"});
                table2071.AddRow(new string[] {
                            "trackingConfig",
                            "object"});
                table2071.AddRow(new string[] {
                            "interactionMap",
                            "object"});
#line 65
    testRunner.And("the response should contain:", ((string)(null)), table2071, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Order print-on-demand materials")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Order print-on-demand materials")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "hybrid")]
        [Xunit.TraitAttribute("Category", "pod")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void OrderPrint_On_DemandMaterials()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "hybrid",
                    "pod",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Order print-on-demand materials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2072 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2072.AddRow(new string[] {
                            "resourceIds",
                            "[\"res-123\", \"res-124\"]"});
                table2072.AddRow(new string[] {
                            "customization",
                            "{\"name\": \"Emma\'s Book\"}"});
                table2072.AddRow(new string[] {
                            "quantity",
                            "1"});
                table2072.AddRow(new string[] {
                            "binding",
                            "spiral"});
                table2072.AddRow(new string[] {
                            "shipping",
                            "standard"});
#line 75
    testRunner.When("I send a POST request to \"/api/hybrid/print-on-demand\" with:", ((string)(null)), table2072, "When ");
#line hidden
#line 82
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2073 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2073.AddRow(new string[] {
                            "orderId",
                            "string"});
                table2073.AddRow(new string[] {
                            "estimatedCost",
                            "number"});
                table2073.AddRow(new string[] {
                            "deliveryDate",
                            "string"});
                table2073.AddRow(new string[] {
                            "trackingInfo",
                            "object"});
#line 83
    testRunner.And("the response should contain:", ((string)(null)), table2073, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Browse physical/digital bundles")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Browse physical/digital bundles")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "hybrid")]
        [Xunit.TraitAttribute("Category", "bundles")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BrowsePhysicalDigitalBundles()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "hybrid",
                    "bundles",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Browse physical/digital bundles", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 93
    testRunner.When("I send a GET request to \"/api/hybrid/bundles?category=sensory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2074 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2074.AddRow(new string[] {
                            "bundleId",
                            "string"});
                table2074.AddRow(new string[] {
                            "name",
                            "string"});
                table2074.AddRow(new string[] {
                            "physicalItems",
                            "array"});
                table2074.AddRow(new string[] {
                            "digitalItems",
                            "array"});
                table2074.AddRow(new string[] {
                            "totalValue",
                            "number"});
                table2074.AddRow(new string[] {
                            "bundlePrice",
                            "number"});
                table2074.AddRow(new string[] {
                            "shippingIncluded",
                            "boolean"});
#line 95
    testRunner.And("the response should contain array of:", ((string)(null)), table2074, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify product authenticity")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Verify product authenticity")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "hybrid")]
        [Xunit.TraitAttribute("Category", "verification")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void VerifyProductAuthenticity()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "hybrid",
                    "verification",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify product authenticity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 107
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2075 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2075.AddRow(new string[] {
                            "hologramCode",
                            "HOLO-123-456-789"});
                table2075.AddRow(new string[] {
                            "productSerial",
                            "SN-2024-001234"});
#line 108
    testRunner.When("I send a POST request to \"/api/hybrid/verify-authenticity\" with:", ((string)(null)), table2075, "When ");
#line hidden
#line 112
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2076 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2076.AddRow(new string[] {
                            "authentic",
                            "boolean"});
                table2076.AddRow(new string[] {
                            "productInfo",
                            "object"});
                table2076.AddRow(new string[] {
                            "warranty",
                            "object"});
#line 113
    testRunner.And("the response should contain:", ((string)(null)), table2076, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate shipping for physical items")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Calculate shipping for physical items")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "hybrid")]
        [Xunit.TraitAttribute("Category", "shipping")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CalculateShippingForPhysicalItems()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "hybrid",
                    "shipping",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate shipping for physical items", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2077 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2077.AddRow(new string[] {
                            "items",
                            "[{\"id\": \"kit-123\", \"qty\": 2}]"});
                table2077.AddRow(new string[] {
                            "destination",
                            "{\"zip\": \"90210\", \"country\": \"US\"}"});
                table2077.AddRow(new string[] {
                            "expedited",
                            "false"});
#line 122
    testRunner.When("I send a POST request to \"/api/hybrid/shipping-calculator\" with:", ((string)(null)), table2077, "When ");
#line hidden
#line 127
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2078 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2078.AddRow(new string[] {
                            "shippingCost",
                            "number"});
                table2078.AddRow(new string[] {
                            "deliveryTime",
                            "string"});
                table2078.AddRow(new string[] {
                            "carriers",
                            "array"});
#line 128
    testRunner.And("the response should contain:", ((string)(null)), table2078, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check physical product availability")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Check physical product availability")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "hybrid")]
        [Xunit.TraitAttribute("Category", "inventory")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CheckPhysicalProductAvailability()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "hybrid",
                    "inventory",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check physical product availability", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 137
    testRunner.When("I send a GET request to \"/api/hybrid/inventory/sensory-kit-pro\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 138
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2079 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2079.AddRow(new string[] {
                            "inStock",
                            "boolean"});
                table2079.AddRow(new string[] {
                            "quantity",
                            "number"});
                table2079.AddRow(new string[] {
                            "backorderDate",
                            "string"});
                table2079.AddRow(new string[] {
                            "locations",
                            "array"});
#line 139
    testRunner.And("the response should contain:", ((string)(null)), table2079, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complete QR code workflow from physical card to digital activity")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Complete QR code workflow from physical card to digital activity")]
        [Xunit.TraitAttribute("Category", "qr-code")]
        [Xunit.TraitAttribute("Category", "physical-cards")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompleteQRCodeWorkflowFromPhysicalCardToDigitalActivity()
        {
            string[] tagsOfScenario = new string[] {
                    "qr-code",
                    "physical-cards",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete QR code workflow from physical card to digital activity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 148
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 149
    testRunner.Given("I have purchased \"Articulation Card Deck - R Sounds\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 150
    testRunner.And("each card has a unique QR code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
    testRunner.When("I scan the QR code on \"Rabbit\" card using mobile app", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2080 = new TechTalk.SpecFlow.Table(new string[] {
                            "Digital Feature",
                            "Content"});
                table2080.AddRow(new string[] {
                            "Audio model",
                            "Native speaker pronunciation"});
                table2080.AddRow(new string[] {
                            "Video model",
                            "Mouth position close-up"});
                table2080.AddRow(new string[] {
                            "Practice games",
                            "Digital activities with card"});
                table2080.AddRow(new string[] {
                            "Progress tracking",
                            "Log correct/incorrect"});
#line 152
    testRunner.Then("I should receive digital content within 3 seconds:", ((string)(null)), table2080, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2081 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Result"});
                table2081.AddRow(new string[] {
                            "Record student",
                            "Compare to model"});
                table2081.AddRow(new string[] {
                            "Play minimal pairs",
                            "Rabbit vs Wabbit contrast"});
                table2081.AddRow(new string[] {
                            "Access home version",
                            "Parent scans same code"});
                table2081.AddRow(new string[] {
                            "Track usage",
                            "Automatic session logging"});
#line 158
    testRunner.And("I should be able to:", ((string)(null)), table2081, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complete print-on-demand workflow for custom communication book")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Complete print-on-demand workflow for custom communication book")]
        [Xunit.TraitAttribute("Category", "print-on-demand")]
        [Xunit.TraitAttribute("Category", "customization")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompletePrint_On_DemandWorkflowForCustomCommunicationBook()
        {
            string[] tagsOfScenario = new string[] {
                    "print-on-demand",
                    "customization",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete print-on-demand workflow for custom communication book", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 167
    testRunner.Given("I am designing custom communication book for student \"Jake\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 168
    testRunner.When("I access the print-on-demand service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2082 = new TechTalk.SpecFlow.Table(new string[] {
                            "Customization",
                            "Details"});
                table2082.AddRow(new string[] {
                            "Student name",
                            "\"Jake\'s Communication Book\""});
                table2082.AddRow(new string[] {
                            "Core vocabulary",
                            "48 most-used words"});
                table2082.AddRow(new string[] {
                            "Personal photos",
                            "Family members, favorite items"});
                table2082.AddRow(new string[] {
                            "Size/binding",
                            "8.5x11\", spiral bound"});
                table2082.AddRow(new string[] {
                            "Lamination",
                            "Heavy duty, wipeable"});
#line 169
    testRunner.And("I specify customization options:", ((string)(null)), table2082, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2083 = new TechTalk.SpecFlow.Table(new string[] {
                            "Feature",
                            "Appearance"});
                table2083.AddRow(new string[] {
                            "Cover page",
                            "Student name and photo"});
                table2083.AddRow(new string[] {
                            "Organization",
                            "Tabbed sections by category"});
                table2083.AddRow(new string[] {
                            "Symbols",
                            "Consistent with digital use"});
                table2083.AddRow(new string[] {
                            "Durability",
                            "Reinforced corners"});
#line 176
    testRunner.Then("print preview should display:", ((string)(null)), table2083, "Then ");
#line hidden
#line 182
    testRunner.When("I complete the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2084 = new TechTalk.SpecFlow.Table(new string[] {
                            "Order Detail",
                            "Information"});
                table2084.AddRow(new string[] {
                            "Production time",
                            "3-5 business days"});
                table2084.AddRow(new string[] {
                            "Shipping options",
                            "Standard or expedited"});
                table2084.AddRow(new string[] {
                            "Cost breakdown",
                            "Materials, printing, shipping"});
                table2084.AddRow(new string[] {
                            "Digital copy",
                            "Included for backup"});
#line 183
    testRunner.Then("I should see order confirmation with:", ((string)(null)), table2084, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complete augmented reality workflow with printed worksheets")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Complete augmented reality workflow with printed worksheets")]
        [Xunit.TraitAttribute("Category", "ar-features")]
        [Xunit.TraitAttribute("Category", "interactive-print")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompleteAugmentedRealityWorkflowWithPrintedWorksheets()
        {
            string[] tagsOfScenario = new string[] {
                    "ar-features",
                    "interactive-print",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete augmented reality workflow with printed worksheets", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 191
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 192
    testRunner.Given("I have AR-enabled worksheets", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 193
    testRunner.And("student has tablet with AR app installed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
    testRunner.When("student points tablet camera at worksheet", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2085 = new TechTalk.SpecFlow.Table(new string[] {
                            "Worksheet Type",
                            "AR Enhancement"});
                table2085.AddRow(new string[] {
                            "Anatomy diagram",
                            "3D rotating body systems"});
                table2085.AddRow(new string[] {
                            "Math problems",
                            "Animated problem solving"});
                table2085.AddRow(new string[] {
                            "Handwriting",
                            "Tracing guides appear"});
                table2085.AddRow(new string[] {
                            "Categories",
                            "Items float to correct boxes"});
#line 195
    testRunner.Then("AR features should activate within 5 seconds:", ((string)(null)), table2085, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2086 = new TechTalk.SpecFlow.Table(new string[] {
                            "Feature",
                            "Function"});
                table2086.AddRow(new string[] {
                            "Touch targets",
                            "Tap to hear names/sounds"});
                table2086.AddRow(new string[] {
                            "Animation",
                            "Show correct technique"});
                table2086.AddRow(new string[] {
                            "Rewards",
                            "Virtual stickers when complete"});
                table2086.AddRow(new string[] {
                            "Data capture",
                            "Track accuracy and time"});
#line 201
    testRunner.And("interaction should include:", ((string)(null)), table2086, "And ");
#line hidden
#line 207
    testRunner.When("worksheet is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2087 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Result"});
                table2087.AddRow(new string[] {
                            "Save work",
                            "Digital copy of completed work"});
                table2087.AddRow(new string[] {
                            "Generate report",
                            "Performance summary"});
                table2087.AddRow(new string[] {
                            "Unlock reward",
                            "New AR character or game"});
#line 208
    testRunner.Then("AR app should:", ((string)(null)), table2087, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Purchase and receive physical/digital bundle packages")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Purchase and receive physical/digital bundle packages")]
        [Xunit.TraitAttribute("Category", "hybrid-bundles")]
        [Xunit.TraitAttribute("Category", "value-packs")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PurchaseAndReceivePhysicalDigitalBundlePackages()
        {
            string[] tagsOfScenario = new string[] {
                    "hybrid-bundles",
                    "value-packs",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Purchase and receive physical/digital bundle packages", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 215
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 216
    testRunner.Given("I want comprehensive sensory program", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 217
    testRunner.When("I view \"Sensory Diet Starter Kit\" bundle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2088 = new TechTalk.SpecFlow.Table(new string[] {
                            "Physical Items",
                            "Digital Components"});
                table2088.AddRow(new string[] {
                            "Therapy putty",
                            "Exercise videos"});
                table2088.AddRow(new string[] {
                            "Balance disc",
                            "Activity cards (printable)"});
                table2088.AddRow(new string[] {
                            "Sensory balls",
                            "Progress tracking sheets"});
                table2088.AddRow(new string[] {
                            "Visual timers",
                            "Digital timer app access"});
                table2088.AddRow(new string[] {
                            "Instruction manual",
                            "Online video course"});
#line 218
    testRunner.Then("bundle should include:", ((string)(null)), table2088, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2089 = new TechTalk.SpecFlow.Table(new string[] {
                            "Feature",
                            "Access"});
                table2089.AddRow(new string[] {
                            "Immediate access",
                            "Download upon purchase"});
                table2089.AddRow(new string[] {
                            "Updates",
                            "New activities added monthly"});
                table2089.AddRow(new string[] {
                            "Community",
                            "Private user group"});
                table2089.AddRow(new string[] {
                            "Certification",
                            "Complete course for CEUs"});
#line 225
    testRunner.And("digital components should provide:", ((string)(null)), table2089, "And ");
#line hidden
#line 231
    testRunner.When("I purchase bundle", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2090 = new TechTalk.SpecFlow.Table(new string[] {
                            "Component",
                            "Delivery"});
                table2090.AddRow(new string[] {
                            "Physical items",
                            "Shipped within 2 days"});
                table2090.AddRow(new string[] {
                            "Digital access",
                            "Immediate email with login"});
                table2090.AddRow(new string[] {
                            "QR cards",
                            "Link physical to digital"});
                table2090.AddRow(new string[] {
                            "Support",
                            "Setup video call included"});
#line 232
    testRunner.Then("fulfillment should include:", ((string)(null)), table2090, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use digital companion apps with offline capability")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Use digital companion apps with offline capability")]
        [Xunit.TraitAttribute("Category", "digital-companion")]
        [Xunit.TraitAttribute("Category", "offline-sync")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UseDigitalCompanionAppsWithOfflineCapability()
        {
            string[] tagsOfScenario = new string[] {
                    "digital-companion",
                    "offline-sync",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use digital companion apps with offline capability", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 240
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 241
    testRunner.Given("I have physical card decks with digital companions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 242
    testRunner.And("I am working in area with poor internet connection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 243
    testRunner.When("I scan QR codes to access digital content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2091 = new TechTalk.SpecFlow.Table(new string[] {
                            "Offline Feature",
                            "Capability"});
                table2091.AddRow(new string[] {
                            "Cache content",
                            "Download for offline use"});
                table2091.AddRow(new string[] {
                            "Track progress",
                            "Store locally until sync"});
                table2091.AddRow(new string[] {
                            "Audio playback",
                            "Work without internet"});
                table2091.AddRow(new string[] {
                            "Save recordings",
                            "Store student responses"});
#line 244
    testRunner.Then("the app should:", ((string)(null)), table2091, "Then ");
#line hidden
#line 250
    testRunner.When("internet connection is restored", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2092 = new TechTalk.SpecFlow.Table(new string[] {
                            "Sync Action",
                            "Result"});
                table2092.AddRow(new string[] {
                            "Upload progress",
                            "Send to therapist dashboard"});
                table2092.AddRow(new string[] {
                            "Download updates",
                            "Get new content automatically"});
                table2092.AddRow(new string[] {
                            "Backup recordings",
                            "Store in secure cloud"});
                table2092.AddRow(new string[] {
                            "Merge conflicts",
                            "Handle duplicate entries"});
#line 251
    testRunner.Then("the app should:", ((string)(null)), table2092, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Sell physical products through marketplace platform")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Sell physical products through marketplace platform")]
        [Xunit.TraitAttribute("Category", "marketplace")]
        [Xunit.TraitAttribute("Category", "physical-products")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SellPhysicalProductsThroughMarketplacePlatform()
        {
            string[] tagsOfScenario = new string[] {
                    "marketplace",
                    "physical-products",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sell physical products through marketplace platform", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 259
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 260
    testRunner.Given("I am a verified seller with physical products", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 261
    testRunner.When("I list \"Custom Visual Schedule Cards\" for sale", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2093 = new TechTalk.SpecFlow.Table(new string[] {
                            "Option",
                            "Choices"});
                table2093.AddRow(new string[] {
                            "Size",
                            "2x2\", 3x3\", 4x4\""});
                table2093.AddRow(new string[] {
                            "Quantity",
                            "10, 20, 50 cards"});
                table2093.AddRow(new string[] {
                            "Lamination",
                            "Standard, heavy duty"});
                table2093.AddRow(new string[] {
                            "Customization",
                            "Add student name"});
#line 262
    testRunner.And("I configure product options:", ((string)(null)), table2093, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2094 = new TechTalk.SpecFlow.Table(new string[] {
                            "Feature",
                            "Implementation"});
                table2094.AddRow(new string[] {
                            "Calculate shipping",
                            "Based on size and weight"});
                table2094.AddRow(new string[] {
                            "Manage inventory",
                            "Track stock levels"});
                table2094.AddRow(new string[] {
                            "Handle orders",
                            "Send to print fulfillment"});
                table2094.AddRow(new string[] {
                            "Track delivery",
                            "Provide tracking numbers"});
#line 268
    testRunner.Then("the system should:", ((string)(null)), table2094, "Then ");
#line hidden
#line 274
    testRunner.When("customer places order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2095 = new TechTalk.SpecFlow.Table(new string[] {
                            "Step",
                            "Timeline"});
                table2095.AddRow(new string[] {
                            "Order confirmation",
                            "Immediate"});
                table2095.AddRow(new string[] {
                            "Production start",
                            "Within 24 hours"});
                table2095.AddRow(new string[] {
                            "Quality check",
                            "Before shipping"});
                table2095.AddRow(new string[] {
                            "Shipping",
                            "2-3 business days production"});
                table2095.AddRow(new string[] {
                            "Delivery tracking",
                            "Updates sent to customer"});
#line 275
    testRunner.Then("fulfillment process should:", ((string)(null)), table2095, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track AR marker recognition performance and optimization")]
        [Xunit.TraitAttribute("FeatureTitle", "Physical/Digital Hybrid API Endpoints (FR-013)")]
        [Xunit.TraitAttribute("Description", "Track AR marker recognition performance and optimization")]
        [Xunit.TraitAttribute("Category", "ar-markers")]
        [Xunit.TraitAttribute("Category", "tracking")]
        [Xunit.TraitAttribute("Category", "performance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackARMarkerRecognitionPerformanceAndOptimization()
        {
            string[] tagsOfScenario = new string[] {
                    "ar-markers",
                    "tracking",
                    "performance",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track AR marker recognition performance and optimization", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 284
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 285
    testRunner.Given("I am using AR-enabled therapy materials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 286
    testRunner.When("students interact with AR markers over multiple sessions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2096 = new TechTalk.SpecFlow.Table(new string[] {
                            "Performance Metric",
                            "Measurement"});
                table2096.AddRow(new string[] {
                            "Recognition speed",
                            "Time to detect marker"});
                table2096.AddRow(new string[] {
                            "Tracking stability",
                            "How well marker stays tracked"});
                table2096.AddRow(new string[] {
                            "User engagement",
                            "Time spent with AR content"});
                table2096.AddRow(new string[] {
                            "Completion rates",
                            "Activities finished"});
#line 287
    testRunner.Then("the system should track performance metrics:", ((string)(null)), table2096, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2097 = new TechTalk.SpecFlow.Table(new string[] {
                            "Analytics",
                            "Purpose"});
                table2097.AddRow(new string[] {
                            "Marker effectiveness",
                            "Which markers work best"});
                table2097.AddRow(new string[] {
                            "Device performance",
                            "AR capability by device"});
                table2097.AddRow(new string[] {
                            "Usage patterns",
                            "When/how AR is used"});
                table2097.AddRow(new string[] {
                            "Student outcomes",
                            "Learning improvement with AR"});
#line 293
    testRunner.And("provide analytics on:", ((string)(null)), table2097, "And ");
#line hidden
#line 299
    testRunner.When("performance issues are detected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2098 = new TechTalk.SpecFlow.Table(new string[] {
                            "Issue Type",
                            "Auto-Response"});
                table2098.AddRow(new string[] {
                            "Poor tracking",
                            "Suggest lighting adjustments"});
                table2098.AddRow(new string[] {
                            "Slow recognition",
                            "Recommend marker cleaning"});
                table2098.AddRow(new string[] {
                            "Low engagement",
                            "Suggest alternative activities"});
                table2098.AddRow(new string[] {
                            "Device limitations",
                            "Provide compatibility warnings"});
#line 300
    testRunner.Then("the system should:", ((string)(null)), table2098, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                PhysicalDigitalHybridAPIEndpointsFR_013Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                PhysicalDigitalHybridAPIEndpointsFR_013Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
