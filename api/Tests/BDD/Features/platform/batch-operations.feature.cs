// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Platform
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class BatchAndAsyncOperationsAPIEndpointsFeature : object, Xunit.IClassFixture<BatchAndAsyncOperationsAPIEndpointsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "batch-operations.feature"
#line hidden
        
        public BatchAndAsyncOperationsAPIEndpointsFeature(BatchAndAsyncOperationsAPIEndpointsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/platform", "Batch and Async Operations API Endpoints", "  As a platform user\n  I want to perform batch and asynchronous operations\n  So t" +
                    "hat I can efficiently process large amounts of data", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Batch upload resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Batch and Async Operations API Endpoints")]
        [Xunit.TraitAttribute("Description", "Batch upload resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "batch")]
        [Xunit.TraitAttribute("Category", "upload")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BatchUploadResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "batch",
                    "upload",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch upload resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1835 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1835.AddRow(new string[] {
                            "resources",
                            "array of 50 resource files"});
                table1835.AddRow(new string[] {
                            "metadata",
                            "CSV file with resource info"});
                table1835.AddRow(new string[] {
                            "autoTagging",
                            "true"});
                table1835.AddRow(new string[] {
                            "clinicalReview",
                            "required"});
#line 13
    testRunner.When("I send a POST request to \"/api/batch/resources/upload\" with:", ((string)(null)), table1835, "When ");
#line hidden
#line 19
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1836 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1836.AddRow(new string[] {
                            "batchId",
                            "string"});
                table1836.AddRow(new string[] {
                            "status",
                            "string"});
                table1836.AddRow(new string[] {
                            "totalItems",
                            "number"});
                table1836.AddRow(new string[] {
                            "trackingUrl",
                            "string"});
#line 20
    testRunner.And("the response should contain:", ((string)(null)), table1836, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check batch operation status")]
        [Xunit.TraitAttribute("FeatureTitle", "Batch and Async Operations API Endpoints")]
        [Xunit.TraitAttribute("Description", "Check batch operation status")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "batch")]
        [Xunit.TraitAttribute("Category", "status")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CheckBatchOperationStatus()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "batch",
                    "status",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check batch operation status", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 30
    testRunner.Given("batch operation \"batch-123\" is processing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
    testRunner.When("I send a GET request to \"/api/batch/batch-123/status\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1837 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1837.AddRow(new string[] {
                            "status",
                            "string"});
                table1837.AddRow(new string[] {
                            "processed",
                            "number"});
                table1837.AddRow(new string[] {
                            "failed",
                            "number"});
                table1837.AddRow(new string[] {
                            "remaining",
                            "number"});
                table1837.AddRow(new string[] {
                            "estimatedTime",
                            "number"});
                table1837.AddRow(new string[] {
                            "errors",
                            "array"});
#line 33
    testRunner.And("the response should contain:", ((string)(null)), table1837, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Batch import students")]
        [Xunit.TraitAttribute("FeatureTitle", "Batch and Async Operations API Endpoints")]
        [Xunit.TraitAttribute("Description", "Batch import students")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "batch")]
        [Xunit.TraitAttribute("Category", "import")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BatchImportStudents()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "batch",
                    "import",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Batch import students", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1838 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1838.AddRow(new string[] {
                            "format",
                            "csv"});
                table1838.AddRow(new string[] {
                            "mappings",
                            "object"});
                table1838.AddRow(new string[] {
                            "skipDuplicates",
                            "true"});
                table1838.AddRow(new string[] {
                            "validateOnly",
                            "false"});
#line 45
    testRunner.When("I send a POST request to \"/api/batch/students/import\" with:", ((string)(null)), table1838, "When ");
#line hidden
#line 51
    testRunner.And("I attach \"students.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
    testRunner.And("import job should be queued", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
    testRunner.And("validation results should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create recurring sessions in batch")]
        [Xunit.TraitAttribute("FeatureTitle", "Batch and Async Operations API Endpoints")]
        [Xunit.TraitAttribute("Description", "Create recurring sessions in batch")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "batch")]
        [Xunit.TraitAttribute("Category", "sessions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateRecurringSessionsInBatch()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "batch",
                    "sessions",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create recurring sessions in batch", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1839 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1839.AddRow(new string[] {
                            "studentIds",
                            "[\"s1\", \"s2\", \"s3\", \"s4\", \"s5\"]"});
                table1839.AddRow(new string[] {
                            "pattern",
                            "weekly"});
                table1839.AddRow(new string[] {
                            "dayOfWeek",
                            "tuesday"});
                table1839.AddRow(new string[] {
                            "time",
                            "10:00"});
                table1839.AddRow(new string[] {
                            "duration",
                            "30"});
                table1839.AddRow(new string[] {
                            "startDate",
                            "2024-02-01"});
                table1839.AddRow(new string[] {
                            "endDate",
                            "2024-05-31"});
#line 59
    testRunner.When("I send a POST request to \"/api/batch/sessions/create\" with:", ((string)(null)), table1839, "When ");
#line hidden
#line 68
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
    testRunner.And("sessions should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
    testRunner.And("calendar invites should be queued", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Export large dataset")]
        [Xunit.TraitAttribute("FeatureTitle", "Batch and Async Operations API Endpoints")]
        [Xunit.TraitAttribute("Description", "Export large dataset")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "batch")]
        [Xunit.TraitAttribute("Category", "export")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ExportLargeDataset()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "batch",
                    "export",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export large dataset", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1840 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1840.AddRow(new string[] {
                            "exportType",
                            "student-progress"});
                table1840.AddRow(new string[] {
                            "dateRange",
                            "{\"start\": \"2023-01-01\", \"end\": \"2023-12-31\"}"});
                table1840.AddRow(new string[] {
                            "format",
                            "excel"});
                table1840.AddRow(new string[] {
                            "includeGraphs",
                            "true"});
                table1840.AddRow(new string[] {
                            "splitBy",
                            "student"});
#line 75
    testRunner.When("I send a POST request to \"/api/batch/data-export\" with:", ((string)(null)), table1840, "When ");
#line hidden
#line 82
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
    testRunner.And("export job should be queued", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    testRunner.And("notification should be sent when complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Bulk AI content generation")]
        [Xunit.TraitAttribute("FeatureTitle", "Batch and Async Operations API Endpoints")]
        [Xunit.TraitAttribute("Description", "Bulk AI content generation")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "async")]
        [Xunit.TraitAttribute("Category", "ai")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BulkAIContentGeneration()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "async",
                    "ai",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bulk AI content generation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1841 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1841.AddRow(new string[] {
                            "requests",
                            "array of 20 generation requests"});
                table1841.AddRow(new string[] {
                            "priority",
                            "standard"});
                table1841.AddRow(new string[] {
                            "notification",
                            "email"});
#line 89
    testRunner.When("I send a POST request to \"/api/async/ai-generation/bulk\" with:", ((string)(null)), table1841, "When ");
#line hidden
#line 94
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1842 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1842.AddRow(new string[] {
                            "jobId",
                            "string"});
                table1842.AddRow(new string[] {
                            "queuePosition",
                            "number"});
                table1842.AddRow(new string[] {
                            "estimatedCompletion",
                            "string"});
#line 95
    testRunner.And("the response should contain:", ((string)(null)), table1842, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate complex report asynchronously")]
        [Xunit.TraitAttribute("FeatureTitle", "Batch and Async Operations API Endpoints")]
        [Xunit.TraitAttribute("Description", "Generate complex report asynchronously")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "async")]
        [Xunit.TraitAttribute("Category", "reports")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateComplexReportAsynchronously()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "async",
                    "reports",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate complex report asynchronously", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1843 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1843.AddRow(new string[] {
                            "reportType",
                            "annual-outcomes"});
                table1843.AddRow(new string[] {
                            "filters",
                            "{\"discipline\": \"OT\"}"});
                table1843.AddRow(new string[] {
                            "sections",
                            "[\"outcomes\", \"billing\", \"productivity\"]"});
                table1843.AddRow(new string[] {
                            "format",
                            "pdf"});
#line 104
    testRunner.When("I send a POST request to \"/api/async/reports/generate\" with:", ((string)(null)), table1843, "When ");
#line hidden
#line 110
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
    testRunner.And("report generation should begin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
    testRunner.And("progress should be trackable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancel batch operation")]
        [Xunit.TraitAttribute("FeatureTitle", "Batch and Async Operations API Endpoints")]
        [Xunit.TraitAttribute("Description", "Cancel batch operation")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "batch")]
        [Xunit.TraitAttribute("Category", "cancellation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CancelBatchOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "batch",
                    "cancellation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel batch operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 116
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 117
    testRunner.Given("batch operation \"batch-123\" is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 118
    testRunner.When("I send a DELETE request to \"/api/batch/batch-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 119
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
    testRunner.And("operation should be cancelled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
    testRunner.And("partial results should be retained", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                BatchAndAsyncOperationsAPIEndpointsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                BatchAndAsyncOperationsAPIEndpointsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
