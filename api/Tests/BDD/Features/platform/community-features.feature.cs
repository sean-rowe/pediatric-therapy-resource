// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Platform
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CommunityFeaturesAPIEndpointsFR_030Feature : object, Xunit.IClassFixture<CommunityFeaturesAPIEndpointsFR_030Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "community-features.feature"
#line hidden
        
        public CommunityFeaturesAPIEndpointsFR_030Feature(CommunityFeaturesAPIEndpointsFR_030Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/platform", "Community Features API Endpoints (FR-030)", "  As a platform user\n  I want limited community interaction features\n  So that I " +
                    "can share experiences and get help", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Submit resource review")]
        [Xunit.TraitAttribute("FeatureTitle", "Community Features API Endpoints (FR-030)")]
        [Xunit.TraitAttribute("Description", "Submit resource review")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "community")]
        [Xunit.TraitAttribute("Category", "reviews")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubmitResourceReview()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "community",
                    "reviews",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit resource review", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1844 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1844.AddRow(new string[] {
                            "rating",
                            "5"});
                table1844.AddRow(new string[] {
                            "title",
                            "\"Perfect for my students!\""});
                table1844.AddRow(new string[] {
                            "comment",
                            "\"Clear instructions, engaging\""});
                table1844.AddRow(new string[] {
                            "ageGroup",
                            "\"5-7 years\""});
                table1844.AddRow(new string[] {
                            "effectiveness",
                            "\"highly-effective\""});
#line 13
    testRunner.When("I send a POST request to \"/api/community/resources/res-123/review\" with:", ((string)(null)), table1844, "When ");
#line hidden
#line 20
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
    testRunner.And("review should be submitted for moderation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.And("contributor should receive notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View Q&A for resource")]
        [Xunit.TraitAttribute("FeatureTitle", "Community Features API Endpoints (FR-030)")]
        [Xunit.TraitAttribute("Description", "View Q&A for resource")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "community")]
        [Xunit.TraitAttribute("Category", "qa")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewQAForResource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "community",
                    "qa",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View Q&A for resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 27
    testRunner.When("I send a GET request to \"/api/community/resources/res-123/qa\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1845 = new TechTalk.SpecFlow.Table(new string[] {
                            "questionId",
                            "question",
                            "answers",
                            "helpful"});
                table1845.AddRow(new string[] {
                            "q-1",
                            "\"Can this be used for...\"",
                            "3",
                            "12"});
                table1845.AddRow(new string[] {
                            "q-2",
                            "\"Modifications for...\"",
                            "2",
                            "8"});
#line 29
    testRunner.And("Q&A should include:", ((string)(null)), table1845, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Submit success story")]
        [Xunit.TraitAttribute("FeatureTitle", "Community Features API Endpoints (FR-030)")]
        [Xunit.TraitAttribute("Description", "Submit success story")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "community")]
        [Xunit.TraitAttribute("Category", "stories")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubmitSuccessStory()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "community",
                    "stories",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit success story", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1846 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1846.AddRow(new string[] {
                            "title",
                            "\"Breakthrough with AAC\""});
                table1846.AddRow(new string[] {
                            "story",
                            "\"After 6 months using...\""});
                table1846.AddRow(new string[] {
                            "resourcesUsed",
                            "[\"res-123\", \"res-124\"]"});
                table1846.AddRow(new string[] {
                            "outcomes",
                            "\"First 2-word combinations\""});
                table1846.AddRow(new string[] {
                            "permission",
                            "\"anonymous\""});
#line 37
    testRunner.When("I send a POST request to \"/api/community/success-stories/submit\" with:", ((string)(null)), table1846, "When ");
#line hidden
#line 44
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
    testRunner.And("story should be queued for review", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
    testRunner.And("editorial team should be notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Vote on feature request")]
        [Xunit.TraitAttribute("FeatureTitle", "Community Features API Endpoints (FR-030)")]
        [Xunit.TraitAttribute("Description", "Vote on feature request")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "community")]
        [Xunit.TraitAttribute("Category", "features")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void VoteOnFeatureRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "community",
                    "features",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vote on feature request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1847 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1847.AddRow(new string[] {
                            "requestId",
                            "feature-req-456"});
                table1847.AddRow(new string[] {
                            "voteType",
                            "upvote"});
                table1847.AddRow(new string[] {
                            "comment",
                            "\"This would save hours!\""});
#line 51
    testRunner.When("I send a POST request to \"/api/community/feature-requests/vote\" with:", ((string)(null)), table1847, "When ");
#line hidden
#line 56
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
    testRunner.And("vote should be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
    testRunner.And("request priority should update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Submit bug report")]
        [Xunit.TraitAttribute("FeatureTitle", "Community Features API Endpoints (FR-030)")]
        [Xunit.TraitAttribute("Description", "Submit bug report")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "community")]
        [Xunit.TraitAttribute("Category", "bugs")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubmitBugReport()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "community",
                    "bugs",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit bug report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1848 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1848.AddRow(new string[] {
                            "title",
                            "\"PDF download fails\""});
                table1848.AddRow(new string[] {
                            "description",
                            "\"When clicking download...\""});
                table1848.AddRow(new string[] {
                            "steps",
                            "[\"Go to resource\", \"Click download\"]"});
                table1848.AddRow(new string[] {
                            "browser",
                            "\"Chrome 120\""});
                table1848.AddRow(new string[] {
                            "severity",
                            "\"medium\""});
#line 63
    testRunner.When("I send a POST request to \"/api/community/bug-reports/submit\" with:", ((string)(null)), table1848, "When ");
#line hidden
#line 70
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.And("ticket should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
    testRunner.And("user should receive tracking number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access moderation queue")]
        [Xunit.TraitAttribute("FeatureTitle", "Community Features API Endpoints (FR-030)")]
        [Xunit.TraitAttribute("Description", "Access moderation queue")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "community")]
        [Xunit.TraitAttribute("Category", "moderation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessModerationQueue()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "community",
                    "moderation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access moderation queue", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 77
    testRunner.Given("I have moderator privileges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 78
    testRunner.When("I send a GET request to \"/api/community/moderation/queue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1849 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "count",
                            "oldest"});
                table1849.AddRow(new string[] {
                            "reviews",
                            "12",
                            "2 hours"});
                table1849.AddRow(new string[] {
                            "qa",
                            "5",
                            "1 day"});
                table1849.AddRow(new string[] {
                            "stories",
                            "3",
                            "3 days"});
#line 80
    testRunner.And("queue should show:", ((string)(null)), table1849, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Moderate community content")]
        [Xunit.TraitAttribute("FeatureTitle", "Community Features API Endpoints (FR-030)")]
        [Xunit.TraitAttribute("Description", "Moderate community content")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "community")]
        [Xunit.TraitAttribute("Category", "moderate")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ModerateCommunityContent()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "community",
                    "moderate",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Moderate community content", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 89
    testRunner.Given("I have moderator privileges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1850 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1850.AddRow(new string[] {
                            "action",
                            "approve"});
                table1850.AddRow(new string[] {
                            "reason",
                            "\"Helpful and appropriate\""});
                table1850.AddRow(new string[] {
                            "edited",
                            "false"});
#line 90
    testRunner.When("I send a PUT request to \"/api/community/content/review-123/moderate\" with:", ((string)(null)), table1850, "When ");
#line hidden
#line 95
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
    testRunner.And("content should be published", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
    testRunner.And("author should be notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View community guidelines")]
        [Xunit.TraitAttribute("FeatureTitle", "Community Features API Endpoints (FR-030)")]
        [Xunit.TraitAttribute("Description", "View community guidelines")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "community")]
        [Xunit.TraitAttribute("Category", "guidelines")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewCommunityGuidelines()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "community",
                    "guidelines",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View community guidelines", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 102
    testRunner.When("I send a GET request to \"/api/community/guidelines\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1851 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "content"});
                table1851.AddRow(new string[] {
                            "acceptable",
                            "Professional discourse"});
                table1851.AddRow(new string[] {
                            "prohibited",
                            "Marketing, spam, PHI"});
                table1851.AddRow(new string[] {
                            "moderation",
                            "Review process"});
                table1851.AddRow(new string[] {
                            "consequences",
                            "Warning system"});
#line 104
    testRunner.And("guidelines should include:", ((string)(null)), table1851, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Report inappropriate content")]
        [Xunit.TraitAttribute("FeatureTitle", "Community Features API Endpoints (FR-030)")]
        [Xunit.TraitAttribute("Description", "Report inappropriate content")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "community")]
        [Xunit.TraitAttribute("Category", "report")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ReportInappropriateContent()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "community",
                    "report",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Report inappropriate content", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1852 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1852.AddRow(new string[] {
                            "contentType",
                            "review"});
                table1852.AddRow(new string[] {
                            "contentId",
                            "review-789"});
                table1852.AddRow(new string[] {
                            "reason",
                            "inappropriate-content"});
                table1852.AddRow(new string[] {
                            "details",
                            "\"Contains student name\""});
#line 114
    testRunner.When("I send a POST request to \"/api/community/report-content\" with:", ((string)(null)), table1852, "When ");
#line hidden
#line 120
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
    testRunner.And("report should be logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
    testRunner.And("content should be flagged for review", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View feature requests")]
        [Xunit.TraitAttribute("FeatureTitle", "Community Features API Endpoints (FR-030)")]
        [Xunit.TraitAttribute("Description", "View feature requests")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "community")]
        [Xunit.TraitAttribute("Category", "requests")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewFeatureRequests()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "community",
                    "requests",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View feature requests", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 126
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 127
    testRunner.When("I send a GET request to \"/api/community/feature-requests?status=open&sort=votes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1853 = new TechTalk.SpecFlow.Table(new string[] {
                            "requestId",
                            "title",
                            "votes",
                            "status"});
                table1853.AddRow(new string[] {
                            "req-1",
                            "\"Offline mode for iPad\"",
                            "245",
                            "under-review"});
                table1853.AddRow(new string[] {
                            "req-2",
                            "\"More languages\"",
                            "189",
                            "planned"});
                table1853.AddRow(new string[] {
                            "req-3",
                            "\"Video tutorials\"",
                            "156",
                            "open"});
#line 129
    testRunner.And("requests should be sorted by:", ((string)(null)), table1853, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CommunityFeaturesAPIEndpointsFR_030Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CommunityFeaturesAPIEndpointsFR_030Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
