// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Platform
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class APIManagementAndDeveloperToolsFeature : object, Xunit.IClassFixture<APIManagementAndDeveloperToolsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "api-management.feature"
#line hidden
        
        public APIManagementAndDeveloperToolsFeature(APIManagementAndDeveloperToolsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/platform", "API Management and Developer Tools", "  As a developer or third-party integrator\n  I want API management tools\n  So tha" +
                    "t I can integrate with the UPTRMS platform", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"developer@company.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Register new application")]
        [Xunit.TraitAttribute("FeatureTitle", "API Management and Developer Tools")]
        [Xunit.TraitAttribute("Description", "Register new application")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "api-management")]
        [Xunit.TraitAttribute("Category", "apps")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RegisterNewApplication()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "api-management",
                    "apps",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register new application", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1864 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1864.AddRow(new string[] {
                            "appName",
                            "Therapy Assistant Pro"});
                table1864.AddRow(new string[] {
                            "description",
                            "Mobile app for therapists"});
                table1864.AddRow(new string[] {
                            "redirectUris",
                            "[\"https://app.example.com/callback\"]"});
                table1864.AddRow(new string[] {
                            "scopes",
                            "[\"read:resources\", \"write:sessions\"]"});
                table1864.AddRow(new string[] {
                            "webhookUrl",
                            "https://app.example.com/webhook"});
#line 13
    testRunner.When("I send a POST request to \"/api/developer/apps\" with:", ((string)(null)), table1864, "When ");
#line hidden
#line 20
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1865 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1865.AddRow(new string[] {
                            "appId",
                            "string"});
                table1865.AddRow(new string[] {
                            "clientId",
                            "string"});
                table1865.AddRow(new string[] {
                            "clientSecret",
                            "string"});
                table1865.AddRow(new string[] {
                            "apiKey",
                            "string"});
#line 21
    testRunner.And("the response should contain:", ((string)(null)), table1865, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Manage API keys")]
        [Xunit.TraitAttribute("FeatureTitle", "API Management and Developer Tools")]
        [Xunit.TraitAttribute("Description", "Manage API keys")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "api-management")]
        [Xunit.TraitAttribute("Category", "keys")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ManageAPIKeys()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "api-management",
                    "keys",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manage API keys", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 31
    testRunner.Given("I have app \"app-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
    testRunner.When("I send a GET request to \"/api/developer/apps/app-123/keys\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1866 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1866.AddRow(new string[] {
                            "keys",
                            "array"});
                table1866.AddRow(new string[] {
                            "rateLimit",
                            "object"});
                table1866.AddRow(new string[] {
                            "usage",
                            "object"});
#line 34
    testRunner.And("the response should contain:", ((string)(null)), table1866, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Configure rate limits")]
        [Xunit.TraitAttribute("FeatureTitle", "API Management and Developer Tools")]
        [Xunit.TraitAttribute("Description", "Configure rate limits")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "api-management")]
        [Xunit.TraitAttribute("Category", "rate-limiting")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConfigureRateLimits()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "api-management",
                    "rate-limiting",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure rate limits", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1867 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1867.AddRow(new string[] {
                            "requestsPerHour",
                            "10000"});
                table1867.AddRow(new string[] {
                            "burstLimit",
                            "100"});
                table1867.AddRow(new string[] {
                            "concurrentLimit",
                            "50"});
#line 43
    testRunner.When("I send a PUT request to \"/api/developer/apps/app-123/rate-limits\" with:", ((string)(null)), table1867, "When ");
#line hidden
#line 48
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
    testRunner.And("rate limits should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get API usage statistics")]
        [Xunit.TraitAttribute("FeatureTitle", "API Management and Developer Tools")]
        [Xunit.TraitAttribute("Description", "Get API usage statistics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "api-management")]
        [Xunit.TraitAttribute("Category", "usage")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetAPIUsageStatistics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "api-management",
                    "usage",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get API usage statistics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 54
    testRunner.When("I send a GET request to \"/api/developer/usage?period=month\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1868 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1868.AddRow(new string[] {
                            "totalRequests",
                            "number"});
                table1868.AddRow(new string[] {
                            "successfulCalls",
                            "number"});
                table1868.AddRow(new string[] {
                            "errorRate",
                            "number"});
                table1868.AddRow(new string[] {
                            "endpointBreakdown",
                            "object"});
                table1868.AddRow(new string[] {
                            "quotaRemaining",
                            "number"});
#line 56
    testRunner.And("the response should contain:", ((string)(null)), table1868, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access API documentation")]
        [Xunit.TraitAttribute("FeatureTitle", "API Management and Developer Tools")]
        [Xunit.TraitAttribute("Description", "Access API documentation")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "api-management")]
        [Xunit.TraitAttribute("Category", "docs")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessAPIDocumentation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "api-management",
                    "docs",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access API documentation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 67
    testRunner.When("I send a GET request to \"/api/developer/documentation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1869 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1869.AddRow(new string[] {
                            "openApiSpec",
                            "object"});
                table1869.AddRow(new string[] {
                            "interactiveDocs",
                            "string"});
                table1869.AddRow(new string[] {
                            "sdkLinks",
                            "object"});
                table1869.AddRow(new string[] {
                            "changelog",
                            "array"});
#line 69
    testRunner.And("the response should contain:", ((string)(null)), table1869, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Configure webhooks")]
        [Xunit.TraitAttribute("FeatureTitle", "API Management and Developer Tools")]
        [Xunit.TraitAttribute("Description", "Configure webhooks")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "api-management")]
        [Xunit.TraitAttribute("Category", "webhooks")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConfigureWebhooks()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "api-management",
                    "webhooks",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure webhooks", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1870 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1870.AddRow(new string[] {
                            "url",
                            "https://app.example.com/webhook"});
                table1870.AddRow(new string[] {
                            "events",
                            "[\"resource.created\", \"session.completed\"]"});
                table1870.AddRow(new string[] {
                            "secret",
                            "webhook-secret-key"});
                table1870.AddRow(new string[] {
                            "active",
                            "true"});
#line 79
    testRunner.When("I send a POST request to \"/api/developer/webhooks\" with:", ((string)(null)), table1870, "When ");
#line hidden
#line 85
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
    testRunner.And("webhook should be registered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.And("test event should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access sandbox environment")]
        [Xunit.TraitAttribute("FeatureTitle", "API Management and Developer Tools")]
        [Xunit.TraitAttribute("Description", "Access sandbox environment")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "api-management")]
        [Xunit.TraitAttribute("Category", "sandbox")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessSandboxEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "api-management",
                    "sandbox",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access sandbox environment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 92
    testRunner.When("I send a GET request to \"/api/developer/sandbox\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1871 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1871.AddRow(new string[] {
                            "sandboxUrl",
                            "string"});
                table1871.AddRow(new string[] {
                            "testCredentials",
                            "object"});
                table1871.AddRow(new string[] {
                            "sampleData",
                            "object"});
                table1871.AddRow(new string[] {
                            "resetEndpoint",
                            "string"});
#line 94
    testRunner.And("the response should contain:", ((string)(null)), table1871, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                APIManagementAndDeveloperToolsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                APIManagementAndDeveloperToolsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
