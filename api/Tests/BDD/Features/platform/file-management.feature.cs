// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Platform
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class FileManagementAPIEndpointsFeature : object, Xunit.IClassFixture<FileManagementAPIEndpointsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "file-management.feature"
#line hidden
        
        public FileManagementAPIEndpointsFeature(FileManagementAPIEndpointsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/platform", "File Management API Endpoints", "  As a platform user\n  I want to manage files and documents\n  So that I can organ" +
                    "ize and access therapy materials efficiently", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Upload file with metadata")]
        [Xunit.TraitAttribute("FeatureTitle", "File Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Upload file with metadata")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "files")]
        [Xunit.TraitAttribute("Category", "upload")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UploadFileWithMetadata()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "files",
                    "upload",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Upload file with metadata", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1891 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1891.AddRow(new string[] {
                            "fileName",
                            "assessment-report.pdf"});
                table1891.AddRow(new string[] {
                            "fileType",
                            "application/pdf"});
                table1891.AddRow(new string[] {
                            "category",
                            "student-documents"});
                table1891.AddRow(new string[] {
                            "tags",
                            "[\"assessment\", \"2024\"]"});
                table1891.AddRow(new string[] {
                            "encrypted",
                            "true"});
#line 13
    testRunner.When("I send a POST request to \"/api/files/upload\" with:", ((string)(null)), table1891, "When ");
#line hidden
#line 20
    testRunner.And("I attach the file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1892 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1892.AddRow(new string[] {
                            "fileId",
                            "string"});
                table1892.AddRow(new string[] {
                            "uploadUrl",
                            "string"});
                table1892.AddRow(new string[] {
                            "checksum",
                            "string"});
#line 22
    testRunner.And("the response should contain:", ((string)(null)), table1892, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Download file")]
        [Xunit.TraitAttribute("FeatureTitle", "File Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Download file")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "files")]
        [Xunit.TraitAttribute("Category", "download")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DownloadFile()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "files",
                    "download",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Download file", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 31
    testRunner.Given("file \"file-123\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
    testRunner.When("I send a GET request to \"/api/files/file-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1893 = new TechTalk.SpecFlow.Table(new string[] {
                            "header",
                            "value"});
                table1893.AddRow(new string[] {
                            "Content-Type",
                            "application/pdf"});
                table1893.AddRow(new string[] {
                            "Content-Disposition",
                            "attachment"});
#line 34
    testRunner.And("the response headers should contain:", ((string)(null)), table1893, "And ");
#line hidden
#line 38
    testRunner.And("file should be decrypted if encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Scan file for security")]
        [Xunit.TraitAttribute("FeatureTitle", "File Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Scan file for security")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "files")]
        [Xunit.TraitAttribute("Category", "security")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ScanFileForSecurity()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "files",
                    "security",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scan file for security", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1894 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1894.AddRow(new string[] {
                            "fileId",
                            "file-123"});
                table1894.AddRow(new string[] {
                            "scanType",
                            "[\"virus\", \"malware\", \"content\"]"});
#line 43
    testRunner.When("I send a POST request to \"/api/files/scan\" with:", ((string)(null)), table1894, "When ");
#line hidden
#line 47
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1895 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1895.AddRow(new string[] {
                            "scanResult",
                            "string"});
                table1895.AddRow(new string[] {
                            "threats",
                            "array"});
                table1895.AddRow(new string[] {
                            "quarantined",
                            "boolean"});
#line 48
    testRunner.And("the response should contain:", ((string)(null)), table1895, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update file metadata")]
        [Xunit.TraitAttribute("FeatureTitle", "File Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Update file metadata")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "files")]
        [Xunit.TraitAttribute("Category", "metadata")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateFileMetadata()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "files",
                    "metadata",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update file metadata", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 57
    testRunner.Given("file \"file-123\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1896 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1896.AddRow(new string[] {
                            "tags",
                            "[\"reviewed\", \"approved\"]"});
                table1896.AddRow(new string[] {
                            "category",
                            "clinical-resources"});
                table1896.AddRow(new string[] {
                            "visibility",
                            "organization"});
#line 58
    testRunner.When("I send a PUT request to \"/api/files/file-123/metadata\" with:", ((string)(null)), table1896, "When ");
#line hidden
#line 63
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
    testRunner.And("metadata should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compress multiple files")]
        [Xunit.TraitAttribute("FeatureTitle", "File Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Compress multiple files")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "files")]
        [Xunit.TraitAttribute("Category", "compression")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompressMultipleFiles()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "files",
                    "compression",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compress multiple files", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1897 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1897.AddRow(new string[] {
                            "fileIds",
                            "[\"file-1\", \"file-2\", \"file-3\"]"});
                table1897.AddRow(new string[] {
                            "format",
                            "zip"});
                table1897.AddRow(new string[] {
                            "fileName",
                            "student-resources.zip"});
#line 69
    testRunner.When("I send a POST request to \"/api/files/compress\" with:", ((string)(null)), table1897, "When ");
#line hidden
#line 74
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
    testRunner.And("compression job should start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
    testRunner.And("download link should be provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search files")]
        [Xunit.TraitAttribute("FeatureTitle", "File Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Search files")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "files")]
        [Xunit.TraitAttribute("Category", "search")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SearchFiles()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "files",
                    "search",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search files", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 81
    testRunner.When("I send a GET request to \"/api/files/search?q=assessment&type=pdf&date=2024\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1898 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1898.AddRow(new string[] {
                            "files",
                            "array"});
                table1898.AddRow(new string[] {
                            "total",
                            "number"});
                table1898.AddRow(new string[] {
                            "facets",
                            "object"});
#line 83
    testRunner.And("the response should contain:", ((string)(null)), table1898, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete file with audit")]
        [Xunit.TraitAttribute("FeatureTitle", "File Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Delete file with audit")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "files")]
        [Xunit.TraitAttribute("Category", "deletion")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DeleteFileWithAudit()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "files",
                    "deletion",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete file with audit", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 92
    testRunner.Given("file \"file-123\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1899 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1899.AddRow(new string[] {
                            "reason",
                            "outdated-content"});
                table1899.AddRow(new string[] {
                            "permanent",
                            "false"});
#line 93
    testRunner.When("I send a DELETE request to \"/api/files/file-123\" with:", ((string)(null)), table1899, "When ");
#line hidden
#line 97
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
    testRunner.And("file should be moved to trash", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
    testRunner.And("deletion should be logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Convert file format")]
        [Xunit.TraitAttribute("FeatureTitle", "File Management API Endpoints")]
        [Xunit.TraitAttribute("Description", "Convert file format")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "files")]
        [Xunit.TraitAttribute("Category", "conversion")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConvertFileFormat()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "files",
                    "conversion",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert file format", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1900 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1900.AddRow(new string[] {
                            "fileId",
                            "file-123"});
                table1900.AddRow(new string[] {
                            "fromFormat",
                            "docx"});
                table1900.AddRow(new string[] {
                            "toFormat",
                            "pdf"});
                table1900.AddRow(new string[] {
                            "preserve",
                            "formatting"});
#line 104
    testRunner.When("I send a POST request to \"/api/files/convert\" with:", ((string)(null)), table1900, "When ");
#line hidden
#line 110
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
    testRunner.And("conversion should begin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
    testRunner.And("new file should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                FileManagementAPIEndpointsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                FileManagementAPIEndpointsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
