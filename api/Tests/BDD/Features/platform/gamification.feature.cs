// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Platform
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GamificationAPIEndpointsFR_027Feature : object, Xunit.IClassFixture<GamificationAPIEndpointsFR_027Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "gamification.feature"
#line hidden
        
        public GamificationAPIEndpointsFR_027Feature(GamificationAPIEndpointsFR_027Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/platform", "Gamification API Endpoints (FR-027)", "  As a platform user (therapist or student)\n  I want gamification and reward syst" +
                    "ems\n  So that students stay motivated and engaged", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Award points for activity completion")]
        [Xunit.TraitAttribute("FeatureTitle", "Gamification API Endpoints (FR-027)")]
        [Xunit.TraitAttribute("Description", "Award points for activity completion")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "gamification")]
        [Xunit.TraitAttribute("Category", "points")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AwardPointsForActivityCompletion()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "gamification",
                    "points",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Award points for activity completion", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.Given("I am a therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1901 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1901.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table1901.AddRow(new string[] {
                            "activityId",
                            "activity-456"});
                table1901.AddRow(new string[] {
                            "pointsEarned",
                            "50"});
                table1901.AddRow(new string[] {
                            "reason",
                            "\"Perfect score\""});
                table1901.AddRow(new string[] {
                            "bonusPoints",
                            "10"});
#line 14
    testRunner.When("I send a POST request to \"/api/gamification/points/award\" with:", ((string)(null)), table1901, "When ");
#line hidden
#line 21
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
    testRunner.And("student\'s point total should increase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
    testRunner.And("achievement notification should trigger", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View student gamification progress")]
        [Xunit.TraitAttribute("FeatureTitle", "Gamification API Endpoints (FR-027)")]
        [Xunit.TraitAttribute("Description", "View student gamification progress")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "gamification")]
        [Xunit.TraitAttribute("Category", "progress")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewStudentGamificationProgress()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "gamification",
                    "progress",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View student gamification progress", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 28
    testRunner.When("I send a GET request to \"/api/gamification/student/student-123/progress\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1902 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1902.AddRow(new string[] {
                            "totalPoints",
                            "number"});
                table1902.AddRow(new string[] {
                            "currentLevel",
                            "number"});
                table1902.AddRow(new string[] {
                            "badges",
                            "array"});
                table1902.AddRow(new string[] {
                            "streaks",
                            "object"});
                table1902.AddRow(new string[] {
                            "leaderboardRank",
                            "number"});
#line 30
    testRunner.And("the response should contain:", ((string)(null)), table1902, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unlock achievement badge")]
        [Xunit.TraitAttribute("FeatureTitle", "Gamification API Endpoints (FR-027)")]
        [Xunit.TraitAttribute("Description", "Unlock achievement badge")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "gamification")]
        [Xunit.TraitAttribute("Category", "badges")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UnlockAchievementBadge()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "gamification",
                    "badges",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unlock achievement badge", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1903 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1903.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table1903.AddRow(new string[] {
                            "badgeId",
                            "first-perfect-score"});
                table1903.AddRow(new string[] {
                            "criteria",
                            "{\"score\": 100, \"attempts\": 1}"});
#line 41
    testRunner.When("I send a POST request to \"/api/gamification/badges/unlock\" with:", ((string)(null)), table1903, "When ");
#line hidden
#line 46
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
    testRunner.And("badge should be added to collection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
    testRunner.And("celebration animation should be triggered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View class leaderboard")]
        [Xunit.TraitAttribute("FeatureTitle", "Gamification API Endpoints (FR-027)")]
        [Xunit.TraitAttribute("Description", "View class leaderboard")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "gamification")]
        [Xunit.TraitAttribute("Category", "leaderboard")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewClassLeaderboard()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "gamification",
                    "leaderboard",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View class leaderboard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 53
    testRunner.When("I send a GET request to \"/api/gamification/leaderboards/class-456?privacy=anonymo" +
                        "us\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1904 = new TechTalk.SpecFlow.Table(new string[] {
                            "rank",
                            "displayName",
                            "points",
                            "badges"});
                table1904.AddRow(new string[] {
                            "1",
                            "Star Player",
                            "1250",
                            "15"});
                table1904.AddRow(new string[] {
                            "2",
                            "Champion",
                            "1100",
                            "12"});
                table1904.AddRow(new string[] {
                            "3",
                            "Rising Star",
                            "950",
                            "10"});
#line 55
    testRunner.And("leaderboard should show:", ((string)(null)), table1904, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access custom reward store")]
        [Xunit.TraitAttribute("FeatureTitle", "Gamification API Endpoints (FR-027)")]
        [Xunit.TraitAttribute("Description", "Access custom reward store")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "gamification")]
        [Xunit.TraitAttribute("Category", "rewards")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessCustomRewardStore()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "gamification",
                    "rewards",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access custom reward store", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1905 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1905.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table1905.AddRow(new string[] {
                            "storeId",
                            "classroom-store"});
#line 64
    testRunner.When("I send a POST request to \"/api/gamification/rewards/store\" with:", ((string)(null)), table1905, "When ");
#line hidden
#line 68
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1906 = new TechTalk.SpecFlow.Table(new string[] {
                            "item",
                            "cost",
                            "type"});
                table1906.AddRow(new string[] {
                            "Extra iPad Time",
                            "100",
                            "privilege"});
                table1906.AddRow(new string[] {
                            "Sticker Pack",
                            "50",
                            "physical"});
                table1906.AddRow(new string[] {
                            "Homework Pass",
                            "200",
                            "privilege"});
                table1906.AddRow(new string[] {
                            "Virtual Pet",
                            "150",
                            "digital"});
#line 69
    testRunner.And("store should display:", ((string)(null)), table1906, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Redeem points for rewards")]
        [Xunit.TraitAttribute("FeatureTitle", "Gamification API Endpoints (FR-027)")]
        [Xunit.TraitAttribute("Description", "Redeem points for rewards")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "gamification")]
        [Xunit.TraitAttribute("Category", "redeem")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RedeemPointsForRewards()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "gamification",
                    "redeem",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Redeem points for rewards", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1907 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1907.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table1907.AddRow(new string[] {
                            "rewardId",
                            "extra-ipad-time"});
                table1907.AddRow(new string[] {
                            "pointsCost",
                            "100"});
#line 79
    testRunner.When("I send a POST request to \"/api/gamification/rewards/redeem\" with:", ((string)(null)), table1907, "When ");
#line hidden
#line 84
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
    testRunner.And("points should be deducted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.And("reward should be granted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.And("redemption history should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get celebration animations")]
        [Xunit.TraitAttribute("FeatureTitle", "Gamification API Endpoints (FR-027)")]
        [Xunit.TraitAttribute("Description", "Get celebration animations")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "gamification")]
        [Xunit.TraitAttribute("Category", "celebrations")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetCelebrationAnimations()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "gamification",
                    "celebrations",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get celebration animations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 92
    testRunner.When("I send a GET request to \"/api/gamification/celebrations?trigger=level-up\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1908 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "animation",
                            "sound"});
                table1908.AddRow(new string[] {
                            "confetti",
                            "falling-confetti",
                            "cheer.mp3"});
                table1908.AddRow(new string[] {
                            "fireworks",
                            "firework-burst",
                            "boom.mp3"});
                table1908.AddRow(new string[] {
                            "stars",
                            "shooting-stars",
                            "twinkle.mp3"});
#line 94
    testRunner.And("celebrations should include:", ((string)(null)), table1908, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track effort-based rewards")]
        [Xunit.TraitAttribute("FeatureTitle", "Gamification API Endpoints (FR-027)")]
        [Xunit.TraitAttribute("Description", "Track effort-based rewards")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "gamification")]
        [Xunit.TraitAttribute("Category", "effort")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackEffort_BasedRewards()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "gamification",
                    "effort",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track effort-based rewards", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1909 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1909.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table1909.AddRow(new string[] {
                            "activityId",
                            "activity-789"});
                table1909.AddRow(new string[] {
                            "attempts",
                            "5"});
                table1909.AddRow(new string[] {
                            "improvement",
                            "30"});
                table1909.AddRow(new string[] {
                            "timeSpent",
                            "900"});
#line 103
    testRunner.When("I send a POST request to \"/api/gamification/effort-tracking\" with:", ((string)(null)), table1909, "When ");
#line hidden
#line 110
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
    testRunner.And("effort points should be calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
    testRunner.And("persistence badge should be considered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customize gamification settings")]
        [Xunit.TraitAttribute("FeatureTitle", "Gamification API Endpoints (FR-027)")]
        [Xunit.TraitAttribute("Description", "Customize gamification settings")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "gamification")]
        [Xunit.TraitAttribute("Category", "settings")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CustomizeGamificationSettings()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "gamification",
                    "settings",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customize gamification settings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 116
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1910 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1910.AddRow(new string[] {
                            "pointsVisible",
                            "true"});
                table1910.AddRow(new string[] {
                            "leaderboardOptIn",
                            "false"});
                table1910.AddRow(new string[] {
                            "celebrationType",
                            "subtle"});
                table1910.AddRow(new string[] {
                            "rewardPreferences",
                            "[\"digital\", \"privileges\"]"});
#line 117
    testRunner.When("I send a PUT request to \"/api/gamification/settings/student-123\" with:", ((string)(null)), table1910, "When ");
#line hidden
#line 123
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
    testRunner.And("settings should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
    testRunner.And("experience should be personalized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View gamification analytics")]
        [Xunit.TraitAttribute("FeatureTitle", "Gamification API Endpoints (FR-027)")]
        [Xunit.TraitAttribute("Description", "View gamification analytics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "gamification")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewGamificationAnalytics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "gamification",
                    "analytics",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View gamification analytics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 130
    testRunner.Given("I am a therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 131
    testRunner.When("I send a GET request to \"/api/gamification/analytics?period=month\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 132
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1911 = new TechTalk.SpecFlow.Table(new string[] {
                            "metric",
                            "value"});
                table1911.AddRow(new string[] {
                            "engagementIncrease",
                            "45%"});
                table1911.AddRow(new string[] {
                            "avgPointsPerStudent",
                            "750"});
                table1911.AddRow(new string[] {
                            "mostPopularRewards",
                            "[\"iPad time\", \"stickers\"]"});
                table1911.AddRow(new string[] {
                            "completionRates",
                            "85%"});
#line 133
    testRunner.And("analytics should show:", ((string)(null)), table1911, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GamificationAPIEndpointsFR_027Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GamificationAPIEndpointsFR_027Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
