// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TransitionPlanningAPIEndpointsFR_037Feature : object, Xunit.IClassFixture<TransitionPlanningAPIEndpointsFR_037Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "transition-planning.feature"
#line hidden
        
        public TransitionPlanningAPIEndpointsFR_037Feature(TransitionPlanningAPIEndpointsFR_037Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Transition Planning API Endpoints (FR-037)", "  As a therapy professional\n  I want transition planning and vocational assessmen" +
                    "t tools\n  So that I can prepare students for adulthood and employment", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create transition assessment")]
        [Xunit.TraitAttribute("FeatureTitle", "Transition Planning API Endpoints (FR-037)")]
        [Xunit.TraitAttribute("Description", "Create transition assessment")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "transition")]
        [Xunit.TraitAttribute("Category", "assessment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateTransitionAssessment()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "transition",
                    "assessment",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create transition assessment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3340 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3340.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3340.AddRow(new string[] {
                            "assessmentType",
                            "comprehensive"});
                table3340.AddRow(new string[] {
                            "age",
                            "16"});
                table3340.AddRow(new string[] {
                            "areas",
                            "[\"vocational\", \"independent-living\", \"education\"]"});
                table3340.AddRow(new string[] {
                            "includeFamily",
                            "true"});
#line 13
    testRunner.When("I send a POST request to \"/api/transition-planning/assessments\" with:", ((string)(null)), table3340, "When ");
#line hidden
#line 20
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3341 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3341.AddRow(new string[] {
                            "assessmentId",
                            "string"});
                table3341.AddRow(new string[] {
                            "assessmentTools",
                            "array"});
                table3341.AddRow(new string[] {
                            "timeline",
                            "object"});
#line 21
    testRunner.And("the response should contain:", ((string)(null)), table3341, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Conduct vocational interest assessment")]
        [Xunit.TraitAttribute("FeatureTitle", "Transition Planning API Endpoints (FR-037)")]
        [Xunit.TraitAttribute("Description", "Conduct vocational interest assessment")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "transition")]
        [Xunit.TraitAttribute("Category", "vocational")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConductVocationalInterestAssessment()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "transition",
                    "vocational",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Conduct vocational interest assessment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3342 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3342.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3342.AddRow(new string[] {
                            "interests",
                            "[\"technology\", \"animals\", \"art\"]"});
                table3342.AddRow(new string[] {
                            "skills",
                            "[\"computer-use\", \"following-directions\"]"});
                table3342.AddRow(new string[] {
                            "workSamples",
                            "[\"data-entry\", \"sorting\"]"});
                table3342.AddRow(new string[] {
                            "environment",
                            "[\"quiet\", \"structured\"]"});
#line 30
    testRunner.When("I send a POST request to \"/api/transition-planning/vocational-assessment\" with:", ((string)(null)), table3342, "When ");
#line hidden
#line 37
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3343 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3343.AddRow(new string[] {
                            "careerMatches",
                            "array"});
                table3343.AddRow(new string[] {
                            "strengthAreas",
                            "array"});
                table3343.AddRow(new string[] {
                            "accommodationNeeds",
                            "array"});
                table3343.AddRow(new string[] {
                            "trainingPaths",
                            "array"});
#line 38
    testRunner.And("the response should contain:", ((string)(null)), table3343, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get life skills assessment tools")]
        [Xunit.TraitAttribute("FeatureTitle", "Transition Planning API Endpoints (FR-037)")]
        [Xunit.TraitAttribute("Description", "Get life skills assessment tools")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "transition")]
        [Xunit.TraitAttribute("Category", "life-skills")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetLifeSkillsAssessmentTools()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "transition",
                    "life-skills",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get life skills assessment tools", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 48
    testRunner.When("I send a GET request to \"/api/transition-planning/life-skills-inventory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3344 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3344.AddRow(new string[] {
                            "categories",
                            "array"});
                table3344.AddRow(new string[] {
                            "assessments",
                            "array"});
                table3344.AddRow(new string[] {
                            "checklistsq",
                            "array"});
#line 50
    testRunner.And("the response should contain:", ((string)(null)), table3344, "And ");
#line hidden
#line 55
    testRunner.And("categories should include daily living and community skills", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create transition goals")]
        [Xunit.TraitAttribute("FeatureTitle", "Transition Planning API Endpoints (FR-037)")]
        [Xunit.TraitAttribute("Description", "Create transition goals")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "transition")]
        [Xunit.TraitAttribute("Category", "goal-setting")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateTransitionGoals()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "transition",
                    "goal-setting",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create transition goals", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 59
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3345 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3345.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3345.AddRow(new string[] {
                            "goalArea",
                            "employment"});
                table3345.AddRow(new string[] {
                            "specificGoal",
                            "Obtain part-time job in retail"});
                table3345.AddRow(new string[] {
                            "timeline",
                            "By age 18"});
                table3345.AddRow(new string[] {
                            "steps",
                            "[\"job-skills-training\", \"resume-prep\"]"});
                table3345.AddRow(new string[] {
                            "supports",
                            "[\"job-coach\", \"transportation\"]"});
#line 60
    testRunner.When("I send a POST request to \"/api/transition-planning/goals\" with:", ((string)(null)), table3345, "When ");
#line hidden
#line 68
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
    testRunner.And("goal should be added to transition plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
    testRunner.And("progress tracking should be initialized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get self-advocacy resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Transition Planning API Endpoints (FR-037)")]
        [Xunit.TraitAttribute("Description", "Get self-advocacy resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "transition")]
        [Xunit.TraitAttribute("Category", "self-advocacy")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetSelf_AdvocacyResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "transition",
                    "self-advocacy",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get self-advocacy resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 75
    testRunner.When("I send a GET request to \"/api/transition-planning/resources/self-advocacy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3346 = new TechTalk.SpecFlow.Table(new string[] {
                            "type"});
                table3346.AddRow(new string[] {
                            "rights-education"});
                table3346.AddRow(new string[] {
                            "communication-scripts"});
                table3346.AddRow(new string[] {
                            "practice-scenarios"});
                table3346.AddRow(new string[] {
                            "video-models"});
#line 77
    testRunner.And("resources should include:", ((string)(null)), table3346, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Assess college readiness")]
        [Xunit.TraitAttribute("FeatureTitle", "Transition Planning API Endpoints (FR-037)")]
        [Xunit.TraitAttribute("Description", "Assess college readiness")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "transition")]
        [Xunit.TraitAttribute("Category", "college")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AssessCollegeReadiness()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "transition",
                    "college",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assess college readiness", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3347 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3347.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3347.AddRow(new string[] {
                            "academicSkills",
                            "{\"reading\": 3, \"writing\": 2}"});
                table3347.AddRow(new string[] {
                            "executiveFunction",
                            "{\"organization\": 2, \"time-management\": 2}"});
                table3347.AddRow(new string[] {
                            "socialSkills",
                            "{\"self-advocacy\": 3}"});
                table3347.AddRow(new string[] {
                            "accommodationNeeds",
                            "[\"extended-time\", \"note-taker\"]"});
#line 87
    testRunner.When("I send a POST request to \"/api/transition-planning/college-readiness\" with:", ((string)(null)), table3347, "When ");
#line hidden
#line 94
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
    testRunner.And("readiness report should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
    testRunner.And("recommendations should be provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TransitionPlanningAPIEndpointsFR_037Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TransitionPlanningAPIEndpointsFR_037Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
