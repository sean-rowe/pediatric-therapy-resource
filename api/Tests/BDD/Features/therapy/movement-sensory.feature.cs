// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MovementSensoryIntegrationResourcesFR_017Feature : object, Xunit.IClassFixture<MovementSensoryIntegrationResourcesFR_017Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "movement-sensory.feature"
#line hidden
        
        public MovementSensoryIntegrationResourcesFR_017Feature(MovementSensoryIntegrationResourcesFR_017Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Movement & Sensory Integration Resources (FR-017)", "  As a therapy professional\n  I want comprehensive gross motor and sensory integr" +
                    "ation resources\n  So that I can support students\' movement and sensory processin" +
                    "g needs", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("I am logged in as a therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I have access to the movement and sensory resource library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("resources include videos, printables, and interactive content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access exercise video library with filtering options")]
        [Xunit.TraitAttribute("FeatureTitle", "Movement & Sensory Integration Resources (FR-017)")]
        [Xunit.TraitAttribute("Description", "Access exercise video library with filtering options")]
        [Xunit.TraitAttribute("Category", "gross-motor")]
        [Xunit.TraitAttribute("Category", "exercise-videos")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessExerciseVideoLibraryWithFilteringOptions()
        {
            string[] tagsOfScenario = new string[] {
                    "gross-motor",
                    "exercise-videos",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access exercise video library with filtering options", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.Given("the video library contains 500+ exercise demonstrations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
    testRunner.When("I search for gross motor activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3137 = new TechTalk.SpecFlow.Table(new string[] {
                            "Filter Type",
                            "Options"});
                table3137.AddRow(new string[] {
                            "Age group",
                            "0-3, 3-5, 5-8, 8-12, teen, adult"});
                table3137.AddRow(new string[] {
                            "Equipment needed",
                            "No equipment, basic, specialized"});
                table3137.AddRow(new string[] {
                            "Space required",
                            "Small, medium, large, outdoor"});
                table3137.AddRow(new string[] {
                            "Skill focus",
                            "Balance, coordination, strength"});
                table3137.AddRow(new string[] {
                            "Intensity level",
                            "Low, moderate, high activity"});
                table3137.AddRow(new string[] {
                            "Duration",
                            "5min, 10min, 15min, 30min+"});
#line 15
    testRunner.Then("I should be able to filter by:", ((string)(null)), table3137, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3138 = new TechTalk.SpecFlow.Table(new string[] {
                            "Information",
                            "Details"});
                table3138.AddRow(new string[] {
                            "Video thumbnail",
                            "Clear preview image"});
                table3138.AddRow(new string[] {
                            "Duration",
                            "Exact time length"});
                table3138.AddRow(new string[] {
                            "Difficulty level",
                            "Beginner, intermediate, advanced"});
                table3138.AddRow(new string[] {
                            "Equipment list",
                            "Required materials listed"});
                table3138.AddRow(new string[] {
                            "Safety considerations",
                            "Important precautions"});
                table3138.AddRow(new string[] {
                            "Skill targets",
                            "What the exercise develops"});
#line 23
    testRunner.And("each video should display:", ((string)(null)), table3138, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Watch high-quality exercise demonstration videos")]
        [Xunit.TraitAttribute("FeatureTitle", "Movement & Sensory Integration Resources (FR-017)")]
        [Xunit.TraitAttribute("Description", "Watch high-quality exercise demonstration videos")]
        [Xunit.TraitAttribute("Category", "video-playback")]
        [Xunit.TraitAttribute("Category", "professional-quality")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void WatchHigh_QualityExerciseDemonstrationVideos()
        {
            string[] tagsOfScenario = new string[] {
                    "video-playback",
                    "professional-quality",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Watch high-quality exercise demonstration videos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 34
    testRunner.Given("I select \"Balance Beam Activities for Ages 5-8\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
    testRunner.When("I play the video", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3139 = new TechTalk.SpecFlow.Table(new string[] {
                            "Quality Feature",
                            "Requirement"});
                table3139.AddRow(new string[] {
                            "Resolution",
                            "1080p minimum quality"});
                table3139.AddRow(new string[] {
                            "Audio",
                            "Clear instructor narration"});
                table3139.AddRow(new string[] {
                            "Multiple angles",
                            "Show proper form clearly"});
                table3139.AddRow(new string[] {
                            "Slow motion replay",
                            "Demonstrate key movements"});
                table3139.AddRow(new string[] {
                            "Captions",
                            "Available in multiple languages"});
                table3139.AddRow(new string[] {
                            "Progress markers",
                            "Chapter breaks for easy navigation"});
#line 36
    testRunner.Then("the video should:", ((string)(null)), table3139, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3140 = new TechTalk.SpecFlow.Table(new string[] {
                            "Control",
                            "Function"});
                table3140.AddRow(new string[] {
                            "Playback speed",
                            "0.5x, 1x, 1.25x, 1.5x, 2x"});
                table3140.AddRow(new string[] {
                            "Loop sections",
                            "Repeat specific techniques"});
                table3140.AddRow(new string[] {
                            "Take notes",
                            "Add timestamps and comments"});
                table3140.AddRow(new string[] {
                            "Share with parents",
                            "Send secure video links"});
                table3140.AddRow(new string[] {
                            "Download for offline",
                            "Save to device for field use"});
#line 44
    testRunner.And("I should be able to:", ((string)(null)), table3140, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access therapeutic yoga sequences for different needs")]
        [Xunit.TraitAttribute("FeatureTitle", "Movement & Sensory Integration Resources (FR-017)")]
        [Xunit.TraitAttribute("Description", "Access therapeutic yoga sequences for different needs")]
        [Xunit.TraitAttribute("Category", "yoga-sequences")]
        [Xunit.TraitAttribute("Category", "mindfulness")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessTherapeuticYogaSequencesForDifferentNeeds()
        {
            string[] tagsOfScenario = new string[] {
                    "yoga-sequences",
                    "mindfulness",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access therapeutic yoga sequences for different needs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 54
    testRunner.Given("I work with students who need calming activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
    testRunner.When("I browse yoga and mindfulness resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3141 = new TechTalk.SpecFlow.Table(new string[] {
                            "Sequence Type",
                            "Target Outcome"});
                table3141.AddRow(new string[] {
                            "Morning energizing",
                            "Wake up the nervous system"});
                table3141.AddRow(new string[] {
                            "Midday regulation",
                            "Reset attention and focus"});
                table3141.AddRow(new string[] {
                            "Afternoon calming",
                            "Transition to quieter activities"});
                table3141.AddRow(new string[] {
                            "Evening wind-down",
                            "Prepare for rest"});
                table3141.AddRow(new string[] {
                            "Anxiety management",
                            "Self-regulation techniques"});
                table3141.AddRow(new string[] {
                            "Sensory breaks",
                            "Quick reset between tasks"});
#line 56
    testRunner.Then("I should find sequences for:", ((string)(null)), table3141, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3142 = new TechTalk.SpecFlow.Table(new string[] {
                            "Component",
                            "Content"});
                table3142.AddRow(new string[] {
                            "Visual pose cards",
                            "Illustrated step-by-step poses"});
                table3142.AddRow(new string[] {
                            "Video demonstration",
                            "Instructor-led sequence"});
                table3142.AddRow(new string[] {
                            "Audio guidance",
                            "Voice-only for independent use"});
                table3142.AddRow(new string[] {
                            "Adaptation options",
                            "Modifications for different abilities"});
                table3142.AddRow(new string[] {
                            "Duration options",
                            "5, 10, 15, and 20-minute versions"});
#line 64
    testRunner.And("each sequence should include:", ((string)(null)), table3142, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Find quick brain break activities for classroom use")]
        [Xunit.TraitAttribute("FeatureTitle", "Movement & Sensory Integration Resources (FR-017)")]
        [Xunit.TraitAttribute("Description", "Find quick brain break activities for classroom use")]
        [Xunit.TraitAttribute("Category", "brain-breaks")]
        [Xunit.TraitAttribute("Category", "classroom-activities")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void FindQuickBrainBreakActivitiesForClassroomUse()
        {
            string[] tagsOfScenario = new string[] {
                    "brain-breaks",
                    "classroom-activities",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Find quick brain break activities for classroom use", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 73
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 74
    testRunner.Given("I need 2-5 minute movement breaks for classroom", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 75
    testRunner.When("I access brain break resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3143 = new TechTalk.SpecFlow.Table(new string[] {
                            "Organization Method",
                            "Categories"});
                table3143.AddRow(new string[] {
                            "Energy level needed",
                            "High, medium, low movement"});
                table3143.AddRow(new string[] {
                            "Space requirements",
                            "Desk, standing, moving around"});
                table3143.AddRow(new string[] {
                            "Noise level",
                            "Silent, quiet, normal volume"});
                table3143.AddRow(new string[] {
                            "Group size",
                            "Individual, small group, whole class"});
                table3143.AddRow(new string[] {
                            "Time duration",
                            "1min, 2min, 3min, 5min"});
#line 76
    testRunner.Then("activities should be organized by:", ((string)(null)), table3143, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3144 = new TechTalk.SpecFlow.Table(new string[] {
                            "Resource Type",
                            "Content"});
                table3144.AddRow(new string[] {
                            "Quick instruction card",
                            "Teacher-friendly directions"});
                table3144.AddRow(new string[] {
                            "Student visual cues",
                            "Pictures showing the activity"});
                table3144.AddRow(new string[] {
                            "Variation options",
                            "Ways to increase/decrease challenge"});
                table3144.AddRow(new string[] {
                            "Learning objectives",
                            "What skills are being developed"});
                table3144.AddRow(new string[] {
                            "Assessment rubric",
                            "How to measure effectiveness"});
#line 83
    testRunner.And("each activity should provide:", ((string)(null)), table3144, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create customized sensory diet plans")]
        [Xunit.TraitAttribute("FeatureTitle", "Movement & Sensory Integration Resources (FR-017)")]
        [Xunit.TraitAttribute("Description", "Create customized sensory diet plans")]
        [Xunit.TraitAttribute("Category", "sensory-diet")]
        [Xunit.TraitAttribute("Category", "individualized-plans")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateCustomizedSensoryDietPlans()
        {
            string[] tagsOfScenario = new string[] {
                    "sensory-diet",
                    "individualized-plans",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create customized sensory diet plans", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 93
    testRunner.Given("I have a student with sensory processing challenges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
    testRunner.When("I use the sensory diet builder", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3145 = new TechTalk.SpecFlow.Table(new string[] {
                            "Customization Option",
                            "Details"});
                table3145.AddRow(new string[] {
                            "Sensory profile",
                            "Hypo/hyper responsiveness patterns"});
                table3145.AddRow(new string[] {
                            "Environmental factors",
                            "Classroom, home, community settings"});
                table3145.AddRow(new string[] {
                            "Schedule integration",
                            "When sensory breaks are needed"});
                table3145.AddRow(new string[] {
                            "Activity preferences",
                            "Student\'s likes and dislikes"});
                table3145.AddRow(new string[] {
                            "Contraindications",
                            "Activities to avoid"});
                table3145.AddRow(new string[] {
                            "Goal integration",
                            "Link to IEP/therapy objectives"});
#line 95
    testRunner.Then("I should be able to:", ((string)(null)), table3145, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3146 = new TechTalk.SpecFlow.Table(new string[] {
                            "Output Type",
                            "Format"});
                table3146.AddRow(new string[] {
                            "Visual schedule",
                            "Picture cards for each activity"});
                table3146.AddRow(new string[] {
                            "Parent handout",
                            "Home sensory strategies"});
                table3146.AddRow(new string[] {
                            "Teacher checklist",
                            "Classroom implementation guide"});
                table3146.AddRow(new string[] {
                            "Progress tracker",
                            "Data collection sheets"});
                table3146.AddRow(new string[] {
                            "Equipment list",
                            "Required sensory tools"});
#line 103
    testRunner.And("the system should generate:", ((string)(null)), table3146, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment recommendations with budget considerations")]
        [Xunit.TraitAttribute("FeatureTitle", "Movement & Sensory Integration Resources (FR-017)")]
        [Xunit.TraitAttribute("Description", "Get equipment recommendations with budget considerations")]
        [Xunit.TraitAttribute("Category", "equipment-recommendations")]
        [Xunit.TraitAttribute("Category", "adaptive-tools")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetEquipmentRecommendationsWithBudgetConsiderations()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment-recommendations",
                    "adaptive-tools",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment recommendations with budget considerations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 113
    testRunner.Given("I need to set up a sensory space", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
    testRunner.When("I access equipment recommendations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3147 = new TechTalk.SpecFlow.Table(new string[] {
                            "Organization Method",
                            "Categories"});
                table3147.AddRow(new string[] {
                            "Budget level",
                            "Under $50, $50-200, $200-500, $500+"});
                table3147.AddRow(new string[] {
                            "Space requirements",
                            "Corner, full room, portable"});
                table3147.AddRow(new string[] {
                            "Age appropriateness",
                            "Toddler, preschool, school-age, teen"});
                table3147.AddRow(new string[] {
                            "Sensory system",
                            "Proprioceptive, vestibular, tactile"});
                table3147.AddRow(new string[] {
                            "Therapeutic goals",
                            "Calming, alerting, organizing"});
#line 115
    testRunner.Then("I should see options organized by:", ((string)(null)), table3147, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3148 = new TechTalk.SpecFlow.Table(new string[] {
                            "Information Type",
                            "Details"});
                table3148.AddRow(new string[] {
                            "Product description",
                            "What it is and how it\'s used"});
                table3148.AddRow(new string[] {
                            "Therapeutic benefits",
                            "Which sensory needs it addresses"});
                table3148.AddRow(new string[] {
                            "Safety considerations",
                            "Age limits and supervision needs"});
                table3148.AddRow(new string[] {
                            "Durability rating",
                            "How long it typically lasts"});
                table3148.AddRow(new string[] {
                            "Vendor information",
                            "Where to purchase"});
                table3148.AddRow(new string[] {
                            "Alternative options",
                            "DIY or lower-cost substitutes"});
#line 122
    testRunner.And("each recommendation should include:", ((string)(null)), table3148, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Filter activities by available space and environment")]
        [Xunit.TraitAttribute("FeatureTitle", "Movement & Sensory Integration Resources (FR-017)")]
        [Xunit.TraitAttribute("Description", "Filter activities by available space and environment")]
        [Xunit.TraitAttribute("Category", "space-filtering")]
        [Xunit.TraitAttribute("Category", "environment-adaptation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void FilterActivitiesByAvailableSpaceAndEnvironment()
        {
            string[] tagsOfScenario = new string[] {
                    "space-filtering",
                    "environment-adaptation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter activities by available space and environment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 132
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 133
    testRunner.Given("I work in different therapeutic environments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
    testRunner.When("I search for movement activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3149 = new TechTalk.SpecFlow.Table(new string[] {
                            "Space Type",
                            "Dimensions"});
                table3149.AddRow(new string[] {
                            "Therapy room small",
                            "8x10 feet or smaller"});
                table3149.AddRow(new string[] {
                            "Therapy room medium",
                            "10x12 feet"});
                table3149.AddRow(new string[] {
                            "Therapy room large",
                            "12x15 feet or larger"});
                table3149.AddRow(new string[] {
                            "Classroom",
                            "Shared space with desks"});
                table3149.AddRow(new string[] {
                            "Gymnasium",
                            "Large open space"});
                table3149.AddRow(new string[] {
                            "Outdoor area",
                            "Playground or yard"});
                table3149.AddRow(new string[] {
                            "Home environment",
                            "Limited space and equipment"});
                table3149.AddRow(new string[] {
                            "Hallway",
                            "Linear space for walking"});
#line 135
    testRunner.Then("I should be able to filter by space:", ((string)(null)), table3149, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3150 = new TechTalk.SpecFlow.Table(new string[] {
                            "Environment Factor",
                            "Adaptations"});
                table3150.AddRow(new string[] {
                            "Noise restrictions",
                            "Quiet movement alternatives"});
                table3150.AddRow(new string[] {
                            "Floor type",
                            "Carpet, tile, gym floor options"});
                table3150.AddRow(new string[] {
                            "Ceiling height",
                            "Low ceiling modifications"});
                table3150.AddRow(new string[] {
                            "Other students present",
                            "Group vs individual activities"});
                table3150.AddRow(new string[] {
                            "Equipment availability",
                            "With and without tools"});
#line 145
    testRunner.And("environmental adaptations for:", ((string)(null)), table3150, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Target specific sensory systems with appropriate activities")]
        [Xunit.TraitAttribute("FeatureTitle", "Movement & Sensory Integration Resources (FR-017)")]
        [Xunit.TraitAttribute("Description", "Target specific sensory systems with appropriate activities")]
        [Xunit.TraitAttribute("Category", "sensory-systems")]
        [Xunit.TraitAttribute("Category", "targeted-activities")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TargetSpecificSensorySystemsWithAppropriateActivities()
        {
            string[] tagsOfScenario = new string[] {
                    "sensory-systems",
                    "targeted-activities",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Target specific sensory systems with appropriate activities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 155
    testRunner.Given("I need to address specific sensory processing areas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 156
    testRunner.When("I search for sensory activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3151 = new TechTalk.SpecFlow.Table(new string[] {
                            "Sensory System",
                            "Activity Examples"});
                table3151.AddRow(new string[] {
                            "Proprioceptive",
                            "Heavy work, resistance, lifting"});
                table3151.AddRow(new string[] {
                            "Vestibular",
                            "Swinging, spinning, tilting"});
                table3151.AddRow(new string[] {
                            "Tactile",
                            "Textures, touch activities"});
                table3151.AddRow(new string[] {
                            "Visual",
                            "Eye tracking, visual processing"});
                table3151.AddRow(new string[] {
                            "Auditory",
                            "Sound discrimination, listening"});
                table3151.AddRow(new string[] {
                            "Interoceptive",
                            "Body awareness, internal signals"});
#line 157
    testRunner.Then("I should find targeted options for:", ((string)(null)), table3151, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3152 = new TechTalk.SpecFlow.Table(new string[] {
                            "Specification",
                            "Information"});
                table3152.AddRow(new string[] {
                            "Sensory input type",
                            "Organizing, alerting, calming"});
                table3152.AddRow(new string[] {
                            "Intensity level",
                            "Light, moderate, intense"});
                table3152.AddRow(new string[] {
                            "Duration recommended",
                            "How long to do the activity"});
                table3152.AddRow(new string[] {
                            "Frequency guidance",
                            "How often throughout the day"});
                table3152.AddRow(new string[] {
                            "Signs to stop",
                            "When the activity isn\'t helping"});
                table3152.AddRow(new string[] {
                            "Follow-up activities",
                            "What to do next"});
#line 165
    testRunner.And("each activity should specify:", ((string)(null)), table3152, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access safety protocols for movement activities")]
        [Xunit.TraitAttribute("FeatureTitle", "Movement & Sensory Integration Resources (FR-017)")]
        [Xunit.TraitAttribute("Description", "Access safety protocols for movement activities")]
        [Xunit.TraitAttribute("Category", "safety-protocols")]
        [Xunit.TraitAttribute("Category", "risk-management")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessSafetyProtocolsForMovementActivities()
        {
            string[] tagsOfScenario = new string[] {
                    "safety-protocols",
                    "risk-management",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access safety protocols for movement activities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 175
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 176
    testRunner.Given("I want to ensure safe implementation of activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 177
    testRunner.When("I view any movement or sensory activity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3153 = new TechTalk.SpecFlow.Table(new string[] {
                            "Safety Category",
                            "Information Provided"});
                table3153.AddRow(new string[] {
                            "Age appropriateness",
                            "Minimum and maximum ages"});
                table3153.AddRow(new string[] {
                            "Supervision level",
                            "1:1, small group, or independent"});
                table3153.AddRow(new string[] {
                            "Equipment inspection",
                            "What to check before use"});
                table3153.AddRow(new string[] {
                            "Environmental setup",
                            "Safe space requirements"});
                table3153.AddRow(new string[] {
                            "Medical considerations",
                            "Conditions requiring caution"});
                table3153.AddRow(new string[] {
                            "Emergency procedures",
                            "What to do if injury occurs"});
#line 178
    testRunner.Then("safety information should include:", ((string)(null)), table3153, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3154 = new TechTalk.SpecFlow.Table(new string[] {
                            "Safety Resource",
                            "Content"});
                table3154.AddRow(new string[] {
                            "Incident report forms",
                            "Quick documentation templates"});
                table3154.AddRow(new string[] {
                            "Parent notification",
                            "When to inform families"});
                table3154.AddRow(new string[] {
                            "Modification guides",
                            "Adapting for safety concerns"});
                table3154.AddRow(new string[] {
                            "Training materials",
                            "Staff preparation resources"});
#line 186
    testRunner.And("I should have access to:", ((string)(null)), table3154, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track progress on movement and sensory goals")]
        [Xunit.TraitAttribute("FeatureTitle", "Movement & Sensory Integration Resources (FR-017)")]
        [Xunit.TraitAttribute("Description", "Track progress on movement and sensory goals")]
        [Xunit.TraitAttribute("Category", "progress-tracking")]
        [Xunit.TraitAttribute("Category", "outcome-measurement")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackProgressOnMovementAndSensoryGoals()
        {
            string[] tagsOfScenario = new string[] {
                    "progress-tracking",
                    "outcome-measurement",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track progress on movement and sensory goals", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 194
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 195
    testRunner.Given("I use movement activities to address therapy goals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 196
    testRunner.When("I document progress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3155 = new TechTalk.SpecFlow.Table(new string[] {
                            "Progress Metric",
                            "Measurement Method"});
                table3155.AddRow(new string[] {
                            "Skill acquisition",
                            "Can/cannot do activity"});
                table3155.AddRow(new string[] {
                            "Endurance improvement",
                            "Duration before fatigue"});
                table3155.AddRow(new string[] {
                            "Quality of movement",
                            "Form and coordination"});
                table3155.AddRow(new string[] {
                            "Independence level",
                            "Amount of assistance needed"});
                table3155.AddRow(new string[] {
                            "Sensory tolerance",
                            "Response to input"});
                table3155.AddRow(new string[] {
                            "Generalization",
                            "Using skills in different settings"});
#line 197
    testRunner.Then("I should be able to track:", ((string)(null)), table3155, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3156 = new TechTalk.SpecFlow.Table(new string[] {
                            "Visualization Type",
                            "Purpose"});
                table3156.AddRow(new string[] {
                            "Line graphs",
                            "Progress over time"});
                table3156.AddRow(new string[] {
                            "Bar charts",
                            "Comparison across skills"});
                table3156.AddRow(new string[] {
                            "Heat maps",
                            "Sensory system responsiveness"});
                table3156.AddRow(new string[] {
                            "Goal achievement",
                            "Percentage toward targets"});
#line 205
    testRunner.And("data should be visualized as:", ((string)(null)), table3156, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3157 = new TechTalk.SpecFlow.Table(new string[] {
                            "Report Recipient",
                            "Content Focus"});
                table3157.AddRow(new string[] {
                            "Parents",
                            "Home strategies and progress"});
                table3157.AddRow(new string[] {
                            "Teachers",
                            "Classroom accommodations"});
                table3157.AddRow(new string[] {
                            "Team members",
                            "Professional collaboration"});
                table3157.AddRow(new string[] {
                            "Insurance",
                            "Medical necessity justification"});
#line 211
    testRunner.And("reports should generate for:", ((string)(null)), table3157, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MovementSensoryIntegrationResourcesFR_017Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MovementSensoryIntegrationResourcesFR_017Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
