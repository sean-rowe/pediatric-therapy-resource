// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class VirtualToolsAPIEndpointsFR_024Feature : object, Xunit.IClassFixture<VirtualToolsAPIEndpointsFR_024Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "virtual-tools.feature"
#line hidden
        
        public VirtualToolsAPIEndpointsFR_024Feature(VirtualToolsAPIEndpointsFR_024Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Virtual Tools API Endpoints (FR-024)", "  As a therapy professional conducting teletherapy\n  I want access to virtual the" +
                    "rapy tools\n  So that I can engage students effectively during remote sessions", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access virtual backgrounds library")]
        [Xunit.TraitAttribute("FeatureTitle", "Virtual Tools API Endpoints (FR-024)")]
        [Xunit.TraitAttribute("Description", "Access virtual backgrounds library")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "virtual")]
        [Xunit.TraitAttribute("Category", "backgrounds")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessVirtualBackgroundsLibrary()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "virtual",
                    "backgrounds",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access virtual backgrounds library", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/virtual/backgrounds?category=therapy-room\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3311 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "features"});
                table3311.AddRow(new string[] {
                            "static",
                            "High-res therapy room images"});
                table3311.AddRow(new string[] {
                            "animated",
                            "Subtle movement effects"});
                table3311.AddRow(new string[] {
                            "interactive",
                            "Clickable elements"});
                table3311.AddRow(new string[] {
                            "seasonal",
                            "Holiday/season themes"});
#line 15
    testRunner.And("backgrounds should include:", ((string)(null)), table3311, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use virtual dice roller")]
        [Xunit.TraitAttribute("FeatureTitle", "Virtual Tools API Endpoints (FR-024)")]
        [Xunit.TraitAttribute("Description", "Use virtual dice roller")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "virtual")]
        [Xunit.TraitAttribute("Category", "dice")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UseVirtualDiceRoller()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "virtual",
                    "dice",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use virtual dice roller", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3312 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3312.AddRow(new string[] {
                            "numberOfDice",
                            "2"});
                table3312.AddRow(new string[] {
                            "sides",
                            "6"});
                table3312.AddRow(new string[] {
                            "customFaces",
                            "[\"red\", \"blue\", \"green\"]"});
                table3312.AddRow(new string[] {
                            "animation",
                            "true"});
#line 25
    testRunner.When("I send a POST request to \"/api/virtual/tools/dice-roller\" with:", ((string)(null)), table3312, "When ");
#line hidden
#line 31
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3313 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3313.AddRow(new string[] {
                            "results",
                            "array"});
                table3313.AddRow(new string[] {
                            "total",
                            "number"});
                table3313.AddRow(new string[] {
                            "animationUrl",
                            "string"});
#line 32
    testRunner.And("the response should contain:", ((string)(null)), table3313, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create custom spinner")]
        [Xunit.TraitAttribute("FeatureTitle", "Virtual Tools API Endpoints (FR-024)")]
        [Xunit.TraitAttribute("Description", "Create custom spinner")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "virtual")]
        [Xunit.TraitAttribute("Category", "spinner")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateCustomSpinner()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "virtual",
                    "spinner",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create custom spinner", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 40
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3314 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3314.AddRow(new string[] {
                            "sections",
                            "[\"hop\", \"jump\", \"clap\", \"spin\"]"});
                table3314.AddRow(new string[] {
                            "colors",
                            "[\"red\", \"blue\", \"green\", \"yellow\"]"});
                table3314.AddRow(new string[] {
                            "weighted",
                            "false"});
                table3314.AddRow(new string[] {
                            "soundEffect",
                            "true"});
#line 41
    testRunner.When("I send a POST request to \"/api/virtual/tools/spinner\" with:", ((string)(null)), table3314, "When ");
#line hidden
#line 47
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3315 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3315.AddRow(new string[] {
                            "spinnerId",
                            "string"});
                table3315.AddRow(new string[] {
                            "shareUrl",
                            "string"});
                table3315.AddRow(new string[] {
                            "embedCode",
                            "string"});
#line 48
    testRunner.And("the response should contain:", ((string)(null)), table3315, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access virtual token system")]
        [Xunit.TraitAttribute("FeatureTitle", "Virtual Tools API Endpoints (FR-024)")]
        [Xunit.TraitAttribute("Description", "Access virtual token system")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "virtual")]
        [Xunit.TraitAttribute("Category", "tokens")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessVirtualTokenSystem()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "virtual",
                    "tokens",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access virtual token system", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 57
    testRunner.When("I send a GET request to \"/api/virtual/rewards/tokens?theme=space\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3316 = new TechTalk.SpecFlow.Table(new string[] {
                            "component",
                            "type"});
                table3316.AddRow(new string[] {
                            "tokens",
                            "Animated space objects"});
                table3316.AddRow(new string[] {
                            "board",
                            "Space-themed collection"});
                table3316.AddRow(new string[] {
                            "sounds",
                            "Achievement sounds"});
                table3316.AddRow(new string[] {
                            "milestones",
                            "Special animations"});
#line 59
    testRunner.And("token system should include:", ((string)(null)), table3316, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create virtual manipulatives set")]
        [Xunit.TraitAttribute("FeatureTitle", "Virtual Tools API Endpoints (FR-024)")]
        [Xunit.TraitAttribute("Description", "Create virtual manipulatives set")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "virtual")]
        [Xunit.TraitAttribute("Category", "manipulatives")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateVirtualManipulativesSet()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "virtual",
                    "manipulatives",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create virtual manipulatives set", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3317 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3317.AddRow(new string[] {
                            "type",
                            "counting-bears"});
                table3317.AddRow(new string[] {
                            "quantity",
                            "20"});
                table3317.AddRow(new string[] {
                            "colors",
                            "[\"red\", \"blue\", \"yellow\"]"});
                table3317.AddRow(new string[] {
                            "interactive",
                            "drag-and-drop"});
#line 69
    testRunner.When("I send a POST request to \"/api/virtual/manipulatives/create\" with:", ((string)(null)), table3317, "When ");
#line hidden
#line 75
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3318 = new TechTalk.SpecFlow.Table(new string[] {
                            "feature",
                            "enabled"});
                table3318.AddRow(new string[] {
                            "grouping",
                            "true"});
                table3318.AddRow(new string[] {
                            "counting",
                            "automatic"});
                table3318.AddRow(new string[] {
                            "patterns",
                            "creation tools"});
#line 76
    testRunner.And("manipulatives should be:", ((string)(null)), table3318, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Start screen annotation session")]
        [Xunit.TraitAttribute("FeatureTitle", "Virtual Tools API Endpoints (FR-024)")]
        [Xunit.TraitAttribute("Description", "Start screen annotation session")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "virtual")]
        [Xunit.TraitAttribute("Category", "annotation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void StartScreenAnnotationSession()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "virtual",
                    "annotation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start screen annotation session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3319 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3319.AddRow(new string[] {
                            "sessionId",
                            "therapy-session-123"});
                table3319.AddRow(new string[] {
                            "tools",
                            "[\"pen\", \"highlighter\", \"shapes\"]"});
                table3319.AddRow(new string[] {
                            "saveEnabled",
                            "true"});
#line 85
    testRunner.When("I send a POST request to \"/api/virtual/annotation/start\" with:", ((string)(null)), table3319, "When ");
#line hidden
#line 90
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
    testRunner.And("annotation tools should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
    testRunner.And("drawings should sync in real-time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access movement-based virtual games")]
        [Xunit.TraitAttribute("FeatureTitle", "Virtual Tools API Endpoints (FR-024)")]
        [Xunit.TraitAttribute("Description", "Access movement-based virtual games")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "virtual")]
        [Xunit.TraitAttribute("Category", "movement")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessMovement_BasedVirtualGames()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "virtual",
                    "movement",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access movement-based virtual games", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 97
    testRunner.When("I send a GET request to \"/api/virtual/games/movement?age=5-7\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3320 = new TechTalk.SpecFlow.Table(new string[] {
                            "game",
                            "type"});
                table3320.AddRow(new string[] {
                            "Simon Says",
                            "Follow directions"});
                table3320.AddRow(new string[] {
                            "Freeze Dance",
                            "Music and movement"});
                table3320.AddRow(new string[] {
                            "Animal Walks",
                            "Gross motor imitation"});
                table3320.AddRow(new string[] {
                            "Yoga Adventure",
                            "Guided positions"});
#line 99
    testRunner.And("games should include:", ((string)(null)), table3320, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create visual timer")]
        [Xunit.TraitAttribute("FeatureTitle", "Virtual Tools API Endpoints (FR-024)")]
        [Xunit.TraitAttribute("Description", "Create visual timer")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "virtual")]
        [Xunit.TraitAttribute("Category", "timers")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateVisualTimer()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "virtual",
                    "timers",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create visual timer", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3321 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3321.AddRow(new string[] {
                            "duration",
                            "300"});
                table3321.AddRow(new string[] {
                            "style",
                            "countdown-circle"});
                table3321.AddRow(new string[] {
                            "warningAt",
                            "60"});
                table3321.AddRow(new string[] {
                            "soundAlerts",
                            "true"});
                table3321.AddRow(new string[] {
                            "customMessage",
                            "\"Great job!\""});
#line 109
    testRunner.When("I send a POST request to \"/api/virtual/timers/visual\" with:", ((string)(null)), table3321, "When ");
#line hidden
#line 116
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
    testRunner.And("timer should display visually", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.And("alerts should trigger at specified times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create shared whiteboard")]
        [Xunit.TraitAttribute("FeatureTitle", "Virtual Tools API Endpoints (FR-024)")]
        [Xunit.TraitAttribute("Description", "Create shared whiteboard")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "virtual")]
        [Xunit.TraitAttribute("Category", "whiteboard")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateSharedWhiteboard()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "virtual",
                    "whiteboard",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create shared whiteboard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 122
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3322 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3322.AddRow(new string[] {
                            "sessionId",
                            "session-123"});
                table3322.AddRow(new string[] {
                            "participants",
                            "[\"therapist\", \"student\"]"});
                table3322.AddRow(new string[] {
                            "tools",
                            "[\"draw\", \"text\", \"shapes\"]"});
                table3322.AddRow(new string[] {
                            "saveWork",
                            "true"});
#line 123
    testRunner.When("I send a POST request to \"/api/virtual/whiteboard/shared\" with:", ((string)(null)), table3322, "When ");
#line hidden
#line 129
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3323 = new TechTalk.SpecFlow.Table(new string[] {
                            "feature",
                            "capability"});
                table3323.AddRow(new string[] {
                            "collaboration",
                            "Real-time drawing"});
                table3323.AddRow(new string[] {
                            "templates",
                            "Pre-made activities"});
                table3323.AddRow(new string[] {
                            "export",
                            "PDF or image"});
#line 130
    testRunner.And("whiteboard should allow:", ((string)(null)), table3323, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get mouse control practice activities")]
        [Xunit.TraitAttribute("FeatureTitle", "Virtual Tools API Endpoints (FR-024)")]
        [Xunit.TraitAttribute("Description", "Get mouse control practice activities")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "virtual")]
        [Xunit.TraitAttribute("Category", "mouse")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetMouseControlPracticeActivities()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "virtual",
                    "mouse",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get mouse control practice activities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 138
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 139
    testRunner.When("I send a GET request to \"/api/virtual/mouse-control/activities?skill=click-drag\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3324 = new TechTalk.SpecFlow.Table(new string[] {
                            "activity",
                            "skills"});
                table3324.AddRow(new string[] {
                            "puzzles",
                            "Drag pieces to place"});
                table3324.AddRow(new string[] {
                            "coloring",
                            "Click and fill"});
                table3324.AddRow(new string[] {
                            "matching",
                            "Drag to match"});
                table3324.AddRow(new string[] {
                            "tracing",
                            "Follow the path"});
#line 141
    testRunner.And("activities should include:", ((string)(null)), table3324, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                VirtualToolsAPIEndpointsFR_024Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                VirtualToolsAPIEndpointsFR_024Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
