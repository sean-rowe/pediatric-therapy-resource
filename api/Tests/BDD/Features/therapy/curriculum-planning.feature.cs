// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CurriculumPlanningAPIEndpointsFR_031Feature : object, Xunit.IClassFixture<CurriculumPlanningAPIEndpointsFR_031Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "curriculum-planning.feature"
#line hidden
        
        public CurriculumPlanningAPIEndpointsFR_031Feature(CurriculumPlanningAPIEndpointsFR_031Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Curriculum Planning API Endpoints (FR-031)", "  As a therapy professional\n  I want long-term therapy planning and curriculum ma" +
                    "pping tools\n  So that I can create comprehensive therapy programs", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create full year therapy plan")]
        [Xunit.TraitAttribute("FeatureTitle", "Curriculum Planning API Endpoints (FR-031)")]
        [Xunit.TraitAttribute("Description", "Create full year therapy plan")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "curriculum")]
        [Xunit.TraitAttribute("Category", "yearplan")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateFullYearTherapyPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "curriculum",
                    "yearplan",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create full year therapy plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3086 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3086.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3086.AddRow(new string[] {
                            "schoolYear",
                            "\"2024-2025\""});
                table3086.AddRow(new string[] {
                            "frequency",
                            "\"2x weekly\""});
                table3086.AddRow(new string[] {
                            "domains",
                            "[\"fine-motor\", \"visual-motor\"]"});
                table3086.AddRow(new string[] {
                            "holidays",
                            "\"school-calendar\""});
#line 13
    testRunner.When("I send a POST request to \"/api/curriculum/year-plan/create\" with:", ((string)(null)), table3086, "When ");
#line hidden
#line 20
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3087 = new TechTalk.SpecFlow.Table(new string[] {
                            "component",
                            "details"});
                table3087.AddRow(new string[] {
                            "totalSessions",
                            "72"});
                table3087.AddRow(new string[] {
                            "monthlyThemes",
                            "Aligned with curriculum"});
                table3087.AddRow(new string[] {
                            "progressChecks",
                            "Quarterly"});
                table3087.AddRow(new string[] {
                            "resourceMapping",
                            "Suggested materials"});
#line 21
    testRunner.And("plan should include:", ((string)(null)), table3087, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Align therapy goals with educational standards")]
        [Xunit.TraitAttribute("FeatureTitle", "Curriculum Planning API Endpoints (FR-031)")]
        [Xunit.TraitAttribute("Description", "Align therapy goals with educational standards")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "curriculum")]
        [Xunit.TraitAttribute("Category", "standards")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AlignTherapyGoalsWithEducationalStandards()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "curriculum",
                    "standards",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Align therapy goals with educational standards", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 31
    testRunner.When("I send a GET request to \"/api/curriculum/standards/alignment?state=CA&grade=K\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3088 = new TechTalk.SpecFlow.Table(new string[] {
                            "standard",
                            "therapyGoals",
                            "resources"});
                table3088.AddRow(new string[] {
                            "K.CC.A.3",
                            "Number recognition 1-10",
                            "[\"res-456\"]"});
                table3088.AddRow(new string[] {
                            "K.MD.A.1",
                            "Descriptive attributes",
                            "[\"res-789\"]"});
                table3088.AddRow(new string[] {
                            "K.G.A.2",
                            "Shape identification",
                            "[\"res-012\"]"});
#line 33
    testRunner.And("alignment should show:", ((string)(null)), table3088, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate spiral curriculum")]
        [Xunit.TraitAttribute("FeatureTitle", "Curriculum Planning API Endpoints (FR-031)")]
        [Xunit.TraitAttribute("Description", "Generate spiral curriculum")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "curriculum")]
        [Xunit.TraitAttribute("Category", "spiral")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateSpiralCurriculum()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "curriculum",
                    "spiral",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate spiral curriculum", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3089 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3089.AddRow(new string[] {
                            "skills",
                            "[\"cutting\", \"tracing\", \"copying\"]"});
                table3089.AddRow(new string[] {
                            "duration",
                            "\"semester\""});
                table3089.AddRow(new string[] {
                            "complexity",
                            "\"progressive\""});
                table3089.AddRow(new string[] {
                            "reviewCycles",
                            "3"});
#line 42
    testRunner.When("I send a POST request to \"/api/curriculum/spiral/generate\" with:", ((string)(null)), table3089, "When ");
#line hidden
#line 48
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3090 = new TechTalk.SpecFlow.Table(new string[] {
                            "week",
                            "newSkill",
                            "reviewSkills",
                            "complexity"});
                table3090.AddRow(new string[] {
                            "1",
                            "straight lines",
                            "none",
                            "basic"});
                table3090.AddRow(new string[] {
                            "4",
                            "curved lines",
                            "straight lines",
                            "moderate"});
                table3090.AddRow(new string[] {
                            "8",
                            "simple shapes",
                            "lines, curves",
                            "complex"});
#line 49
    testRunner.And("curriculum should show:", ((string)(null)), table3090, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View progress benchmarks")]
        [Xunit.TraitAttribute("FeatureTitle", "Curriculum Planning API Endpoints (FR-031)")]
        [Xunit.TraitAttribute("Description", "View progress benchmarks")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "curriculum")]
        [Xunit.TraitAttribute("Category", "benchmarks")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewProgressBenchmarks()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "curriculum",
                    "benchmarks",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View progress benchmarks", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 58
    testRunner.When("I send a GET request to \"/api/curriculum/benchmarks/student-123?period=year\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3091 = new TechTalk.SpecFlow.Table(new string[] {
                            "milestone",
                            "targetDate",
                            "currentStatus",
                            "projection"});
                table3091.AddRow(new string[] {
                            "Write name",
                            "November",
                            "on-track",
                            "95%"});
                table3091.AddRow(new string[] {
                            "Cut shapes",
                            "January",
                            "ahead",
                            "100%"});
                table3091.AddRow(new string[] {
                            "Tie shoes",
                            "March",
                            "delayed",
                            "70%"});
#line 60
    testRunner.And("benchmarks should include:", ((string)(null)), table3091, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Map resources to curriculum weeks")]
        [Xunit.TraitAttribute("FeatureTitle", "Curriculum Planning API Endpoints (FR-031)")]
        [Xunit.TraitAttribute("Description", "Map resources to curriculum weeks")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "curriculum")]
        [Xunit.TraitAttribute("Category", "mapping")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MapResourcesToCurriculumWeeks()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "curriculum",
                    "mapping",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Map resources to curriculum weeks", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3092 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3092.AddRow(new string[] {
                            "curriculumId",
                            "curr-2024-123"});
                table3092.AddRow(new string[] {
                            "mappingType",
                            "\"automatic\""});
                table3092.AddRow(new string[] {
                            "constraints",
                            "{\"max-per-week\": 5}"});
#line 69
    testRunner.When("I send a POST request to \"/api/curriculum/resources/map\" with:", ((string)(null)), table3092, "When ");
#line hidden
#line 74
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3093 = new TechTalk.SpecFlow.Table(new string[] {
                            "week",
                            "theme",
                            "resources",
                            "skills"});
                table3093.AddRow(new string[] {
                            "1",
                            "School Tools",
                            "[\"res-1\", \"res-2\"]",
                            "[\"grip\"]"});
                table3093.AddRow(new string[] {
                            "2",
                            "Fall Leaves",
                            "[\"res-3\", \"res-4\"]",
                            "[\"cutting\"]"});
#line 75
    testRunner.And("mapping should provide:", ((string)(null)), table3093, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Adjust curriculum for holidays and breaks")]
        [Xunit.TraitAttribute("FeatureTitle", "Curriculum Planning API Endpoints (FR-031)")]
        [Xunit.TraitAttribute("Description", "Adjust curriculum for holidays and breaks")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "curriculum")]
        [Xunit.TraitAttribute("Category", "holidays")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AdjustCurriculumForHolidaysAndBreaks()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "curriculum",
                    "holidays",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adjust curriculum for holidays and breaks", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3094 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3094.AddRow(new string[] {
                            "curriculumId",
                            "curr-2024-123"});
                table3094.AddRow(new string[] {
                            "breaks",
                            "[\"2024-12-20\", \"2025-01-03\"]"});
                table3094.AddRow(new string[] {
                            "adjustment",
                            "\"compress\""});
#line 83
    testRunner.When("I send a PUT request to \"/api/curriculum/adjust-for-holidays\" with:", ((string)(null)), table3094, "When ");
#line hidden
#line 88
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3095 = new TechTalk.SpecFlow.Table(new string[] {
                            "change",
                            "implementation"});
                table3095.AddRow(new string[] {
                            "sessions",
                            "Redistributed around breaks"});
                table3095.AddRow(new string[] {
                            "goals",
                            "Maintained with new timeline"});
                table3095.AddRow(new string[] {
                            "resources",
                            "Homework packets for break"});
#line 89
    testRunner.And("adjusted plan should:", ((string)(null)), table3095, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access curriculum templates")]
        [Xunit.TraitAttribute("FeatureTitle", "Curriculum Planning API Endpoints (FR-031)")]
        [Xunit.TraitAttribute("Description", "Access curriculum templates")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "curriculum")]
        [Xunit.TraitAttribute("Category", "templates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessCurriculumTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "curriculum",
                    "templates",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access curriculum templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 98
    testRunner.When("I send a GET request to \"/api/curriculum/templates/school-based\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3096 = new TechTalk.SpecFlow.Table(new string[] {
                            "template",
                            "description",
                            "duration"});
                table3096.AddRow(new string[] {
                            "push-in",
                            "Classroom-based support",
                            "full-year"});
                table3096.AddRow(new string[] {
                            "pull-out",
                            "Individual therapy sessions",
                            "semester"});
                table3096.AddRow(new string[] {
                            "consultative",
                            "Teacher support model",
                            "monthly"});
#line 100
    testRunner.And("templates should include:", ((string)(null)), table3096, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Predict curriculum progress")]
        [Xunit.TraitAttribute("FeatureTitle", "Curriculum Planning API Endpoints (FR-031)")]
        [Xunit.TraitAttribute("Description", "Predict curriculum progress")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "curriculum")]
        [Xunit.TraitAttribute("Category", "prediction")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PredictCurriculumProgress()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "curriculum",
                    "prediction",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Predict curriculum progress", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 108
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3097 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3097.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3097.AddRow(new string[] {
                            "currentProgress",
                            "{\"goal1\": 45, \"goal2\": 60}"});
                table3097.AddRow(new string[] {
                            "weeksRemaining",
                            "20"});
#line 109
    testRunner.When("I send a POST request to \"/api/curriculum/progress/predict\" with:", ((string)(null)), table3097, "When ");
#line hidden
#line 114
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3098 = new TechTalk.SpecFlow.Table(new string[] {
                            "goal",
                            "currentRate",
                            "projection",
                            "confidence"});
                table3098.AddRow(new string[] {
                            "goal1",
                            "2.25%/week",
                            "90%",
                            "high"});
                table3098.AddRow(new string[] {
                            "goal2",
                            "3%/week",
                            "100%",
                            "very high"});
#line 115
    testRunner.And("predictions should show:", ((string)(null)), table3098, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Share curriculum with team")]
        [Xunit.TraitAttribute("FeatureTitle", "Curriculum Planning API Endpoints (FR-031)")]
        [Xunit.TraitAttribute("Description", "Share curriculum with team")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "curriculum")]
        [Xunit.TraitAttribute("Category", "collaboration")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ShareCurriculumWithTeam()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "curriculum",
                    "collaboration",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Share curriculum with team", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 122
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3099 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3099.AddRow(new string[] {
                            "curriculumId",
                            "curr-2024-123"});
                table3099.AddRow(new string[] {
                            "teamMembers",
                            "[\"ot@school.edu\", \"teacher@school.edu\"]"});
                table3099.AddRow(new string[] {
                            "permissions",
                            "\"view-only\""});
                table3099.AddRow(new string[] {
                            "message",
                            "\"Please review Emma\'s plan\""});
#line 123
    testRunner.When("I send a POST request to \"/api/curriculum/share/team\" with:", ((string)(null)), table3099, "When ");
#line hidden
#line 129
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
    testRunner.And("team should have access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
    testRunner.And("notifications should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate curriculum summary report")]
        [Xunit.TraitAttribute("FeatureTitle", "Curriculum Planning API Endpoints (FR-031)")]
        [Xunit.TraitAttribute("Description", "Generate curriculum summary report")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "curriculum")]
        [Xunit.TraitAttribute("Category", "reports")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateCurriculumSummaryReport()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "curriculum",
                    "reports",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate curriculum summary report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 135
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 136
    testRunner.When("I send a GET request to \"/api/curriculum/reports/summary?curriculumId=curr-2024-1" +
                        "23\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 137
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3100 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "content"});
                table3100.AddRow(new string[] {
                            "overview",
                            "Goals and timeline"});
                table3100.AddRow(new string[] {
                            "progress",
                            "Current vs expected"});
                table3100.AddRow(new string[] {
                            "resources",
                            "Used and planned"});
                table3100.AddRow(new string[] {
                            "recommendations",
                            "Adjustments needed"});
#line 138
    testRunner.And("report should contain:", ((string)(null)), table3100, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CurriculumPlanningAPIEndpointsFR_031Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CurriculumPlanningAPIEndpointsFR_031Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
