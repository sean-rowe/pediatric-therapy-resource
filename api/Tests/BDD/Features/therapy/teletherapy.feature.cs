// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TeletherapySessionsFeature : object, Xunit.IClassFixture<TeletherapySessionsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "teletherapy.feature"
#line hidden
        
        public TeletherapySessionsFeature(TeletherapySessionsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Teletherapy Sessions", "  As a therapist\n  I want to conduct virtual therapy sessions\n  So that I can pro" +
                    "vide services remotely when needed", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("I am logged in as therapist \"Sarah Johnson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("teletherapy is enabled for my account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3255 = new TechTalk.SpecFlow.Table(new string[] {
                        "Student",
                        "Date",
                        "Time",
                        "Service"});
            table3255.AddRow(new string[] {
                        "Emma Wilson",
                        "2024-01-15",
                        "09:00-09:30",
                        "OT"});
            table3255.AddRow(new string[] {
                        "Liam Brown",
                        "2024-01-15",
                        "10:00-10:30",
                        "OT"});
#line 9
    testRunner.And("I have the following virtual sessions scheduled:", ((string)(null)), table3255, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify teletherapy consent")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Verify teletherapy consent")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void VerifyTeletherapyConsent()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify teletherapy consent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 18
      testRunner.Given("\"Emma Wilson\" is scheduled for virtual session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
      testRunner.When("I check session prerequisites", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3256 = new TechTalk.SpecFlow.Table(new string[] {
                            "Requirement",
                            "Status",
                            "Details"});
                table3256.AddRow(new string[] {
                            "Parent Consent",
                            "Completed",
                            "Signed on 2024-01-01"});
                table3256.AddRow(new string[] {
                            "Technology Agreement",
                            "Completed",
                            "Agreed to platform terms"});
                table3256.AddRow(new string[] {
                            "Emergency Contact",
                            "On file",
                            "Mother: 555-0123"});
                table3256.AddRow(new string[] {
                            "Session Location",
                            "Confirmed",
                            "Home with parent supervision"});
#line 20
      testRunner.Then("I verify:", ((string)(null)), table3256, "Then ");
#line hidden
#line 26
      testRunner.And("session can proceed if all requirements met", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Pre-session technology check")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Pre-session technology check")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void Pre_SessionTechnologyCheck()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pre-session technology check", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 30
      testRunner.Given("session starts in 15 minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
      testRunner.When("I initiate tech check with parent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3257 = new TechTalk.SpecFlow.Table(new string[] {
                            "Component",
                            "Required",
                            "Status Check"});
                table3257.AddRow(new string[] {
                            "Internet Speed",
                            "10+ Mbps",
                            "Testing bandwidth"});
                table3257.AddRow(new string[] {
                            "Camera",
                            "720p min",
                            "Video preview working"});
                table3257.AddRow(new string[] {
                            "Microphone",
                            "Clear audio",
                            "Echo test completed"});
                table3257.AddRow(new string[] {
                            "Screen Share",
                            "Enabled",
                            "Permissions granted"});
#line 32
      testRunner.Then("system verifies:", ((string)(null)), table3257, "Then ");
#line hidden
#line 38
      testRunner.And("troubleshooting guide available if issues", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parent not present for required session")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Parent not present for required session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ParentNotPresentForRequiredSession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parent not present for required session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 42
      testRunner.Given("\"Emma Wilson\" requires parent supervision", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
      testRunner.When("session starts without parent present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3258 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Reason"});
                table3258.AddRow(new string[] {
                            "Document situation",
                            "Compliance requirement"});
                table3258.AddRow(new string[] {
                            "Attempt parent contact",
                            "Call/text provided numbers"});
                table3258.AddRow(new string[] {
                            "Reschedule if needed",
                            "Cannot proceed without parent"});
                table3258.AddRow(new string[] {
                            "File incident report",
                            "Policy violation"});
#line 44
      testRunner.Then("I must:", ((string)(null)), table3258, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Start teletherapy session")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Start teletherapy session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void StartTeletherapySession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start teletherapy session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 55
      testRunner.Given("all prerequisites are met", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
      testRunner.When("I start session with \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3259 = new TechTalk.SpecFlow.Table(new string[] {
                            "Feature",
                            "Purpose"});
                table3259.AddRow(new string[] {
                            "HD Video",
                            "Clear visual for demonstrations"});
                table3259.AddRow(new string[] {
                            "Screen Annotation",
                            "Draw/highlight during activities"});
                table3259.AddRow(new string[] {
                            "Virtual Whiteboard",
                            "Interactive writing practice"});
                table3259.AddRow(new string[] {
                            "File Sharing",
                            "Share worksheets instantly"});
                table3259.AddRow(new string[] {
                            "Recording Option",
                            "With consent only"});
                table3259.AddRow(new string[] {
                            "Timer Display",
                            "Session duration tracking"});
#line 57
      testRunner.Then("the platform provides:", ((string)(null)), table3259, "Then ");
#line hidden
#line 65
      testRunner.And("session is marked \"in progress\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use interactive therapy tools")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Use interactive therapy tools")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UseInteractiveTherapyTools()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use interactive therapy tools", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 69
      testRunner.Given("I am in session with \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
      testRunner.When("I launch therapy activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3260 = new TechTalk.SpecFlow.Table(new string[] {
                            "Tool Type",
                            "Examples",
                            "Features"});
                table3260.AddRow(new string[] {
                            "Digital Manipulatives",
                            "Virtual blocks, puzzles",
                            "Drag-drop, rotate, resize"});
                table3260.AddRow(new string[] {
                            "Drawing Tools",
                            "Pencil, shapes, stamps",
                            "Pressure sensitivity"});
                table3260.AddRow(new string[] {
                            "Games",
                            "Memory match, sequencing",
                            "Turn-taking enabled"});
                table3260.AddRow(new string[] {
                            "Assessment Tools",
                            "Standardized test materials",
                            "Secure, timed sections"});
#line 71
      testRunner.Then("I can use:", ((string)(null)), table3260, "Then ");
#line hidden
#line 77
      testRunner.And("student\'s screen mirrors my demonstrations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
      testRunner.And("activities are logged for documentation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Manage session disruptions")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Manage session disruptions")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ManageSessionDisruptions()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manage session disruptions", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 82
      testRunner.Given("active session with \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
      testRunner.When("connection is disrupted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3261 = new TechTalk.SpecFlow.Table(new string[] {
                            "Response",
                            "Action"});
                table3261.AddRow(new string[] {
                            "Auto-reconnect",
                            "Attempts for 60 seconds"});
                table3261.AddRow(new string[] {
                            "Save session state",
                            "Preserves activity progress"});
                table3261.AddRow(new string[] {
                            "Notify parent",
                            "SMS about connection issue"});
                table3261.AddRow(new string[] {
                            "Document disruption",
                            "Logs time and duration"});
#line 84
      testRunner.Then("system:", ((string)(null)), table3261, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3262 = new TechTalk.SpecFlow.Table(new string[] {
                            "Follow-up",
                            "Implementation"});
                table3262.AddRow(new string[] {
                            "Contact parent",
                            "Call within 5 minutes"});
                table3262.AddRow(new string[] {
                            "Reschedule",
                            "Offer make-up session"});
                table3262.AddRow(new string[] {
                            "Document",
                            "Note partial session completion"});
#line 90
      testRunner.And("if reconnection fails:", ((string)(null)), table3262, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Secure session access")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Secure session access")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SecureSessionAccess()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Secure session access", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 100
      testRunner.Given("session link is generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
      testRunner.When("participants join", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3263 = new TechTalk.SpecFlow.Table(new string[] {
                            "Measure",
                            "Implementation"});
                table3263.AddRow(new string[] {
                            "Unique session ID",
                            "One-time use code"});
                table3263.AddRow(new string[] {
                            "Waiting room",
                            "Therapist admits participants"});
                table3263.AddRow(new string[] {
                            "Participant limit",
                            "Max 4 (therapist, student, parents)"});
                table3263.AddRow(new string[] {
                            "Screen recording",
                            "Blocked unless consented"});
                table3263.AddRow(new string[] {
                            "Chat monitoring",
                            "Saved to session record"});
#line 102
      testRunner.Then("security measures include:", ((string)(null)), table3263, "Then ");
#line hidden
#line 109
      testRunner.And("unauthorized participants cannot join", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle unauthorized participant")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Handle unauthorized participant")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleUnauthorizedParticipant()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle unauthorized participant", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 113
      testRunner.Given("session is in progress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
      testRunner.When("unknown user attempts to join", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3264 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Result"});
                table3264.AddRow(new string[] {
                            "Block entry",
                            "User remains in waiting room"});
                table3264.AddRow(new string[] {
                            "Alert therapist",
                            "Pop-up notification"});
                table3264.AddRow(new string[] {
                            "Log attempt",
                            "IP and timestamp recorded"});
                table3264.AddRow(new string[] {
                            "Continue session",
                            "No disruption to activities"});
#line 115
      testRunner.Then("the system handles unauthorized access:", ((string)(null)), table3264, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Protect student privacy")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Protect student privacy")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ProtectStudentPrivacy()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Protect student privacy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 123
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 124
      testRunner.Given("I\'m documenting virtual session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 125
      testRunner.When("session includes sensitive information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3265 = new TechTalk.SpecFlow.Table(new string[] {
                            "Protection",
                            "Implementation"});
                table3265.AddRow(new string[] {
                            "Background blur",
                            "Automatic for home sessions"});
                table3265.AddRow(new string[] {
                            "Audio filtering",
                            "Remove background voices"});
                table3265.AddRow(new string[] {
                            "Screenshot blocking",
                            "Disabled on student side"});
                table3265.AddRow(new string[] {
                            "Session encryption",
                            "End-to-end encryption"});
#line 126
      testRunner.Then("privacy protections include:", ((string)(null)), table3265, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Document teletherapy session")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Document teletherapy session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentTeletherapySession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Document teletherapy session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 137
      testRunner.Given("I completed virtual session with \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 138
      testRunner.When("I document the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3266 = new TechTalk.SpecFlow.Table(new string[] {
                            "Teletherapy Field",
                            "Required Info"});
                table3266.AddRow(new string[] {
                            "Platform Used",
                            "Integrated video platform"});
                table3266.AddRow(new string[] {
                            "Connection Quality",
                            "Good/Fair/Poor"});
                table3266.AddRow(new string[] {
                            "Parent Participation",
                            "Present and engaged"});
                table3266.AddRow(new string[] {
                            "Technical Issues",
                            "None/Minor/Major"});
                table3266.AddRow(new string[] {
                            "Home Distractions",
                            "Minimal"});
                table3266.AddRow(new string[] {
                            "Student Engagement",
                            "High/Medium/Low"});
#line 139
      testRunner.Then("documentation includes standard fields plus:", ((string)(null)), table3266, "Then ");
#line hidden
#line 147
      testRunner.And("billing code reflects teletherapy modifier", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compare virtual to in-person effectiveness")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Compare virtual to in-person effectiveness")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompareVirtualToIn_PersonEffectiveness()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare virtual to in-person effectiveness", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 150
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 151
      testRunner.Given("\"Emma Wilson\" has both session types", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 152
      testRunner.When("I review progress data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3267 = new TechTalk.SpecFlow.Table(new string[] {
                            "Comparison Metric",
                            "In-Person",
                            "Virtual",
                            "Notes"});
                table3267.AddRow(new string[] {
                            "Goal Progress",
                            "15%/month",
                            "12%/month",
                            "Slightly slower"});
                table3267.AddRow(new string[] {
                            "Engagement Level",
                            "4.5/5",
                            "4.0/5",
                            "Good engagement"});
                table3267.AddRow(new string[] {
                            "Parent Involvement",
                            "Low",
                            "High",
                            "Benefit of virtual"});
                table3267.AddRow(new string[] {
                            "Session Completion",
                            "95%",
                            "88%",
                            "Tech issues impact"});
#line 153
      testRunner.Then("I can analyze:", ((string)(null)), table3267, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Conduct virtual group session")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Conduct virtual group session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConductVirtualGroupSession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Conduct virtual group session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 163
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 164
      testRunner.Given("I have group session with 3 students", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 165
      testRunner.When("all participants join", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3268 = new TechTalk.SpecFlow.Table(new string[] {
                            "Group Feature",
                            "Implementation"});
                table3268.AddRow(new string[] {
                            "Gallery view",
                            "See all participants"});
                table3268.AddRow(new string[] {
                            "Breakout rooms",
                            "Pair activities"});
                table3268.AddRow(new string[] {
                            "Shared whiteboard",
                            "Collaborative drawing"});
                table3268.AddRow(new string[] {
                            "Turn indicators",
                            "Show who\'s speaking"});
                table3268.AddRow(new string[] {
                            "Mute controls",
                            "Manage background noise"});
#line 166
      testRunner.Then("I can:", ((string)(null)), table3268, "Then ");
#line hidden
#line 173
      testRunner.And("each student\'s participation is tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Manage different student needs in group")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Manage different student needs in group")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ManageDifferentStudentNeedsInGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manage different student needs in group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 176
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 177
      testRunner.Given("group has varied technical setups", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 178
      testRunner.When("I run group activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3269 = new TechTalk.SpecFlow.Table(new string[] {
                            "Student",
                            "Need",
                            "Accommodation"});
                table3269.AddRow(new string[] {
                            "Emma",
                            "Slow internet",
                            "Lower video quality"});
                table3269.AddRow(new string[] {
                            "Liam",
                            "No touchscreen",
                            "Mouse-friendly activities"});
                table3269.AddRow(new string[] {
                            "Noah",
                            "Hearing aids",
                            "Visual cues emphasized"});
#line 179
      testRunner.Then("I accommodate:", ((string)(null)), table3269, "Then ");
#line hidden
#line 184
      testRunner.And("all students can participate fully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Assign between-session activities")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Assign between-session activities")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AssignBetween_SessionActivities()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign between-session activities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 189
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 190
      testRunner.Given("\"Emma Wilson\" completed virtual session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 191
      testRunner.When("I assign home practice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3270 = new TechTalk.SpecFlow.Table(new string[] {
                            "Component",
                            "Details"});
                table3270.AddRow(new string[] {
                            "Video instructions",
                            "5-minute demonstration"});
                table3270.AddRow(new string[] {
                            "Digital worksheet",
                            "Interactive PDF"});
                table3270.AddRow(new string[] {
                            "Practice schedule",
                            "3x daily, 10 minutes"});
                table3270.AddRow(new string[] {
                            "Progress tracking",
                            "Parent can mark complete"});
#line 192
      testRunner.Then("parent portal shows:", ((string)(null)), table3270, "Then ");
#line hidden
#line 198
      testRunner.And("completion syncs to my dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Review recorded session segments")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Review recorded session segments")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ReviewRecordedSessionSegments()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Review recorded session segments", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 201
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 202
      testRunner.Given("session recording was consented", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 203
      testRunner.When("I review for documentation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3271 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Purpose"});
                table3271.AddRow(new string[] {
                            "Mark timestamps",
                            "Key moments for progress"});
                table3271.AddRow(new string[] {
                            "Extract clips",
                            "Parent education segments"});
                table3271.AddRow(new string[] {
                            "Delete full video",
                            "After documentation complete"});
                table3271.AddRow(new string[] {
                            "Share segments",
                            "With IEP team if authorized"});
#line 204
      testRunner.Then("I can:", ((string)(null)), table3271, "Then ");
#line hidden
#line 210
      testRunner.And("recordings auto-delete after 30 days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Medical emergency during session")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Medical emergency during session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MedicalEmergencyDuringSession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Medical emergency during session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 215
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 216
      testRunner.Given("I\'m in session with \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 217
      testRunner.When("I observe signs of medical distress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3272 = new TechTalk.SpecFlow.Table(new string[] {
                            "Priority",
                            "Action"});
                table3272.AddRow(new string[] {
                            "1",
                            "Instruct parent to call 911"});
                table3272.AddRow(new string[] {
                            "2",
                            "Stay on video for support"});
                table3272.AddRow(new string[] {
                            "3",
                            "Document observations"});
                table3272.AddRow(new string[] {
                            "4",
                            "Contact school nurse"});
                table3272.AddRow(new string[] {
                            "5",
                            "Complete incident report"});
#line 218
      testRunner.Then("I immediately:", ((string)(null)), table3272, "Then ");
#line hidden
#line 225
      testRunner.And("session recording is preserved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Behavioral crisis in virtual setting")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Behavioral crisis in virtual setting")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BehavioralCrisisInVirtualSetting()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Behavioral crisis in virtual setting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 228
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 229
      testRunner.Given("student showing escalated behavior", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 230
      testRunner.When("de-escalation needed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3273 = new TechTalk.SpecFlow.Table(new string[] {
                            "Strategy",
                            "Implementation"});
                table3273.AddRow(new string[] {
                            "Calm voice",
                            "Lower tone, slower pace"});
                table3273.AddRow(new string[] {
                            "Visual supports",
                            "Screen share calming images"});
                table3273.AddRow(new string[] {
                            "Parent coaching",
                            "Guide parent intervention"});
                table3273.AddRow(new string[] {
                            "Sensory breaks",
                            "Suggest specific activities"});
                table3273.AddRow(new string[] {
                            "End if needed",
                            "Safety over session completion"});
#line 231
      testRunner.Then("virtual strategies include:", ((string)(null)), table3273, "Then ");
#line hidden
#line 238
      testRunner.And("follow-up required within 24 hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle complete platform failure during session")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Handle complete platform failure during session")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "technical-failure")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleCompletePlatformFailureDuringSession()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "technical-failure",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle complete platform failure during session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 242
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 243
    testRunner.Given("I am conducting a teletherapy session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 244
    testRunner.When("the platform experiences a complete system failure", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 245
    testRunner.Then("I should receive immediate notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 246
    testRunner.And("backup communication methods should activate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 247
    testRunner.And("the session should be automatically documented as \"technical failure\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 248
    testRunner.And("parents should receive SMS notification with rescheduling link", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle insufficient bandwidth for session")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Handle insufficient bandwidth for session")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "bandwidth")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleInsufficientBandwidthForSession()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "bandwidth",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle insufficient bandwidth for session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 251
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 252
    testRunner.Given("minimum bandwidth requirement is 5 Mbps", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 253
    testRunner.When("connection drops below 2 Mbps during session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3274 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Implementation"});
                table3274.AddRow(new string[] {
                            "Reduce video quality",
                            "Drop to 480p"});
                table3274.AddRow(new string[] {
                            "Prioritize audio",
                            "Maintain clear communication"});
                table3274.AddRow(new string[] {
                            "Display warning",
                            "Notify both parties"});
                table3274.AddRow(new string[] {
                            "Suggest reconnection",
                            "If quality doesn\'t improve"});
#line 254
    testRunner.Then("the system should automatically:", ((string)(null)), table3274, "Then ");
#line hidden
#line 260
    testRunner.And("session quality metrics should be logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle unsupported device attempting to join")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Handle unsupported device attempting to join")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "device-compatibility")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleUnsupportedDeviceAttemptingToJoin()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "device-compatibility",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle unsupported device attempting to join", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 263
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 264
    testRunner.Given("a parent tries to join using an outdated browser", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 265
    testRunner.When("the device fails compatibility check", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3275 = new TechTalk.SpecFlow.Table(new string[] {
                            "Response",
                            "Action"});
                table3275.AddRow(new string[] {
                            "Block session entry",
                            "Prevent poor experience"});
                table3275.AddRow(new string[] {
                            "Display help message",
                            "Clear upgrade instructions"});
                table3275.AddRow(new string[] {
                            "Offer phone fallback",
                            "Audio-only option"});
                table3275.AddRow(new string[] {
                            "Provide tech support",
                            "Direct contact information"});
#line 266
    testRunner.Then("the system should:", ((string)(null)), table3275, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Detect potential security breach during session")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Detect potential security breach during session")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "security-breach")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DetectPotentialSecurityBreachDuringSession()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "security-breach",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Detect potential security breach during session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 274
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 275
    testRunner.Given("session is in progress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3276 = new TechTalk.SpecFlow.Table(new string[] {
                            "Activity Type",
                            "Detection Trigger"});
                table3276.AddRow(new string[] {
                            "Screen recording",
                            "Unauthorized software"});
                table3276.AddRow(new string[] {
                            "Multiple connections",
                            "Same user, different IPs"});
                table3276.AddRow(new string[] {
                            "Unusual data access",
                            "Rapid file downloads"});
#line 276
    testRunner.When("suspicious activity is detected:", ((string)(null)), table3276, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3277 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Timing"});
                table3277.AddRow(new string[] {
                            "Terminate session",
                            "Immediate"});
                table3277.AddRow(new string[] {
                            "Alert security team",
                            "Within 1 minute"});
                table3277.AddRow(new string[] {
                            "Notify participants",
                            "Security concern message"});
                table3277.AddRow(new string[] {
                            "Lock user account",
                            "Pending investigation"});
#line 281
    testRunner.Then("security protocol activates:", ((string)(null)), table3277, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle session without proper consent")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Handle session without proper consent")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "consent-violation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleSessionWithoutProperConsent()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "consent-violation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle session without proper consent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 289
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 290
    testRunner.Given("session is scheduled to start", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 291
    testRunner.When("I discover consent forms are missing or expired", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3278 = new TechTalk.SpecFlow.Table(new string[] {
                            "Required Action",
                            "Implementation"});
                table3278.AddRow(new string[] {
                            "Cancel session",
                            "Cannot proceed legally"});
                table3278.AddRow(new string[] {
                            "Document reason",
                            "Compliance violation"});
                table3278.AddRow(new string[] {
                            "Contact parent",
                            "Explain consent requirement"});
                table3278.AddRow(new string[] {
                            "Reschedule",
                            "After consent obtained"});
#line 292
    testRunner.Then("I must:", ((string)(null)), table3278, "Then ");
#line hidden
#line 298
    testRunner.And("billing should not occur for cancelled session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle inappropriate parent interference")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Handle inappropriate parent interference")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "parent-interruption")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleInappropriateParentInterference()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "parent-interruption",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle inappropriate parent interference", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 301
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 302
    testRunner.Given("session is in progress with student", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 303
    testRunner.When("parent repeatedly interrupts therapy activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3279 = new TechTalk.SpecFlow.Table(new string[] {
                            "Professional Response",
                            "Purpose"});
                table3279.AddRow(new string[] {
                            "Politely redirect",
                            "Maintain therapeutic space"});
                table3279.AddRow(new string[] {
                            "Explain boundaries",
                            "Educational approach"});
                table3279.AddRow(new string[] {
                            "Document behavior",
                            "Pattern tracking"});
                table3279.AddRow(new string[] {
                            "Discuss privately",
                            "Separate conversation"});
#line 304
    testRunner.Then("I should:", ((string)(null)), table3279, "Then ");
#line hidden
#line 310
    testRunner.And("if interference continues, session may be terminated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle inability to reach emergency contacts")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Handle inability to reach emergency contacts")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "emergency-contact-failure")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleInabilityToReachEmergencyContacts()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "emergency-contact-failure",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle inability to reach emergency contacts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 313
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 314
    testRunner.Given("medical emergency occurs during session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 315
    testRunner.When("primary emergency contacts are unreachable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3280 = new TechTalk.SpecFlow.Table(new string[] {
                            "Step",
                            "Action",
                            "Timeframe"});
                table3280.AddRow(new string[] {
                            "1",
                            "Try all listed contacts",
                            "2 minutes"});
                table3280.AddRow(new string[] {
                            "2",
                            "Contact local emergency",
                            "Immediately"});
                table3280.AddRow(new string[] {
                            "3",
                            "Notify school administration",
                            "Within 5 minutes"});
                table3280.AddRow(new string[] {
                            "4",
                            "Document all attempts",
                            "Ongoing"});
#line 316
    testRunner.Then("escalation protocol:", ((string)(null)), table3280, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle session data corruption")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Handle session data corruption")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "data-corruption")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleSessionDataCorruption()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "data-corruption",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle session data corruption", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 324
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 325
    testRunner.Given("session is being recorded with consent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 326
    testRunner.When("data corruption occurs during recording", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3281 = new TechTalk.SpecFlow.Table(new string[] {
                            "Response",
                            "Implementation"});
                table3281.AddRow(new string[] {
                            "Detect corruption",
                            "Real-time integrity check"});
                table3281.AddRow(new string[] {
                            "Alert therapist",
                            "Immediate notification"});
                table3281.AddRow(new string[] {
                            "Continue session",
                            "Don\'t disrupt service"});
                table3281.AddRow(new string[] {
                            "Backup documentation",
                            "Manual notes required"});
                table3281.AddRow(new string[] {
                            "Investigate cause",
                            "Technical team review"});
#line 327
    testRunner.Then("the system should:", ((string)(null)), table3281, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle student emotional distress in virtual setting")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Handle student emotional distress in virtual setting")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "student-distress")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleStudentEmotionalDistressInVirtualSetting()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "student-distress",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle student emotional distress in virtual setting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 336
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 337
    testRunner.Given("student becomes extremely upset during session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 338
    testRunner.When("virtual calming strategies are ineffective", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3282 = new TechTalk.SpecFlow.Table(new string[] {
                            "Priority",
                            "Action"});
                table3282.AddRow(new string[] {
                            "1",
                            "Coach parent through support"});
                table3282.AddRow(new string[] {
                            "2",
                            "Suggest immediate comfort"});
                table3282.AddRow(new string[] {
                            "3",
                            "End session if necessary"});
                table3282.AddRow(new string[] {
                            "4",
                            "Schedule follow-up call"});
                table3282.AddRow(new string[] {
                            "5",
                            "Document incident thoroughly"});
#line 339
    testRunner.Then("intervention protocol:", ((string)(null)), table3282, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Detect unauthorized session recording")]
        [Xunit.TraitAttribute("FeatureTitle", "Teletherapy Sessions")]
        [Xunit.TraitAttribute("Description", "Detect unauthorized session recording")]
        [Xunit.TraitAttribute("Category", "error")]
        [Xunit.TraitAttribute("Category", "unauthorized-recording")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DetectUnauthorizedSessionRecording()
        {
            string[] tagsOfScenario = new string[] {
                    "error",
                    "unauthorized-recording",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Detect unauthorized session recording", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 348
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 349
    testRunner.Given("session consent prohibits recording", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 350
    testRunner.When("system detects recording software", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3283 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Result"});
                table3283.AddRow(new string[] {
                            "Display warning",
                            "Cease recording immediately"});
                table3283.AddRow(new string[] {
                            "Pause session",
                            "Until compliance confirmed"});
                table3283.AddRow(new string[] {
                            "Document violation",
                            "Legal compliance record"});
                table3283.AddRow(new string[] {
                            "Report to supervisor",
                            "Potential breach of trust"});
#line 351
    testRunner.Then("immediate response:", ((string)(null)), table3283, "Then ");
#line hidden
#line 357
    testRunner.And("session may be terminated for non-compliance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TeletherapySessionsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TeletherapySessionsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
