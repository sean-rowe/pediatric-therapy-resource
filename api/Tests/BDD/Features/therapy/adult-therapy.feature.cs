// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AdultTherapyResourcesAPIEndpointsFR_016Feature : object, Xunit.IClassFixture<AdultTherapyResourcesAPIEndpointsFR_016Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "adult-therapy.feature"
#line hidden
        
        public AdultTherapyResourcesAPIEndpointsFR_016Feature(AdultTherapyResourcesAPIEndpointsFR_016Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Adult Therapy Resources API Endpoints (FR-016)", "  As a therapy professional working with adults\n  I want access to age-appropriat" +
                    "e adult and geriatric resources\n  So that I can provide effective therapy for ad" +
                    "ult populations", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Search adult-specific therapy resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Adult Therapy Resources API Endpoints (FR-016)")]
        [Xunit.TraitAttribute("Description", "Search adult-specific therapy resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "adult")]
        [Xunit.TraitAttribute("Category", "search")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SearchAdult_SpecificTherapyResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "adult",
                    "search",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search adult-specific therapy resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/resources/adult/search?condition=aphasia&level=mode" +
                        "rate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2953 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2953.AddRow(new string[] {
                            "resourceId",
                            "string"});
                table2953.AddRow(new string[] {
                            "title",
                            "string"});
                table2953.AddRow(new string[] {
                            "ageRange",
                            "string"});
                table2953.AddRow(new string[] {
                            "conditionFocus",
                            "array"});
                table2953.AddRow(new string[] {
                            "complexityLevel",
                            "string"});
                table2953.AddRow(new string[] {
                            "format",
                            "string"});
#line 15
    testRunner.And("the therapy response should contain array of:", ((string)(null)), table2953, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access cognitive rehabilitation materials")]
        [Xunit.TraitAttribute("FeatureTitle", "Adult Therapy Resources API Endpoints (FR-016)")]
        [Xunit.TraitAttribute("Description", "Access cognitive rehabilitation materials")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "adult")]
        [Xunit.TraitAttribute("Category", "cognitive")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessCognitiveRehabilitationMaterials()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "adult",
                    "cognitive",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access cognitive rehabilitation materials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 27
    testRunner.When("I send a GET request to \"/api/resources/adult/cognitive-rehab/memory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2954 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "content"});
                table2954.AddRow(new string[] {
                            "worksheets",
                            "Memory strategy exercises"});
                table2954.AddRow(new string[] {
                            "functionalTasks",
                            "Medication management"});
                table2954.AddRow(new string[] {
                            "compensatory",
                            "Memory aid templates"});
                table2954.AddRow(new string[] {
                            "carryover",
                            "Home practice activities"});
#line 29
    testRunner.And("resources should include:", ((string)(null)), table2954, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate dysphagia treatment protocol")]
        [Xunit.TraitAttribute("FeatureTitle", "Adult Therapy Resources API Endpoints (FR-016)")]
        [Xunit.TraitAttribute("Description", "Generate dysphagia treatment protocol")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "adult")]
        [Xunit.TraitAttribute("Category", "dysphagia")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateDysphagiaTreatmentProtocol()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "adult",
                    "dysphagia",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate dysphagia treatment protocol", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2955 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2955.AddRow(new string[] {
                            "diagnosisCode",
                            "R13.12"});
                table2955.AddRow(new string[] {
                            "dietLevel",
                            "IDDSI-4"});
                table2955.AddRow(new string[] {
                            "strategies",
                            "[\"chin-tuck\", \"effortful-swallow\"]"});
                table2955.AddRow(new string[] {
                            "contraindications",
                            "[\"thin-liquids\"]"});
#line 39
    testRunner.When("I send a POST request to \"/api/resources/adult/dysphagia/protocol\" with:", ((string)(null)), table2955, "When ");
#line hidden
#line 45
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2956 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "content"});
                table2956.AddRow(new string[] {
                            "exercises",
                            "Swallowing exercises"});
                table2956.AddRow(new string[] {
                            "dietGuidelines",
                            "IDDSI level 4 foods"});
                table2956.AddRow(new string[] {
                            "precautions",
                            "Aspiration precautions"});
                table2956.AddRow(new string[] {
                            "education",
                            "Patient/caregiver handouts"});
#line 46
    testRunner.And("protocol should include:", ((string)(null)), table2956, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access return-to-work assessments")]
        [Xunit.TraitAttribute("FeatureTitle", "Adult Therapy Resources API Endpoints (FR-016)")]
        [Xunit.TraitAttribute("Description", "Access return-to-work assessments")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "adult")]
        [Xunit.TraitAttribute("Category", "vocational")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessReturn_To_WorkAssessments()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "adult",
                    "vocational",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access return-to-work assessments", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 56
    testRunner.When("I send a GET request to \"/api/resources/adult/return-to-work?injury=TBI\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2957 = new TechTalk.SpecFlow.Table(new string[] {
                            "tool",
                            "purpose"});
                table2957.AddRow(new string[] {
                            "cognitiveScreening",
                            "Work readiness evaluation"});
                table2957.AddRow(new string[] {
                            "functionalCapacity",
                            "Physical demands analysis"});
                table2957.AddRow(new string[] {
                            "workSimulation",
                            "Job-specific tasks"});
                table2957.AddRow(new string[] {
                            "accommodations",
                            "Workplace modifications"});
#line 58
    testRunner.And("assessments should include:", ((string)(null)), table2957, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create caregiver education materials")]
        [Xunit.TraitAttribute("FeatureTitle", "Adult Therapy Resources API Endpoints (FR-016)")]
        [Xunit.TraitAttribute("Description", "Create caregiver education materials")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "adult")]
        [Xunit.TraitAttribute("Category", "caregiver")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateCaregiverEducationMaterials()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "adult",
                    "caregiver",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create caregiver education materials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2958 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2958.AddRow(new string[] {
                            "diagnosis",
                            "dementia"});
                table2958.AddRow(new string[] {
                            "stage",
                            "moderate"});
                table2958.AddRow(new string[] {
                            "topics",
                            "[\"transfers\", \"communication\", \"safety\"]"});
                table2958.AddRow(new string[] {
                            "language",
                            "es"});
#line 68
    testRunner.When("I send a POST request to \"/api/resources/adult/caregiver-training\" with:", ((string)(null)), table2958, "When ");
#line hidden
#line 74
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2959 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "content"});
                table2959.AddRow(new string[] {
                            "videos",
                            "Safe transfer techniques"});
                table2959.AddRow(new string[] {
                            "handouts",
                            "Communication strategies"});
                table2959.AddRow(new string[] {
                            "checklists",
                            "Home safety evaluation"});
                table2959.AddRow(new string[] {
                            "schedules",
                            "Daily routine templates"});
#line 75
    testRunner.And("materials should include:", ((string)(null)), table2959, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access geriatric-specific resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Adult Therapy Resources API Endpoints (FR-016)")]
        [Xunit.TraitAttribute("Description", "Access geriatric-specific resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "adult")]
        [Xunit.TraitAttribute("Category", "geriatric")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessGeriatric_SpecificResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "adult",
                    "geriatric",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access geriatric-specific resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 85
    testRunner.When("I send a GET request to \"/api/resources/adult/geriatric/fall-prevention\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2960 = new TechTalk.SpecFlow.Table(new string[] {
                            "consideration",
                            "adaptation"});
                table2960.AddRow(new string[] {
                            "visionChanges",
                            "Large print, high contrast"});
                table2960.AddRow(new string[] {
                            "cognitiveDecline",
                            "Simplified instructions"});
                table2960.AddRow(new string[] {
                            "motivation",
                            "Meaningful activities"});
                table2960.AddRow(new string[] {
                            "socialContext",
                            "Group exercise options"});
#line 87
    testRunner.And("resources should be tailored for:", ((string)(null)), table2960, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate adult functional goals")]
        [Xunit.TraitAttribute("FeatureTitle", "Adult Therapy Resources API Endpoints (FR-016)")]
        [Xunit.TraitAttribute("Description", "Generate adult functional goals")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "adult")]
        [Xunit.TraitAttribute("Category", "goals")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateAdultFunctionalGoals()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "adult",
                    "goals",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate adult functional goals", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2961 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2961.AddRow(new string[] {
                            "diagnosis",
                            "CVA"});
                table2961.AddRow(new string[] {
                            "affectedSide",
                            "right"});
                table2961.AddRow(new string[] {
                            "priorLevel",
                            "independent"});
                table2961.AddRow(new string[] {
                            "currentNeeds",
                            "[\"dressing\", \"cooking\", \"driving\"]"});
#line 97
    testRunner.When("I send a POST request to \"/api/resources/adult/functional-goals\" with:", ((string)(null)), table2961, "When ");
#line hidden
#line 103
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2962 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "example"});
                table2962.AddRow(new string[] {
                            "measurable",
                            "Don shirt independently in 5 min"});
                table2962.AddRow(new string[] {
                            "functional",
                            "Prepare simple meal safely"});
                table2962.AddRow(new string[] {
                            "timebound",
                            "Within 4 weeks"});
                table2962.AddRow(new string[] {
                            "relevant",
                            "Return to prior activities"});
#line 104
    testRunner.And("goals should be:", ((string)(null)), table2962, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access compensatory strategy resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Adult Therapy Resources API Endpoints (FR-016)")]
        [Xunit.TraitAttribute("Description", "Access compensatory strategy resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "adult")]
        [Xunit.TraitAttribute("Category", "compensatory")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessCompensatoryStrategyResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "adult",
                    "compensatory",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access compensatory strategy resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 114
    testRunner.When("I send a GET request to \"/api/resources/adult/compensatory-strategies/memory\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 115
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2963 = new TechTalk.SpecFlow.Table(new string[] {
                            "strategy",
                            "implementation"});
                table2963.AddRow(new string[] {
                            "external aids",
                            "Smartphone apps, calendars"});
                table2963.AddRow(new string[] {
                            "environmental",
                            "Label drawers, routines"});
                table2963.AddRow(new string[] {
                            "internal",
                            "Mnemonics, visualization"});
                table2963.AddRow(new string[] {
                            "training",
                            "Strategy practice sheets"});
#line 116
    testRunner.And("strategies should include:", ((string)(null)), table2963, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create independent living curriculum")]
        [Xunit.TraitAttribute("FeatureTitle", "Adult Therapy Resources API Endpoints (FR-016)")]
        [Xunit.TraitAttribute("Description", "Create independent living curriculum")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "adult")]
        [Xunit.TraitAttribute("Category", "adl")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateIndependentLivingCurriculum()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "adult",
                    "adl",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create independent living curriculum", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 125
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2964 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2964.AddRow(new string[] {
                            "focusAreas",
                            "[\"money\", \"medication\", \"meal-prep\"]"});
                table2964.AddRow(new string[] {
                            "cognitiveLevel",
                            "mild-impairment"});
                table2964.AddRow(new string[] {
                            "setting",
                            "assisted-living"});
#line 126
    testRunner.When("I send a POST request to \"/api/resources/adult/independent-living\" with:", ((string)(null)), table2964, "When ");
#line hidden
#line 131
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2965 = new TechTalk.SpecFlow.Table(new string[] {
                            "module",
                            "activities"});
                table2965.AddRow(new string[] {
                            "moneyMgmt",
                            "Budgeting worksheets"});
                table2965.AddRow(new string[] {
                            "medication",
                            "Pill box organization"});
                table2965.AddRow(new string[] {
                            "mealPrep",
                            "Simple recipe cards"});
                table2965.AddRow(new string[] {
                            "safety",
                            "Emergency procedures"});
#line 132
    testRunner.And("curriculum should contain:", ((string)(null)), table2965, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access adult-specific outcome measures")]
        [Xunit.TraitAttribute("FeatureTitle", "Adult Therapy Resources API Endpoints (FR-016)")]
        [Xunit.TraitAttribute("Description", "Access adult-specific outcome measures")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "adult")]
        [Xunit.TraitAttribute("Category", "outcomes")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessAdult_SpecificOutcomeMeasures()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "adult",
                    "outcomes",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access adult-specific outcome measures", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 141
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 142
    testRunner.When("I send a GET request to \"/api/resources/adult/outcome-measures?setting=snf\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 143
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2966 = new TechTalk.SpecFlow.Table(new string[] {
                            "measure",
                            "domain",
                            "requirements"});
                table2966.AddRow(new string[] {
                            "FIM",
                            "Functional independence",
                            "Certified"});
                table2966.AddRow(new string[] {
                            "COPM",
                            "Occupational performance",
                            "Training"});
                table2966.AddRow(new string[] {
                            "MoCA",
                            "Cognitive screening",
                            "Free"});
                table2966.AddRow(new string[] {
                            "Berg Balance",
                            "Fall risk",
                            "Equipment"});
#line 144
    testRunner.And("measures should include:", ((string)(null)), table2966, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AdultTherapyResourcesAPIEndpointsFR_016Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AdultTherapyResourcesAPIEndpointsFR_016Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
