// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class OutcomeMeasurementAPIEndpointsFR_032Feature : object, Xunit.IClassFixture<OutcomeMeasurementAPIEndpointsFR_032Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "outcome-measurement.feature"
#line hidden
        
        public OutcomeMeasurementAPIEndpointsFR_032Feature(OutcomeMeasurementAPIEndpointsFR_032Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Outcome Measurement API Endpoints (FR-032)", "  As a therapy professional\n  I want to use standardized outcome measures\n  So th" +
                    "at I can demonstrate treatment effectiveness for insurance and quality improveme" +
                    "nt", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List available outcome measures")]
        [Xunit.TraitAttribute("FeatureTitle", "Outcome Measurement API Endpoints (FR-032)")]
        [Xunit.TraitAttribute("Description", "List available outcome measures")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "outcomes")]
        [Xunit.TraitAttribute("Category", "catalog")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ListAvailableOutcomeMeasures()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "outcomes",
                    "catalog",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List available outcome measures", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/outcome-measures/available?discipline=PT&setting=ou" +
                        "tpatient\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3158 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3158.AddRow(new string[] {
                            "measureId",
                            "string"});
                table3158.AddRow(new string[] {
                            "name",
                            "string"});
                table3158.AddRow(new string[] {
                            "abbreviation",
                            "string"});
                table3158.AddRow(new string[] {
                            "domains",
                            "array"});
                table3158.AddRow(new string[] {
                            "populationAge",
                            "object"});
                table3158.AddRow(new string[] {
                            "adminTime",
                            "number"});
                table3158.AddRow(new string[] {
                            "insuranceAccepted",
                            "array"});
                table3158.AddRow(new string[] {
                            "licenseRequired",
                            "boolean"});
#line 15
    testRunner.And("the therapy response should contain array of:", ((string)(null)), table3158, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Administer FOTO assessment")]
        [Xunit.TraitAttribute("FeatureTitle", "Outcome Measurement API Endpoints (FR-032)")]
        [Xunit.TraitAttribute("Description", "Administer FOTO assessment")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "outcomes")]
        [Xunit.TraitAttribute("Category", "administration")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AdministerFOTOAssessment()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "outcomes",
                    "administration",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Administer FOTO assessment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3159 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3159.AddRow(new string[] {
                            "patientId",
                            "patient-123"});
                table3159.AddRow(new string[] {
                            "bodyPart",
                            "shoulder"});
                table3159.AddRow(new string[] {
                            "visitType",
                            "initial-evaluation"});
                table3159.AddRow(new string[] {
                            "diagnosis",
                            "M75.30"});
                table3159.AddRow(new string[] {
                            "surgeryDate",
                            "null"});
#line 29
    testRunner.When("I send a POST request to \"/api/outcome-measures/foto/administer\" with:", ((string)(null)), table3159, "When ");
#line hidden
#line 36
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3160 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3160.AddRow(new string[] {
                            "assessmentId",
                            "string"});
                table3160.AddRow(new string[] {
                            "questions",
                            "array"});
                table3160.AddRow(new string[] {
                            "adaptive",
                            "boolean"});
#line 37
    testRunner.And("the response should contain:", ((string)(null)), table3160, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Submit outcome measure responses")]
        [Xunit.TraitAttribute("FeatureTitle", "Outcome Measurement API Endpoints (FR-032)")]
        [Xunit.TraitAttribute("Description", "Submit outcome measure responses")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "outcomes")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubmitOutcomeMeasureResponses()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "outcomes",
                    "data-collection",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit outcome measure responses", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 46
    testRunner.Given("assessment \"assess-456\" is in progress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3161 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3161.AddRow(new string[] {
                            "responses",
                            "[{\"questionId\": \"q1\", \"value\": 3}]"});
                table3161.AddRow(new string[] {
                            "completed",
                            "true"});
                table3161.AddRow(new string[] {
                            "timeSpent",
                            "480"});
#line 47
    testRunner.When("I send a POST request to \"/api/outcome-measures/assess-456/responses\" with:", ((string)(null)), table3161, "When ");
#line hidden
#line 52
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3162 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3162.AddRow(new string[] {
                            "functionalScore",
                            "number"});
                table3162.AddRow(new string[] {
                            "predictedVisits",
                            "number"});
                table3162.AddRow(new string[] {
                            "riskAdjustment",
                            "object"});
                table3162.AddRow(new string[] {
                            "comparisonData",
                            "object"});
#line 53
    testRunner.And("the response should contain:", ((string)(null)), table3162, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get outcome benchmarks")]
        [Xunit.TraitAttribute("FeatureTitle", "Outcome Measurement API Endpoints (FR-032)")]
        [Xunit.TraitAttribute("Description", "Get outcome benchmarks")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "outcomes")]
        [Xunit.TraitAttribute("Category", "benchmarking")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetOutcomeBenchmarks()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "outcomes",
                    "benchmarking",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get outcome benchmarks", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 63
    testRunner.When("I send a GET request to \"/api/outcome-measures/benchmarks?diagnosis=M75.30&measur" +
                        "e=foto\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3163 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3163.AddRow(new string[] {
                            "nationalAverage",
                            "number"});
                table3163.AddRow(new string[] {
                            "regionalAverage",
                            "number"});
                table3163.AddRow(new string[] {
                            "facilityAverage",
                            "number"});
                table3163.AddRow(new string[] {
                            "improvementTarget",
                            "number"});
                table3163.AddRow(new string[] {
                            "visitBenchmark",
                            "number"});
#line 65
    testRunner.And("the response should contain:", ((string)(null)), table3163, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track patient outcome progress")]
        [Xunit.TraitAttribute("FeatureTitle", "Outcome Measurement API Endpoints (FR-032)")]
        [Xunit.TraitAttribute("Description", "Track patient outcome progress")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "outcomes")]
        [Xunit.TraitAttribute("Category", "tracking")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackPatientOutcomeProgress()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "outcomes",
                    "tracking",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track patient outcome progress", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 76
    testRunner.Given("patient \"patient-123\" has multiple assessments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
    testRunner.When("I send a GET request to \"/api/outcome-measures/patients/patient-123/progress\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3164 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3164.AddRow(new string[] {
                            "assessments",
                            "array"});
                table3164.AddRow(new string[] {
                            "changeScores",
                            "object"});
                table3164.AddRow(new string[] {
                            "trajectoryAnalysis",
                            "object"});
                table3164.AddRow(new string[] {
                            "predictedDischarge",
                            "string"});
                table3164.AddRow(new string[] {
                            "goalsMetPercentage",
                            "number"});
#line 79
    testRunner.And("the response should contain:", ((string)(null)), table3164, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate outcome report for insurance")]
        [Xunit.TraitAttribute("FeatureTitle", "Outcome Measurement API Endpoints (FR-032)")]
        [Xunit.TraitAttribute("Description", "Generate outcome report for insurance")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "outcomes")]
        [Xunit.TraitAttribute("Category", "reporting")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateOutcomeReportForInsurance()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "outcomes",
                    "reporting",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate outcome report for insurance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3165 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3165.AddRow(new string[] {
                            "patientId",
                            "patient-123"});
                table3165.AddRow(new string[] {
                            "measureIds",
                            "[\"foto\", \"nprs\"]"});
                table3165.AddRow(new string[] {
                            "dateRange",
                            "{\"start\": \"2024-01-01\", \"end\": \"2024-03-31\"}"});
                table3165.AddRow(new string[] {
                            "reportType",
                            "insurance-summary"});
                table3165.AddRow(new string[] {
                            "payerId",
                            "bcbs-123"});
#line 90
    testRunner.When("I send a POST request to \"/api/outcome-measures/reports/generate\" with:", ((string)(null)), table3165, "When ");
#line hidden
#line 97
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
    testRunner.And("report should include required metrics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
    testRunner.And("be formatted for payer requirements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complete FOTO assessment administration and outcome tracking for insurance requir" +
            "ements")]
        [Xunit.TraitAttribute("FeatureTitle", "Outcome Measurement API Endpoints (FR-032)")]
        [Xunit.TraitAttribute("Description", "Complete FOTO assessment administration and outcome tracking for insurance requir" +
            "ements")]
        [Xunit.TraitAttribute("Category", "foto-integration")]
        [Xunit.TraitAttribute("Category", "functional-outcomes")]
        [Xunit.TraitAttribute("Category", "insurance-reporting")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompleteFOTOAssessmentAdministrationAndOutcomeTrackingForInsuranceRequirements()
        {
            string[] tagsOfScenario = new string[] {
                    "foto-integration",
                    "functional-outcomes",
                    "insurance-reporting",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete FOTO assessment administration and outcome tracking for insurance requir" +
                    "ements", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 104
    testRunner.Given("I am treating patient \"Robert Davis\" for shoulder impingement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 105
    testRunner.And("insurance requires FOTO outcome reporting for continued authorization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
    testRunner.When("I initiate comprehensive FOTO assessment at intake", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3166 = new TechTalk.SpecFlow.Table(new string[] {
                            "Assessment Element",
                            "Details"});
                table3166.AddRow(new string[] {
                            "Primary diagnosis",
                            "M75.30 - Calcific tendinitis"});
                table3166.AddRow(new string[] {
                            "Body region",
                            "Shoulder"});
                table3166.AddRow(new string[] {
                            "Surgery history",
                            "None"});
                table3166.AddRow(new string[] {
                            "Visit type",
                            "Initial evaluation"});
                table3166.AddRow(new string[] {
                            "Risk factors",
                            "Age 52, diabetic"});
#line 107
    testRunner.And("I gather required assessment information:", ((string)(null)), table3166, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3167 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Category",
                            "Example Questions"});
                table3167.AddRow(new string[] {
                            "Pain level",
                            "0-10 scale with body diagram"});
                table3167.AddRow(new string[] {
                            "Functional activities",
                            "Reaching overhead, lifting"});
                table3167.AddRow(new string[] {
                            "Work impact",
                            "Job-specific task limitations"});
                table3167.AddRow(new string[] {
                            "Quality of life",
                            "Sleep, recreation restrictions"});
#line 114
    testRunner.Then("the FOTO system should present adaptive questions:", ((string)(null)), table3167, "Then ");
#line hidden
#line 120
    testRunner.When("Robert completes the initial assessment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3168 = new TechTalk.SpecFlow.Table(new string[] {
                            "Score Type",
                            "Robert\'s Results",
                            "National Average"});
                table3168.AddRow(new string[] {
                            "Functional Status",
                            "45",
                            "55 for similar dx"});
                table3168.AddRow(new string[] {
                            "Pain level",
                            "7/10",
                            "6/10 for similar"});
                table3168.AddRow(new string[] {
                            "Predicted visits",
                            "12 sessions",
                            "8-14 range"});
                table3168.AddRow(new string[] {
                            "Risk adjustment",
                            "Applied for diabetes",
                            "Standard modifier"});
#line 121
    testRunner.Then("the system should calculate comprehensive scores:", ((string)(null)), table3168, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3169 = new TechTalk.SpecFlow.Table(new string[] {
                            "Tracking Element",
                            "Implementation"});
                table3169.AddRow(new string[] {
                            "Baseline establishment",
                            "Initial scores documented"});
                table3169.AddRow(new string[] {
                            "Progress benchmarks",
                            "Expected improvement milestones"});
                table3169.AddRow(new string[] {
                            "Discharge prediction",
                            "Data-driven visit estimate"});
                table3169.AddRow(new string[] {
                            "Insurance reporting",
                            "Real-time outcome data"});
#line 127
    testRunner.And("outcome tracking should provide:", ((string)(null)), table3169, "And ");
#line hidden
#line 133
    testRunner.When("I conduct reassessment after 6 sessions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3170 = new TechTalk.SpecFlow.Table(new string[] {
                            "Progress Metric",
                            "Results"});
                table3170.AddRow(new string[] {
                            "Functional improvement",
                            "55 (10-point gain)"});
                table3170.AddRow(new string[] {
                            "Pain reduction",
                            "4/10 (3-point improvement)"});
                table3170.AddRow(new string[] {
                            "Goal achievement",
                            "60% of functional targets met"});
                table3170.AddRow(new string[] {
                            "Discharge readiness",
                            "6 more sessions predicted"});
#line 134
    testRunner.Then("progress analysis should show:", ((string)(null)), table3170, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3171 = new TechTalk.SpecFlow.Table(new string[] {
                            "Insurance Requirement",
                            "Evidence Provided"});
                table3171.AddRow(new string[] {
                            "Medical necessity",
                            "Functional limitations documented"});
                table3171.AddRow(new string[] {
                            "Measurable progress",
                            "22% functional score improvement"});
                table3171.AddRow(new string[] {
                            "Skilled intervention",
                            "Complex shoulder rehabilitation"});
                table3171.AddRow(new string[] {
                            "Outcome trajectory",
                            "Meeting expected benchmarks"});
#line 140
    testRunner.And("insurance reporting should demonstrate:", ((string)(null)), table3171, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Administer Canadian Occupational Performance Measure for client-centered evaluati" +
            "on")]
        [Xunit.TraitAttribute("FeatureTitle", "Outcome Measurement API Endpoints (FR-032)")]
        [Xunit.TraitAttribute("Description", "Administer Canadian Occupational Performance Measure for client-centered evaluati" +
            "on")]
        [Xunit.TraitAttribute("Category", "copm-administration")]
        [Xunit.TraitAttribute("Category", "client-centered-outcomes")]
        [Xunit.TraitAttribute("Category", "occupational-performance")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AdministerCanadianOccupationalPerformanceMeasureForClient_CenteredEvaluation()
        {
            string[] tagsOfScenario = new string[] {
                    "copm-administration",
                    "client-centered-outcomes",
                    "occupational-performance",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Administer Canadian Occupational Performance Measure for client-centered evaluati" +
                    "on", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 148
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 149
    testRunner.Given("I am evaluating \"Linda Thompson\" who has multiple sclerosis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 150
    testRunner.And("I need client-centered outcome measurement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
    testRunner.When("I begin comprehensive COPM interview", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3172 = new TechTalk.SpecFlow.Table(new string[] {
                            "COPM Step",
                            "Process"});
                table3172.AddRow(new string[] {
                            "Problem identification",
                            "Daily activities causing difficulty"});
                table3172.AddRow(new string[] {
                            "Importance rating",
                            "1-10 scale for each identified issue"});
                table3172.AddRow(new string[] {
                            "Priority selection",
                            "Choose top 5 most important problems"});
                table3172.AddRow(new string[] {
                            "Performance rating",
                            "Current ability level 1-10"});
                table3172.AddRow(new string[] {
                            "Satisfaction rating",
                            "How satisfied with performance 1-10"});
#line 152
    testRunner.And("I guide Linda through systematic identification process:", ((string)(null)), table3172, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3173 = new TechTalk.SpecFlow.Table(new string[] {
                            "Occupational Issue",
                            "Importance",
                            "Performance",
                            "Satisfaction"});
                table3173.AddRow(new string[] {
                            "Meal preparation",
                            "9",
                            "3",
                            "2"});
                table3173.AddRow(new string[] {
                            "Household cleaning",
                            "8",
                            "4",
                            "3"});
                table3173.AddRow(new string[] {
                            "Driving safety",
                            "10",
                            "2",
                            "1"});
                table3173.AddRow(new string[] {
                            "Work computer tasks",
                            "9",
                            "5",
                            "4"});
                table3173.AddRow(new string[] {
                            "Leisure gardening",
                            "7",
                            "6",
                            "5"});
#line 159
    testRunner.Then("Linda identifies and prioritizes her concerns:", ((string)(null)), table3173, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3174 = new TechTalk.SpecFlow.Table(new string[] {
                            "COMP Score Type",
                            "Calculation",
                            "Linda\'s Scores"});
                table3174.AddRow(new string[] {
                            "Total Performance",
                            "Average of 5 performance ratings",
                            "4.0"});
                table3174.AddRow(new string[] {
                            "Total Satisfaction",
                            "Average of 5 satisfaction ratings",
                            "3.0"});
                table3174.AddRow(new string[] {
                            "Weighted scores",
                            "Importance × performance ratings",
                            "Used for goals"});
#line 166
    testRunner.And("COPM scoring should calculate:", ((string)(null)), table3174, "And ");
#line hidden
#line 171
    testRunner.When("developing intervention priorities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3175 = new TechTalk.SpecFlow.Table(new string[] {
                            "Intervention Planning",
                            "Priority Focus"});
                table3175.AddRow(new string[] {
                            "Goal development",
                            "Driving safety (highest importance)"});
                table3175.AddRow(new string[] {
                            "Service planning",
                            "Meal prep and work tasks"});
                table3175.AddRow(new string[] {
                            "Outcome tracking",
                            "Performance and satisfaction"});
                table3175.AddRow(new string[] {
                            "Client engagement",
                            "Client-chosen meaningful activities"});
#line 172
    testRunner.Then("COMP results should guide:", ((string)(null)), table3175, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3176 = new TechTalk.SpecFlow.Table(new string[] {
                            "Reassessment Element",
                            "Implementation"});
                table3176.AddRow(new string[] {
                            "Same problem areas",
                            "Re-rate performance and satisfaction"});
                table3176.AddRow(new string[] {
                            "Change calculation",
                            "Difference scores from baseline"});
                table3176.AddRow(new string[] {
                            "Clinical significance",
                            "Minimum 2-point change considered meaningful"});
                table3176.AddRow(new string[] {
                            "Client priorities",
                            "Opportunity to adjust focus areas"});
#line 178
    testRunner.And("reassessment protocol should include:", ((string)(null)), table3176, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate comprehensive outcome reports for Medicare and insurance compliance")]
        [Xunit.TraitAttribute("FeatureTitle", "Outcome Measurement API Endpoints (FR-032)")]
        [Xunit.TraitAttribute("Description", "Generate comprehensive outcome reports for Medicare and insurance compliance")]
        [Xunit.TraitAttribute("Category", "insurance-outcome-reporting")]
        [Xunit.TraitAttribute("Category", "medicare-compliance")]
        [Xunit.TraitAttribute("Category", "quality-reporting")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateComprehensiveOutcomeReportsForMedicareAndInsuranceCompliance()
        {
            string[] tagsOfScenario = new string[] {
                    "insurance-outcome-reporting",
                    "medicare-compliance",
                    "quality-reporting",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate comprehensive outcome reports for Medicare and insurance compliance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 186
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 187
    testRunner.Given("I treat multiple Medicare patients requiring outcome reporting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
    testRunner.And("Medicare requires functional outcome documentation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
    testRunner.When("I access the comprehensive outcome dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3177 = new TechTalk.SpecFlow.Table(new string[] {
                            "Outcome Metric",
                            "Current Period",
                            "Previous Period",
                            "Benchmark"});
                table3177.AddRow(new string[] {
                            "Average improvement",
                            "18.5 points",
                            "16.2 points",
                            "15 points"});
                table3177.AddRow(new string[] {
                            "Goal achievement rate",
                            "78%",
                            "72%",
                            "70%"});
                table3177.AddRow(new string[] {
                            "Successful discharge",
                            "82%",
                            "79%",
                            "75%"});
                table3177.AddRow(new string[] {
                            "Readmission rate",
                            "8%",
                            "11%",
                            "12%"});
                table3177.AddRow(new string[] {
                            "Patient satisfaction",
                            "4.6/5",
                            "4.4/5",
                            "4.0/5"});
#line 190
    testRunner.Then("I should see facility-level metrics:", ((string)(null)), table3177, "Then ");
#line hidden
#line 197
    testRunner.When("I analyze outcomes by diagnosis category", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3178 = new TechTalk.SpecFlow.Table(new string[] {
                            "Diagnosis Category",
                            "Avg Visits",
                            "Improvement",
                            "Meeting Threshold"});
                table3178.AddRow(new string[] {
                            "CVA rehabilitation",
                            "24.5",
                            "22 points",
                            "Yes (>20 required)"});
                table3178.AddRow(new string[] {
                            "Total knee replacement",
                            "15.2",
                            "28 points",
                            "Yes (>25 required)"});
                table3178.AddRow(new string[] {
                            "Low back pain",
                            "10.8",
                            "15 points",
                            "No (<18 required)"});
                table3178.AddRow(new string[] {
                            "Shoulder impingement",
                            "12.3",
                            "19 points",
                            "Yes (>15 required)"});
#line 198
    testRunner.Then("detailed breakdowns should show:", ((string)(null)), table3178, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3179 = new TechTalk.SpecFlow.Table(new string[] {
                            "Comparison Type",
                            "Data Source"});
                table3179.AddRow(new string[] {
                            "National benchmarks",
                            "CMS quality reporting database"});
                table3179.AddRow(new string[] {
                            "Regional performance",
                            "State therapy association data"});
                table3179.AddRow(new string[] {
                            "Facility trends",
                            "Historical performance tracking"});
                table3179.AddRow(new string[] {
                            "Payer-specific",
                            "Individual insurance requirements"});
#line 204
    testRunner.And("comparative analysis should include:", ((string)(null)), table3179, "And ");
#line hidden
#line 210
    testRunner.When("generating Medicare reports", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3180 = new TechTalk.SpecFlow.Table(new string[] {
                            "Report Section",
                            "Required Content"});
                table3180.AddRow(new string[] {
                            "Quality measures",
                            "PQRS compliance indicators"});
                table3180.AddRow(new string[] {
                            "Functional outcomes",
                            "Standardized assessment results"});
                table3180.AddRow(new string[] {
                            "Value-based metrics",
                            "Cost per quality point achieved"});
                table3180.AddRow(new string[] {
                            "Patient safety",
                            "Adverse events and prevention"});
#line 211
    testRunner.Then("compliance reporting should include:", ((string)(null)), table3180, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3181 = new TechTalk.SpecFlow.Table(new string[] {
                            "Automation Feature",
                            "Benefit"});
                table3181.AddRow(new string[] {
                            "Scheduled generation",
                            "Monthly/quarterly automatic reports"});
                table3181.AddRow(new string[] {
                            "Compliance alerts",
                            "Flag potential reporting issues"});
                table3181.AddRow(new string[] {
                            "Trend analysis",
                            "Identify performance patterns"});
                table3181.AddRow(new string[] {
                            "Benchmarking",
                            "Compare to relevant standards"});
#line 217
    testRunner.And("automated reporting should provide:", ((string)(null)), table3181, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Implement school-based therapy outcome measurement for educational relevance")]
        [Xunit.TraitAttribute("FeatureTitle", "Outcome Measurement API Endpoints (FR-032)")]
        [Xunit.TraitAttribute("Description", "Implement school-based therapy outcome measurement for educational relevance")]
        [Xunit.TraitAttribute("Category", "pediatric-outcome-measurement")]
        [Xunit.TraitAttribute("Category", "school-based-outcomes")]
        [Xunit.TraitAttribute("Category", "educational-relevance")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ImplementSchool_BasedTherapyOutcomeMeasurementForEducationalRelevance()
        {
            string[] tagsOfScenario = new string[] {
                    "pediatric-outcome-measurement",
                    "school-based-outcomes",
                    "educational-relevance",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Implement school-based therapy outcome measurement for educational relevance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 225
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 226
    testRunner.Given("I work in school setting providing therapy services", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 227
    testRunner.And("I need educationally relevant outcome measures", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 228
    testRunner.When("I assess student \"Carlos Martinez\" using School Function Assessment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3182 = new TechTalk.SpecFlow.Table(new string[] {
                            "School Environment",
                            "Participation Elements",
                            "Carlos\'s Performance"});
                table3182.AddRow(new string[] {
                            "General classroom",
                            "Desk work, group activities",
                            "Partial participation"});
                table3182.AddRow(new string[] {
                            "Cafeteria",
                            "Eating, social interaction",
                            "Full participation"});
                table3182.AddRow(new string[] {
                            "Playground",
                            "Play skills, peer interaction",
                            "Limited participation"});
                table3182.AddRow(new string[] {
                            "Library",
                            "Book selection, computer use",
                            "Full participation"});
                table3182.AddRow(new string[] {
                            "PE/Movement",
                            "Physical activities",
                            "Minimal participation"});
#line 229
    testRunner.Then("I should evaluate participation across educational environments:", ((string)(null)), table3182, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3183 = new TechTalk.SpecFlow.Table(new string[] {
                            "Assessment Dimension",
                            "Evaluation Criteria"});
                table3183.AddRow(new string[] {
                            "Participation level",
                            "Full, partial, minimal, none"});
                table3183.AddRow(new string[] {
                            "Task supports needed",
                            "Adaptations required"});
                table3183.AddRow(new string[] {
                            "Activity performance",
                            "Consistency and quality"});
                table3183.AddRow(new string[] {
                            "Environmental factors",
                            "Settings that support success"});
#line 236
    testRunner.And("assessment should include multiple dimensions:", ((string)(null)), table3183, "And ");
#line hidden
#line 242
    testRunner.When("completing comprehensive SFA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3184 = new TechTalk.SpecFlow.Table(new string[] {
                            "SFA Score Category",
                            "Carlos\'s Results",
                            "Educational Impact"});
                table3184.AddRow(new string[] {
                            "Participation score",
                            "72%",
                            "Moderate limitations"});
                table3184.AddRow(new string[] {
                            "Task supports score",
                            "Level 3 adaptations needed",
                            "Substantial support"});
                table3184.AddRow(new string[] {
                            "Activity performance",
                            "65% consistency",
                            "Inconsistent"});
#line 243
    testRunner.Then("scoring should generate:", ((string)(null)), table3184, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3185 = new TechTalk.SpecFlow.Table(new string[] {
                            "Recommendation Type",
                            "Specific Interventions"});
                table3185.AddRow(new string[] {
                            "IEP goal development",
                            "Measurable educational objectives"});
                table3185.AddRow(new string[] {
                            "Accommodations",
                            "Specific classroom supports"});
                table3185.AddRow(new string[] {
                            "Service minutes",
                            "Educationally necessary services"});
                table3185.AddRow(new string[] {
                            "Environment modifications",
                            "Successful participation strategies"});
#line 248
    testRunner.And("educational recommendations should address:", ((string)(null)), table3185, "And ");
#line hidden
#line 254
    testRunner.When("tracking progress over school year", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3186 = new TechTalk.SpecFlow.Table(new string[] {
                            "Outcome Indicator",
                            "Progress Tracking"});
                table3186.AddRow(new string[] {
                            "Curriculum access",
                            "Increased participation in academics"});
                table3186.AddRow(new string[] {
                            "Social inclusion",
                            "Improved peer interactions"});
                table3186.AddRow(new string[] {
                            "Independence",
                            "Reduced need for adult support"});
                table3186.AddRow(new string[] {
                            "Academic achievement",
                            "Grade-level performance gains"});
#line 255
    testRunner.Then("educational outcome measurement should show:", ((string)(null)), table3186, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                OutcomeMeasurementAPIEndpointsFR_032Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                OutcomeMeasurementAPIEndpointsFR_032Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
