// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SensoryRoomDesignAndEquipmentGuidesFR_040Feature : object, Xunit.IClassFixture<SensoryRoomDesignAndEquipmentGuidesFR_040Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "sensory-rooms.feature"
#line hidden
        
        public SensoryRoomDesignAndEquipmentGuidesFR_040Feature(SensoryRoomDesignAndEquipmentGuidesFR_040Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Sensory Room Design and Equipment Guides (FR-040)", "  As a therapy professional or administrator\n  I want comprehensive sensory room " +
                    "design resources\n  So that I can create effective sensory environments for stude" +
                    "nts", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("I am logged in as a therapist or administrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I have access to sensory room design resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("safety guidelines and standards are available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access sensory room layout templates for different spaces")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Room Design and Equipment Guides (FR-040)")]
        [Xunit.TraitAttribute("Description", "Access sensory room layout templates for different spaces")]
        [Xunit.TraitAttribute("Category", "room-design")]
        [Xunit.TraitAttribute("Category", "layout-templates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessSensoryRoomLayoutTemplatesForDifferentSpaces()
        {
            string[] tagsOfScenario = new string[] {
                    "room-design",
                    "layout-templates",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access sensory room layout templates for different spaces", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.Given("I need to design a sensory room", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
    testRunner.When("I access the room design templates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3187 = new TechTalk.SpecFlow.Table(new string[] {
                            "Room Size",
                            "Square Footage",
                            "Capacity"});
                table3187.AddRow(new string[] {
                            "Small therapy room",
                            "80-120 sq ft",
                            "1-2 students"});
                table3187.AddRow(new string[] {
                            "Medium classroom",
                            "150-250 sq ft",
                            "3-5 students"});
                table3187.AddRow(new string[] {
                            "Large multi-purpose",
                            "300-500 sq ft",
                            "6-10 students"});
                table3187.AddRow(new string[] {
                            "Dedicated sensory",
                            "200-400 sq ft",
                            "4-8 students"});
                table3187.AddRow(new string[] {
                            "Outdoor space",
                            "Variable",
                            "Weather dependent"});
#line 15
    testRunner.Then("I should find templates organized by:", ((string)(null)), table3187, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3188 = new TechTalk.SpecFlow.Table(new string[] {
                            "Design Element",
                            "Content"});
                table3188.AddRow(new string[] {
                            "Floor plan layout",
                            "Optimized traffic flow"});
                table3188.AddRow(new string[] {
                            "Zone organization",
                            "Calming, alerting, organizing"});
                table3188.AddRow(new string[] {
                            "Equipment placement",
                            "Strategic positioning guides"});
                table3188.AddRow(new string[] {
                            "Storage solutions",
                            "Organization and accessibility"});
                table3188.AddRow(new string[] {
                            "Safety considerations",
                            "Exit routes, supervision areas"});
                table3188.AddRow(new string[] {
                            "Lighting design",
                            "Natural and artificial options"});
#line 22
    testRunner.And("each template should include:", ((string)(null)), table3188, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get equipment recommendations with budget optimization")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Room Design and Equipment Guides (FR-040)")]
        [Xunit.TraitAttribute("Description", "Get equipment recommendations with budget optimization")]
        [Xunit.TraitAttribute("Category", "equipment-recommendations")]
        [Xunit.TraitAttribute("Category", "budget-tiers")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetEquipmentRecommendationsWithBudgetOptimization()
        {
            string[] tagsOfScenario = new string[] {
                    "equipment-recommendations",
                    "budget-tiers",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get equipment recommendations with budget optimization", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 33
    testRunner.Given("I have a budget of $5,000 for sensory room setup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
    testRunner.When("I use the equipment recommendation tool", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3189 = new TechTalk.SpecFlow.Table(new string[] {
                            "Budget Tier",
                            "Range",
                            "Priority Items"});
                table3189.AddRow(new string[] {
                            "Essential starter",
                            "$500-1,500",
                            "Basic sensory tools"});
                table3189.AddRow(new string[] {
                            "Standard setup",
                            "$1,500-5,000",
                            "Comprehensive equipment"});
                table3189.AddRow(new string[] {
                            "Premium installation",
                            "$5,000-15,000",
                            "Professional-grade items"});
                table3189.AddRow(new string[] {
                            "Deluxe center",
                            "$15,000+",
                            "Full sensory environment"});
#line 35
    testRunner.Then("I should see recommendations organized by:", ((string)(null)), table3189, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3190 = new TechTalk.SpecFlow.Table(new string[] {
                            "Information Type",
                            "Details"});
                table3190.AddRow(new string[] {
                            "Cost breakdown",
                            "Itemized pricing"});
                table3190.AddRow(new string[] {
                            "Therapeutic value",
                            "Which sensory needs addressed"});
                table3190.AddRow(new string[] {
                            "Age appropriateness",
                            "Recommended age ranges"});
                table3190.AddRow(new string[] {
                            "Durability rating",
                            "Expected lifespan"});
                table3190.AddRow(new string[] {
                            "Maintenance needs",
                            "Cleaning and upkeep requirements"});
                table3190.AddRow(new string[] {
                            "Vendor information",
                            "Where to purchase"});
                table3190.AddRow(new string[] {
                            "Installation notes",
                            "Professional vs DIY setup"});
#line 41
    testRunner.And("each recommendation should include:", ((string)(null)), table3190, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complete comprehensive safety checklist for sensory room")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Room Design and Equipment Guides (FR-040)")]
        [Xunit.TraitAttribute("Description", "Complete comprehensive safety checklist for sensory room")]
        [Xunit.TraitAttribute("Category", "safety-compliance")]
        [Xunit.TraitAttribute("Category", "risk-assessment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompleteComprehensiveSafetyChecklistForSensoryRoom()
        {
            string[] tagsOfScenario = new string[] {
                    "safety-compliance",
                    "risk-assessment",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete comprehensive safety checklist for sensory room", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 53
    testRunner.Given("I am finalizing my sensory room design", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
    testRunner.When("I access the safety compliance module", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3191 = new TechTalk.SpecFlow.Table(new string[] {
                            "Safety Category",
                            "Specific Checks"});
                table3191.AddRow(new string[] {
                            "Structural safety",
                            "Weight limits, mounting points"});
                table3191.AddRow(new string[] {
                            "Electrical safety",
                            "GFCI outlets, cord management"});
                table3191.AddRow(new string[] {
                            "Fire safety",
                            "Exit routes, fire-resistant materials"});
                table3191.AddRow(new string[] {
                            "Age-appropriate use",
                            "Equipment suitable for users"});
                table3191.AddRow(new string[] {
                            "Supervision levels",
                            "Required adult-to-child ratios"});
                table3191.AddRow(new string[] {
                            "Emergency procedures",
                            "Action plans for various scenarios"});
#line 55
    testRunner.Then("I should find checklists covering:", ((string)(null)), table3191, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3192 = new TechTalk.SpecFlow.Table(new string[] {
                            "Output Type",
                            "Purpose"});
                table3192.AddRow(new string[] {
                            "Safety certificate",
                            "Compliance documentation"});
                table3192.AddRow(new string[] {
                            "Risk assessment",
                            "Identify potential hazards"});
                table3192.AddRow(new string[] {
                            "Insurance checklist",
                            "Requirements for coverage"});
                table3192.AddRow(new string[] {
                            "Staff training plan",
                            "Proper equipment use"});
                table3192.AddRow(new string[] {
                            "Emergency protocols",
                            "Quick reference procedures"});
#line 63
    testRunner.And("the system should generate:", ((string)(null)), table3192, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Design therapeutic zones within sensory room")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Room Design and Equipment Guides (FR-040)")]
        [Xunit.TraitAttribute("Description", "Design therapeutic zones within sensory room")]
        [Xunit.TraitAttribute("Category", "sensory-zones")]
        [Xunit.TraitAttribute("Category", "therapeutic-organization")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DesignTherapeuticZonesWithinSensoryRoom()
        {
            string[] tagsOfScenario = new string[] {
                    "sensory-zones",
                    "therapeutic-organization",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Design therapeutic zones within sensory room", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 73
    testRunner.Given("I want to create distinct sensory zones", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
    testRunner.When("I plan the room organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3193 = new TechTalk.SpecFlow.Table(new string[] {
                            "Zone Type",
                            "Purpose",
                            "Equipment Examples"});
                table3193.AddRow(new string[] {
                            "Calming zone",
                            "Self-regulation, wind-down",
                            "Bean bags, dim lighting"});
                table3193.AddRow(new string[] {
                            "Alerting zone",
                            "Energy increase, wake-up",
                            "Vibrating cushions, bright lights"});
                table3193.AddRow(new string[] {
                            "Organizing zone",
                            "Focus, attention",
                            "Fidgets, structured activities"});
                table3193.AddRow(new string[] {
                            "Proprioceptive area",
                            "Heavy work, body awareness",
                            "Weighted items, resistance bands"});
                table3193.AddRow(new string[] {
                            "Vestibular space",
                            "Movement, balance",
                            "Swings, balance equipment"});
                table3193.AddRow(new string[] {
                            "Tactile station",
                            "Touch exploration",
                            "Texture boards, materials"});
#line 75
    testRunner.Then("I should be able to designate areas for:", ((string)(null)), table3193, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3194 = new TechTalk.SpecFlow.Table(new string[] {
                            "Design Element",
                            "Consideration"});
                table3194.AddRow(new string[] {
                            "Visual boundaries",
                            "Clear separation of areas"});
                table3194.AddRow(new string[] {
                            "Traffic flow",
                            "Smooth transitions between zones"});
                table3194.AddRow(new string[] {
                            "Storage integration",
                            "Equipment organization"});
                table3194.AddRow(new string[] {
                            "Flexibility",
                            "Multi-purpose use capability"});
                table3194.AddRow(new string[] {
                            "Supervision sight lines",
                            "Clear visibility for staff"});
#line 83
    testRunner.And("zone design should include:", ((string)(null)), table3194, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access DIY and cost-effective sensory room alternatives")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Room Design and Equipment Guides (FR-040)")]
        [Xunit.TraitAttribute("Description", "Access DIY and cost-effective sensory room alternatives")]
        [Xunit.TraitAttribute("Category", "diy-alternatives")]
        [Xunit.TraitAttribute("Category", "cost-effective")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessDIYAndCost_EffectiveSensoryRoomAlternatives()
        {
            string[] tagsOfScenario = new string[] {
                    "diy-alternatives",
                    "cost-effective",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access DIY and cost-effective sensory room alternatives", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 92
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 93
    testRunner.Given("I have limited budget for sensory equipment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
    testRunner.When("I explore DIY options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3195 = new TechTalk.SpecFlow.Table(new string[] {
                            "DIY Project",
                            "Materials Needed",
                            "Cost Estimate"});
                table3195.AddRow(new string[] {
                            "Sensory bottles",
                            "Plastic bottles, various fillers",
                            "$2-5 each"});
                table3195.AddRow(new string[] {
                            "Texture boards",
                            "Wood, various textures",
                            "$15-25 each"});
                table3195.AddRow(new string[] {
                            "Weighted lap pads",
                            "Fabric, rice/beans",
                            "$10-20 each"});
                table3195.AddRow(new string[] {
                            "Calming tent",
                            "PVC pipes, fabric",
                            "$30-50"});
                table3195.AddRow(new string[] {
                            "Balance beam",
                            "2x4 lumber, padding",
                            "$25-40"});
                table3195.AddRow(new string[] {
                            "Fidget tools",
                            "Various craft materials",
                            "$1-10 each"});
#line 95
    testRunner.Then("I should find instructions for:", ((string)(null)), table3195, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3196 = new TechTalk.SpecFlow.Table(new string[] {
                            "Guide Component",
                            "Content"});
                table3196.AddRow(new string[] {
                            "Step-by-step photos",
                            "Visual construction guide"});
                table3196.AddRow(new string[] {
                            "Safety warnings",
                            "Important precautions"});
                table3196.AddRow(new string[] {
                            "Skill level",
                            "Beginner, intermediate, advanced"});
                table3196.AddRow(new string[] {
                            "Time required",
                            "Estimated completion time"});
                table3196.AddRow(new string[] {
                            "Age recommendations",
                            "Appropriate user ages"});
                table3196.AddRow(new string[] {
                            "Customization tips",
                            "Adaptation suggestions"});
#line 103
    testRunner.And("each DIY guide should include:", ((string)(null)), table3196, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate optimal space utilization for sensory needs")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Room Design and Equipment Guides (FR-040)")]
        [Xunit.TraitAttribute("Description", "Calculate optimal space utilization for sensory needs")]
        [Xunit.TraitAttribute("Category", "space-calculation")]
        [Xunit.TraitAttribute("Category", "optimization")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CalculateOptimalSpaceUtilizationForSensoryNeeds()
        {
            string[] tagsOfScenario = new string[] {
                    "space-calculation",
                    "optimization",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate optimal space utilization for sensory needs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 114
    testRunner.Given("I have a 200 square foot room", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 115
    testRunner.When("I use the space optimization calculator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3197 = new TechTalk.SpecFlow.Table(new string[] {
                            "Space Allocation",
                            "Percentage",
                            "Square Footage",
                            "Purpose"});
                table3197.AddRow(new string[] {
                            "Calming area",
                            "30%",
                            "60 sq ft",
                            "Quiet self-regulation"});
                table3197.AddRow(new string[] {
                            "Active movement",
                            "25%",
                            "50 sq ft",
                            "Gross motor activities"});
                table3197.AddRow(new string[] {
                            "Structured activity",
                            "20%",
                            "40 sq ft",
                            "Focused work"});
                table3197.AddRow(new string[] {
                            "Storage",
                            "15%",
                            "30 sq ft",
                            "Equipment organization"});
                table3197.AddRow(new string[] {
                            "Traffic/transitions",
                            "10%",
                            "20 sq ft",
                            "Movement between zones"});
#line 116
    testRunner.Then("the system should recommend:", ((string)(null)), table3197, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3198 = new TechTalk.SpecFlow.Table(new string[] {
                            "Factor",
                            "Impact on Design"});
                table3198.AddRow(new string[] {
                            "Number of users",
                            "Space per person requirements"});
                table3198.AddRow(new string[] {
                            "Age groups served",
                            "Equipment size and safety"});
                table3198.AddRow(new string[] {
                            "Disability access",
                            "Wheelchair accessibility"});
                table3198.AddRow(new string[] {
                            "Supervision model",
                            "Staff positioning needs"});
                table3198.AddRow(new string[] {
                            "Multi-use function",
                            "Flexibility requirements"});
#line 123
    testRunner.And("the calculator should consider:", ((string)(null)), table3198, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create equipment maintenance and cleaning schedules")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Room Design and Equipment Guides (FR-040)")]
        [Xunit.TraitAttribute("Description", "Create equipment maintenance and cleaning schedules")]
        [Xunit.TraitAttribute("Category", "maintenance-schedules")]
        [Xunit.TraitAttribute("Category", "upkeep-planning")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateEquipmentMaintenanceAndCleaningSchedules()
        {
            string[] tagsOfScenario = new string[] {
                    "maintenance-schedules",
                    "upkeep-planning",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create equipment maintenance and cleaning schedules", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 132
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 133
    testRunner.Given("I have a fully equipped sensory room", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
    testRunner.When("I access maintenance planning tools", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3199 = new TechTalk.SpecFlow.Table(new string[] {
                            "Maintenance Type",
                            "Frequency",
                            "Tasks"});
                table3199.AddRow(new string[] {
                            "Daily cleaning",
                            "End of each day",
                            "Sanitize surfaces, organize"});
                table3199.AddRow(new string[] {
                            "Weekly deep clean",
                            "Once per week",
                            "Wash fabric items, vacuum"});
                table3199.AddRow(new string[] {
                            "Monthly inspection",
                            "Once per month",
                            "Check equipment safety"});
                table3199.AddRow(new string[] {
                            "Quarterly review",
                            "Every 3 months",
                            "Assess wear and replacement"});
                table3199.AddRow(new string[] {
                            "Annual safety audit",
                            "Yearly",
                            "Professional safety inspection"});
#line 135
    testRunner.Then("I should get schedules for:", ((string)(null)), table3199, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3200 = new TechTalk.SpecFlow.Table(new string[] {
                            "Guide Element",
                            "Information"});
                table3200.AddRow(new string[] {
                            "Cleaning products",
                            "Safe, appropriate cleaners"});
                table3200.AddRow(new string[] {
                            "Inspection checklists",
                            "What to look for"});
                table3200.AddRow(new string[] {
                            "Replacement schedules",
                            "When to replace items"});
                table3200.AddRow(new string[] {
                            "Professional services",
                            "When to call experts"});
                table3200.AddRow(new string[] {
                            "Budget planning",
                            "Annual maintenance costs"});
                table3200.AddRow(new string[] {
                            "Documentation forms",
                            "Record keeping requirements"});
#line 142
    testRunner.And("maintenance guides should include:", ((string)(null)), table3200, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Design portable sensory kits for multiple locations")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Room Design and Equipment Guides (FR-040)")]
        [Xunit.TraitAttribute("Description", "Design portable sensory kits for multiple locations")]
        [Xunit.TraitAttribute("Category", "portable-setups")]
        [Xunit.TraitAttribute("Category", "mobile-sensory")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DesignPortableSensoryKitsForMultipleLocations()
        {
            string[] tagsOfScenario = new string[] {
                    "portable-setups",
                    "mobile-sensory",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Design portable sensory kits for multiple locations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 152
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 153
    testRunner.Given("I work in multiple classrooms without dedicated sensory rooms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 154
    testRunner.When("I create portable sensory setups", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3201 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kit Type",
                            "Use Case",
                            "Contents Example"});
                table3201.AddRow(new string[] {
                            "Classroom cart",
                            "Regular classroom use",
                            "Fidgets, noise-reducing tools"});
                table3201.AddRow(new string[] {
                            "Travel therapy bag",
                            "Home visits, multiple sites",
                            "Compact sensory tools"});
                table3201.AddRow(new string[] {
                            "Emergency kit",
                            "Crisis de-escalation",
                            "Immediate calming items"});
                table3201.AddRow(new string[] {
                            "Outdoor kit",
                            "Playground, recess support",
                            "Weather-resistant equipment"});
                table3201.AddRow(new string[] {
                            "Individual kit",
                            "Single student use",
                            "Personalized sensory tools"});
#line 155
    testRunner.Then("I should be able to design kits for:", ((string)(null)), table3201, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3202 = new TechTalk.SpecFlow.Table(new string[] {
                            "Kit Component",
                            "Specifications"});
                table3202.AddRow(new string[] {
                            "Storage container",
                            "Portable, organized sections"});
                table3202.AddRow(new string[] {
                            "Equipment list",
                            "Inventory management"});
                table3202.AddRow(new string[] {
                            "Usage instructions",
                            "Quick setup guides"});
                table3202.AddRow(new string[] {
                            "Safety protocols",
                            "Supervision requirements"});
                table3202.AddRow(new string[] {
                            "Cleaning supplies",
                            "Sanitization between uses"});
                table3202.AddRow(new string[] {
                            "Replacement parts",
                            "Common wear items"});
#line 162
    testRunner.And("each kit should include:", ((string)(null)), table3202, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Modify existing spaces for sensory functionality")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Room Design and Equipment Guides (FR-040)")]
        [Xunit.TraitAttribute("Description", "Modify existing spaces for sensory functionality")]
        [Xunit.TraitAttribute("Category", "environmental-modifications")]
        [Xunit.TraitAttribute("Category", "existing-spaces")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ModifyExistingSpacesForSensoryFunctionality()
        {
            string[] tagsOfScenario = new string[] {
                    "environmental-modifications",
                    "existing-spaces",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Modify existing spaces for sensory functionality", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 172
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 173
    testRunner.Given("I have an existing classroom that needs sensory modifications", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 174
    testRunner.When("I assess the space for sensory adaptations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3203 = new TechTalk.SpecFlow.Table(new string[] {
                            "Modification Type",
                            "Examples",
                            "Estimated Cost"});
                table3203.AddRow(new string[] {
                            "Lighting changes",
                            "Dimmer switches, colored filters",
                            "$50-200"});
                table3203.AddRow(new string[] {
                            "Sound management",
                            "Acoustic panels, white noise",
                            "$100-500"});
                table3203.AddRow(new string[] {
                            "Seating options",
                            "Alternative seating choices",
                            "$200-800"});
                table3203.AddRow(new string[] {
                            "Organizational aids",
                            "Visual schedules, boundary markers",
                            "$50-300"});
                table3203.AddRow(new string[] {
                            "Sensory stations",
                            "Dedicated corners for tools",
                            "$100-600"});
                table3203.AddRow(new string[] {
                            "Movement areas",
                            "Clear spaces for activity",
                            "$0-200"});
#line 175
    testRunner.Then("I should get recommendations for:", ((string)(null)), table3203, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3204 = new TechTalk.SpecFlow.Table(new string[] {
                            "Plan Element",
                            "Details"});
                table3204.AddRow(new string[] {
                            "Before/after photos",
                            "Visual comparison"});
                table3204.AddRow(new string[] {
                            "Implementation steps",
                            "Phase-by-phase changes"});
                table3204.AddRow(new string[] {
                            "Budget breakdown",
                            "Cost analysis"});
                table3204.AddRow(new string[] {
                            "Timeline",
                            "Realistic completion schedule"});
                table3204.AddRow(new string[] {
                            "Staff training",
                            "How to use modifications"});
                table3204.AddRow(new string[] {
                            "Outcome measures",
                            "Success evaluation methods"});
#line 183
    testRunner.And("modification plans should include:", ((string)(null)), table3204, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access funding resources and grant opportunities")]
        [Xunit.TraitAttribute("FeatureTitle", "Sensory Room Design and Equipment Guides (FR-040)")]
        [Xunit.TraitAttribute("Description", "Access funding resources and grant opportunities")]
        [Xunit.TraitAttribute("Category", "grant-resources")]
        [Xunit.TraitAttribute("Category", "funding-assistance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessFundingResourcesAndGrantOpportunities()
        {
            string[] tagsOfScenario = new string[] {
                    "grant-resources",
                    "funding-assistance",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access funding resources and grant opportunities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 193
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 194
    testRunner.Given("I need funding for sensory room development", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 195
    testRunner.When("I access funding resources", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3205 = new TechTalk.SpecFlow.Table(new string[] {
                            "Funding Source",
                            "Application Process",
                            "Typical Awards"});
                table3205.AddRow(new string[] {
                            "Federal grants",
                            "Department of Education",
                            "$5,000-50,000"});
                table3205.AddRow(new string[] {
                            "State programs",
                            "Special education funding",
                            "$1,000-25,000"});
                table3205.AddRow(new string[] {
                            "Local foundations",
                            "Community organization grants",
                            "$500-10,000"});
                table3205.AddRow(new string[] {
                            "Corporate sponsors",
                            "Business community support",
                            "$1,000-15,000"});
                table3205.AddRow(new string[] {
                            "Crowdfunding",
                            "Online fundraising platforms",
                            "$500-5,000"});
                table3205.AddRow(new string[] {
                            "Parent organizations",
                            "PTA/PTO fundraising",
                            "$200-3,000"});
#line 196
    testRunner.Then("I should find information about:", ((string)(null)), table3205, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3206 = new TechTalk.SpecFlow.Table(new string[] {
                            "Resource Type",
                            "Content"});
                table3206.AddRow(new string[] {
                            "Grant database",
                            "Searchable funding opportunities"});
                table3206.AddRow(new string[] {
                            "Application templates",
                            "Pre-written proposal sections"});
                table3206.AddRow(new string[] {
                            "Budget calculators",
                            "Cost estimation tools"});
                table3206.AddRow(new string[] {
                            "Success stories",
                            "Examples of funded projects"});
                table3206.AddRow(new string[] {
                            "Timeline planning",
                            "Application deadline tracking"});
                table3206.AddRow(new string[] {
                            "Writing assistance",
                            "Grant proposal guidance"});
#line 204
    testRunner.And("the system should provide:", ((string)(null)), table3206, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SensoryRoomDesignAndEquipmentGuidesFR_040Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SensoryRoomDesignAndEquipmentGuidesFR_040Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
