// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SessionDocumentationFeature : object, Xunit.IClassFixture<SessionDocumentationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "session-documentation.feature"
#line hidden
        
        public SessionDocumentationFeature(SessionDocumentationFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Session Documentation", "  As a therapist\n  I want to document therapy sessions efficiently\n  So that I ma" +
                    "intain compliance and track student progress", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("I am logged in as therapist \"Sarah Johnson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3207 = new TechTalk.SpecFlow.Table(new string[] {
                        "Student",
                        "Date",
                        "Time",
                        "Location"});
            table3207.AddRow(new string[] {
                        "Emma Wilson",
                        "2024-01-15",
                        "09:00-09:30",
                        "OT Room"});
            table3207.AddRow(new string[] {
                        "Liam Brown",
                        "2024-01-15",
                        "10:00-10:30",
                        "Classroom 12"});
#line 8
    testRunner.And("I have the following scheduled appointments:", ((string)(null)), table3207, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Document a completed session")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Document a completed session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentACompletedSession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Document a completed session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 17
      testRunner.Given("I completed session with \"Emma Wilson\" on \"2024-01-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3208 = new TechTalk.SpecFlow.Table(new string[] {
                            "Section",
                            "Content"});
                table3208.AddRow(new string[] {
                            "Subjective",
                            "Emma reported feeling \"frustrated with writing.\" Teacher noted she avoided writin" +
                                "g tasks this week."});
                table3208.AddRow(new string[] {
                            "Objective",
                            "15 min handwriting practice. Formed 18/26 letters correctly (69%). Required verba" +
                                "l cues for proper pencil grip. Completed 3 sentences with 2 rest breaks."});
                table3208.AddRow(new string[] {
                            "Assessment",
                            "Improvement from last session (65%). Fatigue affects letter formation. Benefits f" +
                                "rom frequent breaks. Making steady progress toward goal."});
                table3208.AddRow(new string[] {
                            "Plan",
                            "Continue letter formation practice. Implement pencil grip reminder card. Teacher " +
                                "to provide 2-min breaks during writing tasks."});
#line 18
      testRunner.When("I document the session with:", ((string)(null)), table3208, "When ");
#line hidden
#line 24
      testRunner.Then("the documentation is saved successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
      testRunner.And("the session status changes to \"completed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
      testRunner.And("the actual duration is recorded as \"30 minutes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
      testRunner.And("an audit log entry is created for \"session_documented\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Auto-save documentation while typing")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Auto-save documentation while typing")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void Auto_SaveDocumentationWhileTyping()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Auto-save documentation while typing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 31
      testRunner.Given("I am documenting session for \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
      testRunner.When("I type in the Subjective field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
      testRunner.Then("the content auto-saves every 30 seconds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
      testRunner.And("I see \"Draft saved\" indicator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
      testRunner.And("I can recover the draft if connection is lost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Documentation time limit enforcement")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Documentation time limit enforcement")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentationTimeLimitEnforcement()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Documentation time limit enforcement", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 39
      testRunner.Given("a session occurred on \"2024-01-08\" (8 days ago)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
      testRunner.When("I attempt to document this session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
      testRunner.Then("I receive warning \"Session older than 7 days\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
      testRunner.And("I must provide late documentation reason", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
      testRunner.And("supervisor notification is triggered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Link session to IEP goals")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Link session to IEP goals")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void LinkSessionToIEPGoals()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Link session to IEP goals", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3209 = new TechTalk.SpecFlow.Table(new string[] {
                            "Goal Number",
                            "Goal Area"});
                table3209.AddRow(new string[] {
                            "OT-1",
                            "Fine Motor"});
                table3209.AddRow(new string[] {
                            "OT-2",
                            "Visual Motor"});
#line 49
      testRunner.Given("\"Emma Wilson\" has goals:", ((string)(null)), table3209, "Given ");
#line hidden
#line 53
      testRunner.When("I document the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
      testRunner.And("I select goals addressed: \"OT-1\", \"OT-2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3210 = new TechTalk.SpecFlow.Table(new string[] {
                            "Goal",
                            "Progress Note"});
                table3210.AddRow(new string[] {
                            "OT-1",
                            "Formed 18/26 letters correctly (69%)"});
                table3210.AddRow(new string[] {
                            "OT-2",
                            "Completed shape copying with 80% accuracy"});
#line 55
      testRunner.And("I add goal-specific notes:", ((string)(null)), table3210, "And ");
#line hidden
#line 59
      testRunner.Then("the goals are linked to the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
      testRunner.And("progress is automatically updated for each goal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Require goal selection")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Require goal selection")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RequireGoalSelection()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Require goal selection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 64
      testRunner.Given("I am documenting a session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
      testRunner.When("I attempt to save without selecting goals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
      testRunner.Then("validation fails with \"At least one goal must be addressed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Document individual session")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Document individual session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentIndividualSession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Document individual session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 72
      testRunner.Given("I have an individual session with \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
      testRunner.When("I document the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
      testRunner.Then("session type is \"individual\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
      testRunner.And("I document one-on-one interventions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Document group session")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Document group session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentGroupSession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Document group session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 78
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3211 = new TechTalk.SpecFlow.Table(new string[] {
                            "Student",
                            "Attendance"});
                table3211.AddRow(new string[] {
                            "Emma Wilson",
                            "Present"});
                table3211.AddRow(new string[] {
                            "Liam Brown",
                            "Present"});
                table3211.AddRow(new string[] {
                            "Noah Davis",
                            "Absent"});
#line 79
      testRunner.Given("I have a group session with:", ((string)(null)), table3211, "Given ");
#line hidden
#line 84
      testRunner.When("I document the group session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
      testRunner.Then("I can add group-level documentation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
      testRunner.And("I can add individual notes for each present student", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
      testRunner.And("absent students are marked appropriately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Document consultation session")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Document consultation session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentConsultationSession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Document consultation session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 91
      testRunner.Given("I have a consultation with \"Emma Wilson\'s\" teacher", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
      testRunner.When("I document the consultation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
      testRunner.Then("session type is \"consultation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3212 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Content"});
                table3212.AddRow(new string[] {
                            "Participants",
                            "Ms. Smith (Teacher), Sarah Johnson (OT)"});
                table3212.AddRow(new string[] {
                            "Topics Discussed",
                            "Classroom accommodations for handwriting"});
                table3212.AddRow(new string[] {
                            "Recommendations",
                            "Slant board, pencil grip, frequent breaks"});
                table3212.AddRow(new string[] {
                            "Follow-up Plan",
                            "Check in 2 weeks"});
#line 94
      testRunner.And("I document:", ((string)(null)), table3212, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Document teletherapy session")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Document teletherapy session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentTeletherapySession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Document teletherapy session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 103
      testRunner.Given("I have a virtual session with \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 104
      testRunner.When("I document the teletherapy session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3213 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3213.AddRow(new string[] {
                            "Platform",
                            "Zoom"});
                table3213.AddRow(new string[] {
                            "Connection Quality",
                            "Good"});
                table3213.AddRow(new string[] {
                            "Parent Present",
                            "Yes"});
                table3213.AddRow(new string[] {
                            "Technical Issues",
                            "None"});
#line 105
      testRunner.Then("I also record:", ((string)(null)), table3213, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Document activities and materials")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Document activities and materials")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentActivitiesAndMaterials()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Document activities and materials", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 115
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 116
      testRunner.Given("I am documenting a session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3214 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Content"});
                table3214.AddRow(new string[] {
                            "Activities",
                            "Handwriting practice, Cutting skills, Sensory break"});
                table3214.AddRow(new string[] {
                            "Materials Used",
                            "Therapy putty, Adapted scissors, Pencil grips"});
                table3214.AddRow(new string[] {
                            "Student Engagement",
                            "4/5 - Required one redirection"});
                table3214.AddRow(new string[] {
                            "Session Productivity",
                            "4/5 - Completed most planned activities"});
#line 117
      testRunner.When("I add session details:", ((string)(null)), table3214, "When ");
#line hidden
#line 123
      testRunner.Then("the details are saved with the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
      testRunner.And("materials can be tracked for inventory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use AI-generated content in session")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Use AI-generated content in session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UseAI_GeneratedContentInSession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use AI-generated content in session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 127
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 128
      testRunner.Given("I used AI-generated worksheet \"Fine Motor Maze #123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 129
      testRunner.When("I document the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 130
      testRunner.And("I rate the content effectiveness as \"4/5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
      testRunner.And("I add feedback \"Student engaged well, slightly too easy\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
      testRunner.Then("the rating is linked to the content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
      testRunner.And("the feedback improves future recommendations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check in for scheduled session")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Check in for scheduled session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CheckInForScheduledSession()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check in for scheduled session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 138
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 139
      testRunner.Given("I have a session scheduled at \"09:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 140
      testRunner.When("I check in at \"09:02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
      testRunner.Then("the actual start time is recorded as \"09:02\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
      testRunner.And("the session status changes to \"in progress\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Mark student as no-show")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Mark student as no-show")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MarkStudentAsNo_Show()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mark student as no-show", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 145
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 146
      testRunner.Given("I have a session scheduled with \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 147
      testRunner.And("the student does not arrive by \"09:10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
      testRunner.When("I mark the session as \"no show\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
      testRunner.Then("the session status changes to \"no show\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 150
      testRunner.And("parent notification is triggered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 151
      testRunner.And("I must document attempted contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Cancel session with notice")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Cancel session with notice")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CancelSessionWithNotice()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cancel session with notice", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 155
      testRunner.Given("I have a session scheduled tomorrow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 156
      testRunner.When("I cancel the session with reason \"Therapist ill\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 157
      testRunner.Then("the session status changes to \"cancelled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
      testRunner.And("parent notification is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
      testRunner.And("makeup session scheduling is triggered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Handle early dismissal")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Handle early dismissal")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void HandleEarlyDismissal()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Handle early dismissal", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 162
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 163
      testRunner.Given("I am in session with \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 164
      testRunner.And("the session started at \"09:00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
      testRunner.When("the student leaves at \"09:20\" due to \"Feeling unwell\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 166
      testRunner.Then("actual end time is recorded as \"09:20\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 167
      testRunner.And("actual duration is \"20 minutes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
      testRunner.And("early dismissal reason is documented", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Billable session documentation")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Billable session documentation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BillableSessionDocumentation()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Billable session documentation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 173
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 174
      testRunner.Given("I completed a billable session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 175
      testRunner.When("I document the session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3215 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Value"});
                table3215.AddRow(new string[] {
                            "CPT Code",
                            "97530"});
                table3215.AddRow(new string[] {
                            "Units",
                            "2"});
                table3215.AddRow(new string[] {
                            "Billable Time",
                            "30 minutes"});
#line 176
      testRunner.Then("billing information is captured:", ((string)(null)), table3215, "Then ");
#line hidden
#line 181
      testRunner.And("the session is marked as \"ready to bill\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Non-billable session documentation")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Non-billable session documentation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void Non_BillableSessionDocumentation()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non-billable session documentation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 184
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 185
      testRunner.Given("I completed a non-billable activity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 186
      testRunner.When("I document as \"IEP meeting attendance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 187
      testRunner.Then("the time is tracked as non-billable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 188
      testRunner.And("it appears in productivity reports", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
      testRunner.But("not in billing queue", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Medicaid-compliant documentation")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Medicaid-compliant documentation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void Medicaid_CompliantDocumentation()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Medicaid-compliant documentation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 194
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 195
      testRunner.Given("the payer requires specific documentation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 196
      testRunner.When("I complete the session note", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3216 = new TechTalk.SpecFlow.Table(new string[] {
                            "Requirement",
                            "Status"});
                table3216.AddRow(new string[] {
                            "Start/End time",
                            "✓"});
                table3216.AddRow(new string[] {
                            "Specific goals",
                            "✓"});
                table3216.AddRow(new string[] {
                            "Measurable progress",
                            "✓"});
                table3216.AddRow(new string[] {
                            "Plan for next visit",
                            "✓"});
                table3216.AddRow(new string[] {
                            "Therapist signature",
                            "✓"});
#line 197
      testRunner.Then("the system validates:", ((string)(null)), table3216, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Lock documentation after signing")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Lock documentation after signing")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void LockDocumentationAfterSigning()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lock documentation after signing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 206
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 207
      testRunner.Given("I have completed documentation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 208
      testRunner.When("I electronically sign the note", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 209
      testRunner.Then("the documentation is locked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
      testRunner.And("no edits are allowed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 211
      testRunner.And("timestamp and signature are recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 212
      testRunner.And("addendums require supervisor approval", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Documentation audit trail")]
        [Xunit.TraitAttribute("FeatureTitle", "Session Documentation")]
        [Xunit.TraitAttribute("Description", "Documentation audit trail")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentationAuditTrail()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Documentation audit trail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 215
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 216
      testRunner.Given("I am viewing a completed session note", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 217
      testRunner.When("I check the audit history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3217 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "User",
                            "Timestamp"});
                table3217.AddRow(new string[] {
                            "Created",
                            "Sarah Johnson",
                            "2024-01-15 11:30:00"});
                table3217.AddRow(new string[] {
                            "Auto-saved",
                            "System",
                            "2024-01-15 11:32:30"});
                table3217.AddRow(new string[] {
                            "Signed",
                            "Sarah Johnson",
                            "2024-01-15 11:45:00"});
#line 218
      testRunner.Then("I see:", ((string)(null)), table3217, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SessionDocumentationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SessionDocumentationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
