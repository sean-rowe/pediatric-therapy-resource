// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AssessmentAndScreeningToolsAPIEndpointsFR_015Feature : object, Xunit.IClassFixture<AssessmentAndScreeningToolsAPIEndpointsFR_015Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "assessment-screening.feature"
#line hidden
        
        public AssessmentAndScreeningToolsAPIEndpointsFR_015Feature(AssessmentAndScreeningToolsAPIEndpointsFR_015Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Assessment and Screening Tools API Endpoints (FR-015)", "  As a therapy professional\n  I want to use standardized assessment tools\n  So th" +
                    "at I can evaluate students accurately and track progress", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List available assessment tools")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "List available assessment tools")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "assessments")]
        [Xunit.TraitAttribute("Category", "catalog")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ListAvailableAssessmentTools()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "assessments",
                    "catalog",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List available assessment tools", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/assessments/tools?discipline=OT&ageRange=3-5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2967 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2967.AddRow(new string[] {
                            "assessmentId",
                            "string"});
                table2967.AddRow(new string[] {
                            "name",
                            "string"});
                table2967.AddRow(new string[] {
                            "abbreviation",
                            "string"});
                table2967.AddRow(new string[] {
                            "publisher",
                            "string"});
                table2967.AddRow(new string[] {
                            "ageRange",
                            "object"});
                table2967.AddRow(new string[] {
                            "domains",
                            "array"});
                table2967.AddRow(new string[] {
                            "normReferenced",
                            "boolean"});
                table2967.AddRow(new string[] {
                            "adminTime",
                            "number"});
                table2967.AddRow(new string[] {
                            "qualifications",
                            "array"});
#line 15
    testRunner.And("the therapy response should contain array of:", ((string)(null)), table2967, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get assessment tool details")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Get assessment tool details")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "assessments")]
        [Xunit.TraitAttribute("Category", "tool-details")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetAssessmentToolDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "assessments",
                    "tool-details",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get assessment tool details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 30
    testRunner.Given("assessment tool \"peabody-2\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
    testRunner.When("I send a GET request to \"/api/assessments/tools/peabody-2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2968 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2968.AddRow(new string[] {
                            "assessmentId",
                            "string"});
                table2968.AddRow(new string[] {
                            "fullName",
                            "string"});
                table2968.AddRow(new string[] {
                            "description",
                            "string"});
                table2968.AddRow(new string[] {
                            "subtests",
                            "array"});
                table2968.AddRow(new string[] {
                            "scoringMethod",
                            "string"});
                table2968.AddRow(new string[] {
                            "interpretiveRanges",
                            "object"});
                table2968.AddRow(new string[] {
                            "trainingRequired",
                            "boolean"});
                table2968.AddRow(new string[] {
                            "digitalVersion",
                            "boolean"});
                table2968.AddRow(new string[] {
                            "priceInfo",
                            "object"});
#line 33
    testRunner.And("the response should contain:", ((string)(null)), table2968, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Start assessment session")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Start assessment session")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "assessments")]
        [Xunit.TraitAttribute("Category", "start-session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void StartAssessmentSession()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "assessments",
                    "start-session",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start assessment session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2969 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2969.AddRow(new string[] {
                            "assessmentId",
                            "peabody-2"});
                table2969.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2969.AddRow(new string[] {
                            "testDate",
                            "2024-01-22"});
                table2969.AddRow(new string[] {
                            "birthDate",
                            "2019-03-15"});
                table2969.AddRow(new string[] {
                            "testForm",
                            "A"});
                table2969.AddRow(new string[] {
                            "reason",
                            "initial-evaluation"});
#line 48
    testRunner.When("I send a POST request to \"/api/assessments/sessions\" with:", ((string)(null)), table2969, "When ");
#line hidden
#line 56
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2970 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2970.AddRow(new string[] {
                            "sessionId",
                            "string"});
                table2970.AddRow(new string[] {
                            "ageCalculation",
                            "object"});
                table2970.AddRow(new string[] {
                            "subtestsReady",
                            "array"});
                table2970.AddRow(new string[] {
                            "basalCeiling",
                            "object"});
#line 57
    testRunner.And("the response should contain:", ((string)(null)), table2970, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record assessment item scores")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Record assessment item scores")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "assessments")]
        [Xunit.TraitAttribute("Category", "score-items")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordAssessmentItemScores()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "assessments",
                    "score-items",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record assessment item scores", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 67
    testRunner.Given("assessment session \"session-456\" is active", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2971 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2971.AddRow(new string[] {
                            "subtest",
                            "gross-motor"});
                table2971.AddRow(new string[] {
                            "items",
                            "[{\"item\": 1, \"score\": 2, \"notes\": \"Independent\"}]"});
                table2971.AddRow(new string[] {
                            "basal",
                            "true"});
                table2971.AddRow(new string[] {
                            "ceiling",
                            "false"});
#line 68
    testRunner.When("I send a POST request to \"/api/assessments/sessions/session-456/items\" with:", ((string)(null)), table2971, "When ");
#line hidden
#line 74
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2972 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2972.AddRow(new string[] {
                            "rawScore",
                            "number"});
                table2972.AddRow(new string[] {
                            "basalMet",
                            "boolean"});
                table2972.AddRow(new string[] {
                            "ceilingMet",
                            "boolean"});
                table2972.AddRow(new string[] {
                            "nextItem",
                            "number"});
                table2972.AddRow(new string[] {
                            "stopRule",
                            "boolean"});
#line 75
    testRunner.And("the response should contain:", ((string)(null)), table2972, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complete assessment and calculate scores")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Complete assessment and calculate scores")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "assessments")]
        [Xunit.TraitAttribute("Category", "calculate-scores")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompleteAssessmentAndCalculateScores()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "assessments",
                    "calculate-scores",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete assessment and calculate scores", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 85
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 86
    testRunner.Given("assessment session \"session-456\" has all scores", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 87
    testRunner.When("I send a POST request to \"/api/assessments/sessions/session-456/complete\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2973 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2973.AddRow(new string[] {
                            "standardScores",
                            "object"});
                table2973.AddRow(new string[] {
                            "percentileRanks",
                            "object"});
                table2973.AddRow(new string[] {
                            "ageEquivalents",
                            "object"});
                table2973.AddRow(new string[] {
                            "confidenceIntervals",
                            "object"});
                table2973.AddRow(new string[] {
                            "interpretiveSummary",
                            "string"});
                table2973.AddRow(new string[] {
                            "reportUrl",
                            "string"});
#line 89
    testRunner.And("the response should contain:", ((string)(null)), table2973, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get quick screening tools")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Get quick screening tools")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "assessments")]
        [Xunit.TraitAttribute("Category", "screening")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetQuickScreeningTools()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "assessments",
                    "screening",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get quick screening tools", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 101
    testRunner.When("I send a GET request to \"/api/assessments/quick-screens?area=articulation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2974 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2974.AddRow(new string[] {
                            "screenId",
                            "string"});
                table2974.AddRow(new string[] {
                            "name",
                            "string"});
                table2974.AddRow(new string[] {
                            "duration",
                            "number"});
                table2974.AddRow(new string[] {
                            "ageRange",
                            "object"});
                table2974.AddRow(new string[] {
                            "cutoffScores",
                            "object"});
                table2974.AddRow(new string[] {
                            "followUpRecs",
                            "array"});
#line 103
    testRunner.And("the therapy response should contain array of:", ((string)(null)), table2974, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Administer quick screener")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Administer quick screener")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "assessments")]
        [Xunit.TraitAttribute("Category", "quick-screen")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AdministerQuickScreener()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "assessments",
                    "quick-screen",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Administer quick screener", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2975 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2975.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2975.AddRow(new string[] {
                            "responses",
                            "{\"p\": \"correct\", \"b\": \"substitution\"}"});
                table2975.AddRow(new string[] {
                            "duration",
                            "5"});
                table2975.AddRow(new string[] {
                            "notes",
                            "Cooperative, good attention"});
#line 115
    testRunner.When("I send a POST request to \"/api/assessments/quick-screens/artic-screen/administer\"" +
                        " with:", ((string)(null)), table2975, "When ");
#line hidden
#line 121
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2976 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2976.AddRow(new string[] {
                            "passFailStatus",
                            "string"});
                table2976.AddRow(new string[] {
                            "flaggedAreas",
                            "array"});
                table2976.AddRow(new string[] {
                            "recommendations",
                            "array"});
                table2976.AddRow(new string[] {
                            "referralNeeded",
                            "boolean"});
#line 122
    testRunner.And("the response should contain:", ((string)(null)), table2976, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get student assessment history")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Get student assessment history")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "assessments")]
        [Xunit.TraitAttribute("Category", "history")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetStudentAssessmentHistory()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "assessments",
                    "history",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get student assessment history", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 131
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 132
    testRunner.Given("student \"student-123\" has assessment history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 133
    testRunner.When("I send a GET request to \"/api/assessments/students/student-123/history\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2977 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2977.AddRow(new string[] {
                            "assessmentName",
                            "string"});
                table2977.AddRow(new string[] {
                            "testDate",
                            "string"});
                table2977.AddRow(new string[] {
                            "scores",
                            "object"});
                table2977.AddRow(new string[] {
                            "evaluator",
                            "string"});
                table2977.AddRow(new string[] {
                            "reportUrl",
                            "string"});
                table2977.AddRow(new string[] {
                            "nextDueDate",
                            "string"});
#line 135
    testRunner.And("the therapy response should contain array of:", ((string)(null)), table2977, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compare assessment results over time")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Compare assessment results over time")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "assessments")]
        [Xunit.TraitAttribute("Category", "comparison")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompareAssessmentResultsOverTime()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "assessments",
                    "comparison",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare assessment results over time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 146
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2978 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table2978.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table2978.AddRow(new string[] {
                            "assessmentIds",
                            "[\"session-456\", \"session-789\"]"});
                table2978.AddRow(new string[] {
                            "domains",
                            "[\"gross-motor\", \"fine-motor\"]"});
#line 147
    testRunner.When("I send a POST request to \"/api/assessments/compare\" with:", ((string)(null)), table2978, "When ");
#line hidden
#line 152
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2979 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2979.AddRow(new string[] {
                            "progressCharts",
                            "array"});
                table2979.AddRow(new string[] {
                            "changeScores",
                            "object"});
                table2979.AddRow(new string[] {
                            "significance",
                            "object"});
                table2979.AddRow(new string[] {
                            "interpretation",
                            "string"});
#line 153
    testRunner.And("the response should contain:", ((string)(null)), table2979, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get normative data for assessment")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Get normative data for assessment")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "assessments")]
        [Xunit.TraitAttribute("Category", "normative-data")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetNormativeDataForAssessment()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "assessments",
                    "normative-data",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get normative data for assessment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 162
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 163
    testRunner.When("I send a GET request to \"/api/assessments/norms/peabody-2?age=48&gender=M\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2980 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table2980.AddRow(new string[] {
                            "normTables",
                            "object"});
                table2980.AddRow(new string[] {
                            "meanScores",
                            "object"});
                table2980.AddRow(new string[] {
                            "standardDev",
                            "object"});
                table2980.AddRow(new string[] {
                            "percentileBands",
                            "array"});
#line 165
    testRunner.And("the response should contain:", ((string)(null)), table2980, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Conduct comprehensive 5-minute articulation screener for initial triage")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Conduct comprehensive 5-minute articulation screener for initial triage")]
        [Xunit.TraitAttribute("Category", "quick-screening")]
        [Xunit.TraitAttribute("Category", "articulation-screener")]
        [Xunit.TraitAttribute("Category", "triage-assessment")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConductComprehensive5_MinuteArticulationScreenerForInitialTriage()
        {
            string[] tagsOfScenario = new string[] {
                    "quick-screening",
                    "articulation-screener",
                    "triage-assessment",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Conduct comprehensive 5-minute articulation screener for initial triage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 174
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 175
    testRunner.Given("I need to screen student \"Kevin Martinez\" for articulation concerns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 176
    testRunner.And("I have limited time during walk-in screening day", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
    testRunner.When("I select the \"Quick Articulation Screener\" from assessment tools", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2981 = new TechTalk.SpecFlow.Table(new string[] {
                            "Sound Category",
                            "Test Words",
                            "Kevin\'s Productions",
                            "Scoring"});
                table2981.AddRow(new string[] {
                            "Initial /p/",
                            "pig, pencil",
                            "[pig], [pensil]",
                            "1 correct, 1 error"});
                table2981.AddRow(new string[] {
                            "Final /p/",
                            "cup, jump",
                            "[kʌp], [dʌmp]",
                            "2 correct"});
                table2981.AddRow(new string[] {
                            "Initial /b/",
                            "ball, book",
                            "[bɔl], [bʊk]",
                            "2 correct"});
                table2981.AddRow(new string[] {
                            "Initial /m/",
                            "mouse, milk",
                            "[maʊs], [mɪlk]",
                            "2 correct"});
                table2981.AddRow(new string[] {
                            "Initial /t/",
                            "table, top",
                            "[teɪbl], [tɑp]",
                            "2 correct"});
                table2981.AddRow(new string[] {
                            "Final /t/",
                            "cat, bat",
                            "[kæ], [bæ]",
                            "2 errors (omissions)"});
                table2981.AddRow(new string[] {
                            "Initial /d/",
                            "dog, door",
                            "[dɔg], [dor]",
                            "2 correct"});
                table2981.AddRow(new string[] {
                            "Final /d/",
                            "bed, road",
                            "[bɛ], [ro]",
                            "2 errors (omissions)"});
#line 178
    testRunner.And("I begin the systematic screening protocol:", ((string)(null)), table2981, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2982 = new TechTalk.SpecFlow.Table(new string[] {
                            "Scoring Method",
                            "Input Options",
                            "Speed Requirement"});
                table2982.AddRow(new string[] {
                            "Correct",
                            "Tap checkmark or press \'1\'",
                            "< 2 seconds"});
                table2982.AddRow(new string[] {
                            "Substitution",
                            "Tap \'S\' + type replacement",
                            "< 4 seconds"});
                table2982.AddRow(new string[] {
                            "Omission",
                            "Tap \'O\' or press \'3\'",
                            "< 2 seconds"});
                table2982.AddRow(new string[] {
                            "Distortion",
                            "Tap \'D\' or press \'2\'",
                            "< 2 seconds"});
#line 188
    testRunner.Then("I should be able to rapidly score each production:", ((string)(null)), table2982, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2983 = new TechTalk.SpecFlow.Table(new string[] {
                            "Results Category",
                            "Calculation",
                            "Kevin\'s Results"});
                table2983.AddRow(new string[] {
                            "Overall accuracy",
                            "Correct sounds / Total sounds",
                            "68% (17/25)"});
                table2983.AddRow(new string[] {
                            "Error patterns",
                            "Most frequent error types",
                            "Final consonant deletion"});
                table2983.AddRow(new string[] {
                            "Age comparison",
                            "Performance vs. age expectations",
                            "Below age level"});
                table2983.AddRow(new string[] {
                            "Referral decision",
                            "Based on cutoff scores",
                            "Recommend full eval"});
#line 194
    testRunner.And("the screener should automatically calculate results:", ((string)(null)), table2983, "And ");
#line hidden
#line 200
    testRunner.When("screening is complete in under 5 minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2984 = new TechTalk.SpecFlow.Table(new string[] {
                            "Result Component",
                            "Details"});
                table2984.AddRow(new string[] {
                            "Summary score",
                            "68% accuracy (below criterion)"});
                table2984.AddRow(new string[] {
                            "Error analysis",
                            "Consistent final consonant deletion"});
                table2984.AddRow(new string[] {
                            "Recommendations",
                            "Full articulation assessment needed"});
                table2984.AddRow(new string[] {
                            "Parent handout",
                            "\"What is an articulation evaluation?\""});
                table2984.AddRow(new string[] {
                            "Next steps",
                            "Schedule comprehensive evaluation"});
#line 201
    testRunner.Then("comprehensive results should include:", ((string)(null)), table2984, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Administer comprehensive norm-referenced motor assessment with accurate scoring")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Administer comprehensive norm-referenced motor assessment with accurate scoring")]
        [Xunit.TraitAttribute("Category", "norm-referenced-assessment")]
        [Xunit.TraitAttribute("Category", "peabody-motor")]
        [Xunit.TraitAttribute("Category", "comprehensive-evaluation")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AdministerComprehensiveNorm_ReferencedMotorAssessmentWithAccurateScoring()
        {
            string[] tagsOfScenario = new string[] {
                    "norm-referenced-assessment",
                    "peabody-motor",
                    "comprehensive-evaluation",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Administer comprehensive norm-referenced motor assessment with accurate scoring", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 210
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 211
    testRunner.Given("I am conducting a formal evaluation for student \"Isabella Thompson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 212
    testRunner.And("I am using the \"Peabody Developmental Motor Scales (PDMS-2)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 213
    testRunner.When("I begin the systematic assessment protocol", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2985 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setup Element",
                            "Requirement"});
                table2985.AddRow(new string[] {
                            "Age calculation",
                            "4 years, 7 months exactly"});
                table2985.AddRow(new string[] {
                            "Subtest selection",
                            "Reflexes, Stationary, Locomotion, Object Manipulation"});
                table2985.AddRow(new string[] {
                            "Materials check",
                            "All required items present"});
                table2985.AddRow(new string[] {
                            "Environment",
                            "Quiet space, adequate lighting"});
                table2985.AddRow(new string[] {
                            "Timing tools",
                            "Stopwatch for timed items"});
#line 214
    testRunner.And("I prepare for administration:", ((string)(null)), table2985, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2986 = new TechTalk.SpecFlow.Table(new string[] {
                            "Subtest",
                            "Starting Point",
                            "Basal/Ceiling Rules"});
                table2986.AddRow(new string[] {
                            "Reflexes",
                            "Age-appropriate",
                            "3 consecutive pass/fail"});
                table2986.AddRow(new string[] {
                            "Stationary",
                            "Item 1",
                            "3 consecutive pass/fail"});
                table2986.AddRow(new string[] {
                            "Locomotion",
                            "Age-appropriate",
                            "3 consecutive pass/fail"});
                table2986.AddRow(new string[] {
                            "Object Manip",
                            "Age-appropriate",
                            "3 consecutive pass/fail"});
#line 221
    testRunner.Then("I should systematically administer each subtest:", ((string)(null)), table2986, "Then ");
#line hidden
#line 227
    testRunner.When("administering individual items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2987 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item Type",
                            "Scoring Criteria",
                            "Examples"});
                table2987.AddRow(new string[] {
                            "Balance beam",
                            "Steps without falling off",
                            "3/5 steps = partial"});
                table2987.AddRow(new string[] {
                            "Ball catch",
                            "Secure grasp with two hands",
                            "2/3 trials = pass"});
                table2987.AddRow(new string[] {
                            "Stair climbing",
                            "Alternating feet pattern",
                            "Observed = pass"});
                table2987.AddRow(new string[] {
                            "Block stacking",
                            "8 blocks without falling",
                            "6 blocks = fail"});
#line 228
    testRunner.Then("I should score each item systematically:", ((string)(null)), table2987, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2988 = new TechTalk.SpecFlow.Table(new string[] {
                            "Data Element",
                            "Recording Method"});
                table2988.AddRow(new string[] {
                            "Raw scores",
                            "Sum correct per subtest"});
                table2988.AddRow(new string[] {
                            "Observations",
                            "Qualitative notes on performance"});
                table2988.AddRow(new string[] {
                            "Behavior notes",
                            "Attention, cooperation, fatigue"});
                table2988.AddRow(new string[] {
                            "Environmental factors",
                            "Distractions, accommodations"});
#line 234
    testRunner.And("data collection should include:", ((string)(null)), table2988, "And ");
#line hidden
#line 240
    testRunner.When("all subtests are completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2989 = new TechTalk.SpecFlow.Table(new string[] {
                            "Score Type",
                            "Calculation",
                            "Isabella\'s Results"});
                table2989.AddRow(new string[] {
                            "Raw scores",
                            "Sum of item scores",
                            "R: 12, S: 18, L: 15, OM: 22"});
                table2989.AddRow(new string[] {
                            "Standard scores",
                            "Based on age norms",
                            "85, 92, 88, 95"});
                table2989.AddRow(new string[] {
                            "Percentile ranks",
                            "Compared to age peers",
                            "16th, 30th, 21st, 37th"});
                table2989.AddRow(new string[] {
                            "Motor quotients",
                            "Composite scores",
                            "GMQ: 87, FMQ: 93, TMQ: 90"});
                table2989.AddRow(new string[] {
                            "Confidence intervals",
                            "90% confidence bands",
                            "TMQ: 85-95"});
#line 241
    testRunner.Then("scoring should generate:", ((string)(null)), table2989, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2990 = new TechTalk.SpecFlow.Table(new string[] {
                            "Interpretation Element",
                            "Content"});
                table2990.AddRow(new string[] {
                            "Performance level",
                            "Average to low average range"});
                table2990.AddRow(new string[] {
                            "Relative strengths",
                            "Fine motor > gross motor"});
                table2990.AddRow(new string[] {
                            "Areas of concern",
                            "Balance and bilateral coordination"});
                table2990.AddRow(new string[] {
                            "Recommendations",
                            "OT services, sensory assessment"});
#line 248
    testRunner.And("interpretation should provide:", ((string)(null)), table2990, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Implement systematic curriculum-based measurement for reading fluency monitoring")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Implement systematic curriculum-based measurement for reading fluency monitoring")]
        [Xunit.TraitAttribute("Category", "curriculum-based-measurement")]
        [Xunit.TraitAttribute("Category", "progress-monitoring")]
        [Xunit.TraitAttribute("Category", "reading-fluency")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ImplementSystematicCurriculum_BasedMeasurementForReadingFluencyMonitoring()
        {
            string[] tagsOfScenario = new string[] {
                    "curriculum-based-measurement",
                    "progress-monitoring",
                    "reading-fluency",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Implement systematic curriculum-based measurement for reading fluency monitoring", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 256
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 257
    testRunner.Given("I monitor weekly reading progress for student \"Marcus Johnson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 258
    testRunner.And("Marcus is in 3rd grade receiving reading intervention", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 259
    testRunner.When("I conduct systematic CBM reading probe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2991 = new TechTalk.SpecFlow.Table(new string[] {
                            "Passage Element",
                            "Specification"});
                table2991.AddRow(new string[] {
                            "Grade level",
                            "3rd grade benchmark passage"});
                table2991.AddRow(new string[] {
                            "Word count",
                            "200+ words"});
                table2991.AddRow(new string[] {
                            "Complexity",
                            "Appropriate for progress monitoring"});
                table2991.AddRow(new string[] {
                            "Font size",
                            "12-point, clear formatting"});
                table2991.AddRow(new string[] {
                            "Timing",
                            "1-minute probe"});
#line 260
    testRunner.And("I prepare grade-level passage:", ((string)(null)), table2991, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2992 = new TechTalk.SpecFlow.Table(new string[] {
                            "Administration Element",
                            "Procedure"});
                table2992.AddRow(new string[] {
                            "Directions",
                            "\"Read as many words as you can\""});
                table2992.AddRow(new string[] {
                            "Timing",
                            "Start timer when student begins"});
                table2992.AddRow(new string[] {
                            "Error marking",
                            "Mark errors without disrupting"});
                table2992.AddRow(new string[] {
                            "Encouragement",
                            "Neutral, supportive prompts"});
#line 267
    testRunner.Then("I should implement standardized administration:", ((string)(null)), table2992, "Then ");
#line hidden
#line 273
    testRunner.When("Marcus reads the passage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2993 = new TechTalk.SpecFlow.Table(new string[] {
                            "Performance Metric",
                            "Measurement",
                            "Marcus\'s Performance"});
                table2993.AddRow(new string[] {
                            "Words read",
                            "Total words attempted",
                            "105 words"});
                table2993.AddRow(new string[] {
                            "Errors made",
                            "Substitutions, omissions, additions",
                            "8 errors"});
                table2993.AddRow(new string[] {
                            "Words correct/minute",
                            "(Total words - errors) per minute",
                            "97 WCPM"});
                table2993.AddRow(new string[] {
                            "Accuracy percentage",
                            "(Correct words / total words) × 100",
                            "92.4%"});
                table2993.AddRow(new string[] {
                            "Error analysis",
                            "Types of errors made",
                            "Mostly multisyllabic"});
#line 274
    testRunner.Then("I should track performance systematically:", ((string)(null)), table2993, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2994 = new TechTalk.SpecFlow.Table(new string[] {
                            "Progress Element",
                            "Data Visualization"});
                table2994.AddRow(new string[] {
                            "Weekly performance",
                            "Line graph with data points"});
                table2994.AddRow(new string[] {
                            "Trend analysis",
                            "Slope of improvement"});
                table2994.AddRow(new string[] {
                            "Goal comparison",
                            "Target vs. actual performance"});
                table2994.AddRow(new string[] {
                            "Benchmark status",
                            "Above/below grade level"});
#line 281
    testRunner.And("progress tracking should show:", ((string)(null)), table2994, "And ");
#line hidden
#line 287
    testRunner.When("analyzing 8 weeks of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2995 = new TechTalk.SpecFlow.Table(new string[] {
                            "Decision Factor",
                            "Analysis"});
                table2995.AddRow(new string[] {
                            "Rate of improvement",
                            "2.1 words per week gain"});
                table2995.AddRow(new string[] {
                            "Goal attainment",
                            "Will meet annual goal if maintained"});
                table2995.AddRow(new string[] {
                            "Instructional changes",
                            "Continue current intervention"});
                table2995.AddRow(new string[] {
                            "Frequency adjustments",
                            "Maintain 3x weekly sessions"});
#line 288
    testRunner.Then("decision-making should consider:", ((string)(null)), table2995, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complete comprehensive developmental checklist assessment for preschooler")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Complete comprehensive developmental checklist assessment for preschooler")]
        [Xunit.TraitAttribute("Category", "developmental-checklist")]
        [Xunit.TraitAttribute("Category", "early-childhood")]
        [Xunit.TraitAttribute("Category", "milestone-assessment")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompleteComprehensiveDevelopmentalChecklistAssessmentForPreschooler()
        {
            string[] tagsOfScenario = new string[] {
                    "developmental-checklist",
                    "early-childhood",
                    "milestone-assessment",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete comprehensive developmental checklist assessment for preschooler", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 296
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 297
    testRunner.Given("I am evaluating 3-year-old \"Zara Patel\" for early intervention services", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 298
    testRunner.And("I am using the \"Ages and Stages Developmental Checklist\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 299
    testRunner.When("I conduct systematic developmental assessment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2996 = new TechTalk.SpecFlow.Table(new string[] {
                            "Domain",
                            "Sample Skills",
                            "Zara\'s Performance"});
                table2996.AddRow(new string[] {
                            "Gross Motor",
                            "Runs smoothly, jumps with feet together",
                            "Emerging"});
                table2996.AddRow(new string[] {
                            "Fine Motor",
                            "Copies circle, strings large beads",
                            "Achieved"});
                table2996.AddRow(new string[] {
                            "Communication",
                            "Uses 4-5 word sentences",
                            "Not yet achieved"});
                table2996.AddRow(new string[] {
                            "Problem Solving",
                            "Completes 3-4 piece puzzles",
                            "Achieved"});
                table2996.AddRow(new string[] {
                            "Personal-Social",
                            "Plays cooperatively with others",
                            "Emerging"});
#line 300
    testRunner.Then("I should evaluate all developmental domains:", ((string)(null)), table2996, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2997 = new TechTalk.SpecFlow.Table(new string[] {
                            "Scoring Level",
                            "Criteria",
                            "Implementation"});
                table2997.AddRow(new string[] {
                            "Not yet",
                            "Skill not demonstrated",
                            "0 points"});
                table2997.AddRow(new string[] {
                            "Emerging",
                            "Sometimes demonstrates skill",
                            "5 points"});
                table2997.AddRow(new string[] {
                            "Achieved",
                            "Consistently demonstrates skill",
                            "10 points"});
                table2997.AddRow(new string[] {
                            "Advanced",
                            "Exceeds age expectations",
                            "15 points"});
#line 307
    testRunner.And("scoring should reflect developmental progression:", ((string)(null)), table2997, "And ");
#line hidden
#line 313
    testRunner.When("completing domain-by-domain assessment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2998 = new TechTalk.SpecFlow.Table(new string[] {
                            "Documentation Element",
                            "Content"});
                table2998.AddRow(new string[] {
                            "Skill observations",
                            "Specific behaviors witnessed"});
                table2998.AddRow(new string[] {
                            "Context notes",
                            "Where/when skills demonstrated"});
                table2998.AddRow(new string[] {
                            "Prompting needed",
                            "Level of support required"});
                table2998.AddRow(new string[] {
                            "Quality indicators",
                            "How well skill performed"});
#line 314
    testRunner.Then("I should document:", ((string)(null)), table2998, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2999 = new TechTalk.SpecFlow.Table(new string[] {
                            "Analysis Component",
                            "Output",
                            "Zara\'s Results"});
                table2999.AddRow(new string[] {
                            "Domain percentages",
                            "Percentage skills mastered",
                            "GM: 60%, FM: 85%, C: 40%"});
                table2999.AddRow(new string[] {
                            "Overall development",
                            "Composite developmental level",
                            "Mild delays"});
                table2999.AddRow(new string[] {
                            "Priority areas",
                            "Domains needing intervention",
                            "Communication, Gross Motor"});
                table2999.AddRow(new string[] {
                            "Strengths",
                            "Areas of typical development",
                            "Fine Motor, Problem Solving"});
#line 320
    testRunner.And("checklist analysis should generate:", ((string)(null)), table2999, "And ");
#line hidden
#line 326
    testRunner.When("assessment is complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3000 = new TechTalk.SpecFlow.Table(new string[] {
                            "Recommendation Type",
                            "Specific Actions"});
                table3000.AddRow(new string[] {
                            "Service eligibility",
                            "Qualifies for speech therapy"});
                table3000.AddRow(new string[] {
                            "Goal development",
                            "Focus on language expansion"});
                table3000.AddRow(new string[] {
                            "Family education",
                            "Home activities for communication"});
                table3000.AddRow(new string[] {
                            "Re-evaluation",
                            "6-month progress review"});
#line 327
    testRunner.Then("recommendations should include:", ((string)(null)), table3000, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Conduct comprehensive school-based functional assessment")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Conduct comprehensive school-based functional assessment")]
        [Xunit.TraitAttribute("Category", "functional-assessment")]
        [Xunit.TraitAttribute("Category", "school-based")]
        [Xunit.TraitAttribute("Category", "participation-assessment")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConductComprehensiveSchool_BasedFunctionalAssessment()
        {
            string[] tagsOfScenario = new string[] {
                    "functional-assessment",
                    "school-based",
                    "participation-assessment",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Conduct comprehensive school-based functional assessment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 335
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 336
    testRunner.Given("I am evaluating student \"David Chen\" for school-based therapy services", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 337
    testRunner.And("I need to assess his participation in educational activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 338
    testRunner.When("I implement functional assessment across school environments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3001 = new TechTalk.SpecFlow.Table(new string[] {
                            "School Environment",
                            "Activities Assessed",
                            "Participation Level"});
                table3001.AddRow(new string[] {
                            "General classroom",
                            "Desk work, group activities",
                            "Moderate support needed"});
                table3001.AddRow(new string[] {
                            "Cafeteria",
                            "Eating, social interaction",
                            "Minimal support"});
                table3001.AddRow(new string[] {
                            "Playground",
                            "Play skills, peer interaction",
                            "Substantial support"});
                table3001.AddRow(new string[] {
                            "Library",
                            "Book selection, computer use",
                            "Independent"});
                table3001.AddRow(new string[] {
                            "Physical education",
                            "Sports, fitness activities",
                            "Intensive support"});
#line 339
    testRunner.Then("I should evaluate participation in:", ((string)(null)), table3001, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3002 = new TechTalk.SpecFlow.Table(new string[] {
                            "Assessment Factor",
                            "Evaluation Method"});
                table3002.AddRow(new string[] {
                            "Task demands",
                            "Cognitive, physical, social requirements"});
                table3002.AddRow(new string[] {
                            "Environmental supports",
                            "Available accommodations"});
                table3002.AddRow(new string[] {
                            "Peer interactions",
                            "Social dynamics and relationships"});
                table3002.AddRow(new string[] {
                            "Teacher expectations",
                            "Academic and behavioral standards"});
#line 346
    testRunner.And("assessment should consider:", ((string)(null)), table3002, "And ");
#line hidden
#line 352
    testRunner.When("documenting functional performance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3003 = new TechTalk.SpecFlow.Table(new string[] {
                            "Performance Area",
                            "Rating Scale",
                            "David\'s Ratings"});
                table3003.AddRow(new string[] {
                            "Task initiation",
                            "1-5 (independent to dependent)",
                            "3 (moderate support)"});
                table3003.AddRow(new string[] {
                            "Task completion",
                            "1-5 (consistent to inconsistent)",
                            "2 (substantial support)"});
                table3003.AddRow(new string[] {
                            "Social participation",
                            "1-5 (engaged to withdrawn)",
                            "2 (limited engagement)"});
                table3003.AddRow(new string[] {
                            "Problem-solving",
                            "1-5 (flexible to rigid)",
                            "3 (some flexibility)"});
#line 353
    testRunner.Then("I should rate:", ((string)(null)), table3003, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3004 = new TechTalk.SpecFlow.Table(new string[] {
                            "Analysis Component",
                            "Findings"});
                table3004.AddRow(new string[] {
                            "Performance patterns",
                            "Stronger in structured tasks"});
                table3004.AddRow(new string[] {
                            "Support needs",
                            "Benefits from visual schedules"});
                table3004.AddRow(new string[] {
                            "Environmental factors",
                            "Large groups challenging"});
                table3004.AddRow(new string[] {
                            "Skill priorities",
                            "Social communication skills"});
#line 359
    testRunner.And("functional analysis should identify:", ((string)(null)), table3004, "And ");
#line hidden
#line 365
    testRunner.When("assessment is complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3005 = new TechTalk.SpecFlow.Table(new string[] {
                            "Recommendation Category",
                            "Specific Strategies"});
                table3005.AddRow(new string[] {
                            "Environmental modifications",
                            "Reduce noise, provide visual supports"});
                table3005.AddRow(new string[] {
                            "Task accommodations",
                            "Break tasks into smaller steps"});
                table3005.AddRow(new string[] {
                            "Social supports",
                            "Facilitate peer interactions"});
                table3005.AddRow(new string[] {
                            "Service provisions",
                            "OT 2x/week, SLP 1x/week"});
#line 366
    testRunner.Then("functional recommendations should include:", ((string)(null)), table3005, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Conduct systematic functional behavior assessment for intervention planning")]
        [Xunit.TraitAttribute("FeatureTitle", "Assessment and Screening Tools API Endpoints (FR-015)")]
        [Xunit.TraitAttribute("Description", "Conduct systematic functional behavior assessment for intervention planning")]
        [Xunit.TraitAttribute("Category", "behavioral-assessment")]
        [Xunit.TraitAttribute("Category", "functional-behavior-assessment")]
        [Xunit.TraitAttribute("Category", "comprehensive-fba")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConductSystematicFunctionalBehaviorAssessmentForInterventionPlanning()
        {
            string[] tagsOfScenario = new string[] {
                    "behavioral-assessment",
                    "functional-behavior-assessment",
                    "comprehensive-fba",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Conduct systematic functional behavior assessment for intervention planning", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 374
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 375
    testRunner.Given("student \"Jordan Smith\" exhibits challenging behaviors in school", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 376
    testRunner.And("I need to determine function of behaviors for intervention planning", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 377
    testRunner.When("I implement comprehensive FBA protocol", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3006 = new TechTalk.SpecFlow.Table(new string[] {
                            "Data Collection Method",
                            "Purpose",
                            "Duration/Frequency"});
                table3006.AddRow(new string[] {
                            "Direct observation",
                            "Document ABC patterns",
                            "5 days, 2 hours each"});
                table3006.AddRow(new string[] {
                            "Interview data",
                            "Gather stakeholder perspectives",
                            "Teachers, parents, student"});
                table3006.AddRow(new string[] {
                            "Record review",
                            "Historical behavior patterns",
                            "Previous 2 years"});
                table3006.AddRow(new string[] {
                            "Environmental analysis",
                            "Setting factors",
                            "All school environments"});
#line 378
    testRunner.Then("I should conduct systematic data collection across:", ((string)(null)), table3006, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3007 = new TechTalk.SpecFlow.Table(new string[] {
                            "Data Element",
                            "Recording Details"});
                table3007.AddRow(new string[] {
                            "Antecedent events",
                            "What happened immediately before"});
                table3007.AddRow(new string[] {
                            "Behavior description",
                            "Objective, observable behaviors"});
                table3007.AddRow(new string[] {
                            "Consequence events",
                            "What happened immediately after"});
                table3007.AddRow(new string[] {
                            "Duration/intensity",
                            "How long, how severe"});
                table3007.AddRow(new string[] {
                            "Setting factors",
                            "Where, when, who present"});
#line 384
    testRunner.And("ABC data collection should capture:", ((string)(null)), table3007, "And ");
#line hidden
#line 391
    testRunner.When("analyzing collected data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3008 = new TechTalk.SpecFlow.Table(new string[] {
                            "Pattern Analysis",
                            "Findings",
                            "Jordan\'s Patterns"});
                table3008.AddRow(new string[] {
                            "Temporal patterns",
                            "Time of day behaviors occur",
                            "Peak: 10-11 AM"});
                table3008.AddRow(new string[] {
                            "Antecedent patterns",
                            "Common triggers",
                            "Academic demands"});
                table3008.AddRow(new string[] {
                            "Consequence patterns",
                            "How behaviors are handled",
                            "Escape provided 70%"});
                table3008.AddRow(new string[] {
                            "Setting patterns",
                            "Where behaviors occur most",
                            "Math class primarily"});
#line 392
    testRunner.Then("pattern analysis should identify:", ((string)(null)), table3008, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3009 = new TechTalk.SpecFlow.Table(new string[] {
                            "Function Category",
                            "Evidence",
                            "Hypothesis Strength"});
                table3009.AddRow(new string[] {
                            "Escape/avoidance",
                            "High rates during demands",
                            "Strong evidence"});
                table3009.AddRow(new string[] {
                            "Attention-seeking",
                            "Moderate rates when ignored",
                            "Weak evidence"});
                table3009.AddRow(new string[] {
                            "Tangible access",
                            "Low rates when items restricted",
                            "No evidence"});
                table3009.AddRow(new string[] {
                            "Sensory/automatic",
                            "No clear environmental patterns",
                            "No evidence"});
#line 398
    testRunner.And("hypothesis development should determine:", ((string)(null)), table3009, "And ");
#line hidden
#line 404
    testRunner.When("FBA is complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3010 = new TechTalk.SpecFlow.Table(new string[] {
                            "Intervention Component",
                            "Function-Based Strategy"});
                table3010.AddRow(new string[] {
                            "Antecedent strategies",
                            "Modify task difficulty level"});
                table3010.AddRow(new string[] {
                            "Replacement behaviors",
                            "Teach appropriate help-seeking"});
                table3010.AddRow(new string[] {
                            "Consequence strategies",
                            "Minimize escape, reinforce alternatives"});
                table3010.AddRow(new string[] {
                            "Environmental changes",
                            "Provide scheduled breaks"});
                table3010.AddRow(new string[] {
                            "Data collection plan",
                            "Monitor intervention effectiveness"});
#line 405
    testRunner.Then("intervention planning should include:", ((string)(null)), table3010, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AssessmentAndScreeningToolsAPIEndpointsFR_015Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AssessmentAndScreeningToolsAPIEndpointsFR_015Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
