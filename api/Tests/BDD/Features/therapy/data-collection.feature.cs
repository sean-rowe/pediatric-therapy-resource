// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DataCollectionAPIEndpointsFR_004Feature : object, Xunit.IClassFixture<DataCollectionAPIEndpointsFR_004Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "data-collection.feature"
#line hidden
        
        public DataCollectionAPIEndpointsFR_004Feature(DataCollectionAPIEndpointsFR_004Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Data Collection API Endpoints (FR-004)", "  As a therapy professional\n  I want to collect and analyze therapy data\n  So tha" +
                    "t I can track progress and make data-driven decisions", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record session data points")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Record session data points")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "recording")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordSessionDataPoints()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "recording",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record session data points", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.Given("I am in session with student \"student-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3064 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3064.AddRow(new string[] {
                            "goalId",
                            "goal-789"});
                table3064.AddRow(new string[] {
                            "trialData",
                            "[{\"trial\": 1, \"response\": \"correct\", \"prompt\": \"none\"}]"});
                table3064.AddRow(new string[] {
                            "percentCorrect",
                            "80"});
                table3064.AddRow(new string[] {
                            "notes",
                            "Good attention, minimal prompting"});
                table3064.AddRow(new string[] {
                            "timestamp",
                            "2024-01-22T10:15:00Z"});
#line 14
    testRunner.When("I send a POST request to \"/api/data-collection/sessions/session-456/data\" with:", ((string)(null)), table3064, "When ");
#line hidden
#line 21
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
    testRunner.And("data should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
    testRunner.And("progress calculations should update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Quick tally data collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Quick tally data collection")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "quick")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void QuickTallyDataCollection()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "quick",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Quick tally data collection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 28
    testRunner.Given("I am collecting frequency data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3065 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3065.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3065.AddRow(new string[] {
                            "behavior",
                            "hand-raising"});
                table3065.AddRow(new string[] {
                            "count",
                            "15"});
                table3065.AddRow(new string[] {
                            "duration",
                            "30"});
                table3065.AddRow(new string[] {
                            "context",
                            "group-activity"});
#line 29
    testRunner.When("I send a POST request to \"/api/data-collection/quick-tally\" with:", ((string)(null)), table3065, "When ");
#line hidden
#line 36
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
    testRunner.And("frequency should be calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
    testRunner.And("data should be graphed automatically", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record goal probe data")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Record goal probe data")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "probes")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordGoalProbeData()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "probes",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record goal probe data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 43
    testRunner.Given("goal \"goal-789\" requires weekly probes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3066 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3066.AddRow(new string[] {
                            "probeDate",
                            "2024-01-22"});
                table3066.AddRow(new string[] {
                            "trials",
                            "10"});
                table3066.AddRow(new string[] {
                            "correct",
                            "7"});
                table3066.AddRow(new string[] {
                            "promptLevel",
                            "gestural"});
                table3066.AddRow(new string[] {
                            "setting",
                            "therapy-room"});
                table3066.AddRow(new string[] {
                            "materials",
                            "[\"flashcards\", \"manipulatives\"]"});
#line 44
    testRunner.When("I send a POST request to \"/api/data-collection/goals/goal-789/probe\" with:", ((string)(null)), table3066, "When ");
#line hidden
#line 52
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
    testRunner.And("probe data should be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
    testRunner.And("trend line should update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get student data history")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Get student data history")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "retrieval")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetStudentDataHistory()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "retrieval",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get student data history", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 59
    testRunner.Given("student \"student-123\" has collected data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
    testRunner.When("I send a GET request to \"/api/data-collection/students/student-123/data?startDate" +
                        "=2024-01-01&endDate=2024-01-31\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3067 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3067.AddRow(new string[] {
                            "dataPoints",
                            "array"});
                table3067.AddRow(new string[] {
                            "summary",
                            "object"});
                table3067.AddRow(new string[] {
                            "trends",
                            "object"});
                table3067.AddRow(new string[] {
                            "graphs",
                            "array"});
#line 62
    testRunner.And("the response should contain:", ((string)(null)), table3067, "And ");
#line hidden
#line 68
    testRunner.And("data should be organized by goal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record ABC behavioral data")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Record ABC behavioral data")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "behavioral")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordABCBehavioralData()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "behavioral",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record ABC behavioral data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 73
    testRunner.Given("I am observing behavior", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3068 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3068.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3068.AddRow(new string[] {
                            "antecedent",
                            "Transition to math"});
                table3068.AddRow(new string[] {
                            "behavior",
                            "Threw materials"});
                table3068.AddRow(new string[] {
                            "consequence",
                            "Removed from activity"});
                table3068.AddRow(new string[] {
                            "duration",
                            "3 minutes"});
                table3068.AddRow(new string[] {
                            "intensity",
                            "moderate"});
                table3068.AddRow(new string[] {
                            "time",
                            "2024-01-22T10:30:00Z"});
                table3068.AddRow(new string[] {
                            "setting",
                            "classroom"});
#line 74
    testRunner.When("I send a POST request to \"/api/data-collection/abc\" with:", ((string)(null)), table3068, "When ");
#line hidden
#line 84
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
    testRunner.And("ABC data should be recorded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.And("patterns should be analyzed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get data analysis and insights")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Get data analysis and insights")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "analysis")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetDataAnalysisAndInsights()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "analysis",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get data analysis and insights", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 90
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 91
    testRunner.Given("student \"student-123\" has 30 days of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
    testRunner.When("I send a GET request to \"/api/data-collection/analysis/student-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3069 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3069.AddRow(new string[] {
                            "progressSummary",
                            "object"});
                table3069.AddRow(new string[] {
                            "trendAnalysis",
                            "object"});
                table3069.AddRow(new string[] {
                            "recommendations",
                            "array"});
                table3069.AddRow(new string[] {
                            "predictedOutcomes",
                            "object"});
                table3069.AddRow(new string[] {
                            "comparisonToPeers",
                            "object"});
#line 94
    testRunner.And("the response should contain:", ((string)(null)), table3069, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Use rubric-based data collection")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Use rubric-based data collection")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "rubric")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UseRubric_BasedDataCollection()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "rubric",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Use rubric-based data collection", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 104
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3070 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3070.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3070.AddRow(new string[] {
                            "rubricId",
                            "social-skills-rubric"});
                table3070.AddRow(new string[] {
                            "scores",
                            "{\"initiation\": 3, \"maintenance\": 2, \"reciprocity\": 2}"});
                table3070.AddRow(new string[] {
                            "observations",
                            "Improved initiation this week"});
                table3070.AddRow(new string[] {
                            "date",
                            "2024-01-22"});
#line 105
    testRunner.When("I send a POST request to \"/api/data-collection/rubric\" with:", ((string)(null)), table3070, "When ");
#line hidden
#line 112
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
    testRunner.And("rubric scores should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
    testRunner.And("progress visualization should update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record duration data")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Record duration data")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "duration")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordDurationData()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "duration",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record duration data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 118
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3071 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3071.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3071.AddRow(new string[] {
                            "behavior",
                            "on-task"});
                table3071.AddRow(new string[] {
                            "startTime",
                            "2024-01-22T10:00:00Z"});
                table3071.AddRow(new string[] {
                            "endTime",
                            "2024-01-22T10:08:30Z"});
                table3071.AddRow(new string[] {
                            "totalInterval",
                            "600"});
                table3071.AddRow(new string[] {
                            "notes",
                            "With visual timer"});
#line 119
    testRunner.When("I send a POST request to \"/api/data-collection/duration\" with:", ((string)(null)), table3071, "When ");
#line hidden
#line 127
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
    testRunner.And("duration percentage should be calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
    testRunner.And("added to behavior chart", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record interval-based data")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Record interval-based data")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "interval")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordInterval_BasedData()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "interval",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record interval-based data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 133
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3072 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3072.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3072.AddRow(new string[] {
                            "behavior",
                            "vocal-stereotypy"});
                table3072.AddRow(new string[] {
                            "intervalType",
                            "partial"});
                table3072.AddRow(new string[] {
                            "intervalLength",
                            "15"});
                table3072.AddRow(new string[] {
                            "intervals",
                            "[true, false, true, true, false, false]"});
                table3072.AddRow(new string[] {
                            "totalIntervals",
                            "6"});
#line 134
    testRunner.When("I send a POST request to \"/api/data-collection/interval\" with:", ((string)(null)), table3072, "When ");
#line hidden
#line 142
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 143
    testRunner.And("percentage of intervals should be calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
    testRunner.And("data should be graphed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get progress graphs")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Get progress graphs")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "visualization")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetProgressGraphs()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "visualization",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get progress graphs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 148
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 149
    testRunner.Given("student \"student-123\" has data for goal \"goal-789\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 150
    testRunner.When("I send a GET request to \"/api/data-collection/graphs/student-123/goal-789\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 151
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3073 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3073.AddRow(new string[] {
                            "lineGraph",
                            "object"});
                table3073.AddRow(new string[] {
                            "barChart",
                            "object"});
                table3073.AddRow(new string[] {
                            "trendLine",
                            "object"});
                table3073.AddRow(new string[] {
                            "aimLine",
                            "object"});
                table3073.AddRow(new string[] {
                            "phaseChangeLines",
                            "array"});
#line 152
    testRunner.And("the response should contain:", ((string)(null)), table3073, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Import data from external source")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Import data from external source")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "import")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ImportDataFromExternalSource()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "import",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import data from external source", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 162
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3074 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3074.AddRow(new string[] {
                            "format",
                            "csv"});
                table3074.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3074.AddRow(new string[] {
                            "goalId",
                            "goal-789"});
                table3074.AddRow(new string[] {
                            "mapping",
                            "{\"date\": \"A\", \"score\": \"B\", \"notes\": \"C\"}"});
#line 163
    testRunner.When("I send a POST request to \"/api/data-collection/import\" with:", ((string)(null)), table3074, "When ");
#line hidden
#line 169
    testRunner.And("I attach \"progress_data.csv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 171
    testRunner.And("data should be imported", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
    testRunner.And("existing graphs should update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create data collection template")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Create data collection template")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "templates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateDataCollectionTemplate()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "templates",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create data collection template", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 176
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3075 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3075.AddRow(new string[] {
                            "name",
                            "Articulation Progress Tracker"});
                table3075.AddRow(new string[] {
                            "dataType",
                            "percentage"});
                table3075.AddRow(new string[] {
                            "fields",
                            "[\"position\", \"wordLevel\", \"cues\"]"});
                table3075.AddRow(new string[] {
                            "calculations",
                            "[\"average\", \"trend\"]"});
                table3075.AddRow(new string[] {
                            "graphType",
                            "line"});
#line 177
    testRunner.When("I send a POST request to \"/api/data-collection/templates\" with:", ((string)(null)), table3075, "When ");
#line hidden
#line 184
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
    testRunner.And("template should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
    testRunner.And("be available for future use", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Export student data")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Export student data")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "export")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ExportStudentData()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "export",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export student data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 190
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 191
    testRunner.Given("student \"student-123\" has extensive data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 192
    testRunner.When("I send a GET request to \"/api/data-collection/export/student-123?format=excel&dat" +
                        "eRange=semester\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 193
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3076 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3076.AddRow(new string[] {
                            "downloadUrl",
                            "string"});
                table3076.AddRow(new string[] {
                            "fileName",
                            "string"});
                table3076.AddRow(new string[] {
                            "format",
                            "string"});
#line 194
    testRunner.And("the response should contain:", ((string)(null)), table3076, "And ");
#line hidden
#line 199
    testRunner.And("file should include all data with graphs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Mark phase change in data")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Mark phase change in data")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "phases")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MarkPhaseChangeInData()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "phases",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mark phase change in data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 203
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3077 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3077.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3077.AddRow(new string[] {
                            "goalId",
                            "goal-789"});
                table3077.AddRow(new string[] {
                            "phaseDate",
                            "2024-01-22"});
                table3077.AddRow(new string[] {
                            "phaseName",
                            "Intervention B"});
                table3077.AddRow(new string[] {
                            "description",
                            "Added visual supports"});
#line 204
    testRunner.When("I send a POST request to \"/api/data-collection/phase-change\" with:", ((string)(null)), table3077, "When ");
#line hidden
#line 211
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 212
    testRunner.And("phase line should appear on graphs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 213
    testRunner.And("data should be analyzed by phase", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Check mastery criteria")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Check mastery criteria")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "mastery")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CheckMasteryCriteria()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "mastery",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check mastery criteria", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 217
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 218
    testRunner.Given("goal \"goal-789\" has mastery criteria", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3078 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3078.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table3078.AddRow(new string[] {
                            "goalId",
                            "goal-789"});
#line 219
    testRunner.When("I send a POST request to \"/api/data-collection/mastery\" with:", ((string)(null)), table3078, "When ");
#line hidden
#line 223
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3079 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table3079.AddRow(new string[] {
                            "masteryMet",
                            "boolean"});
                table3079.AddRow(new string[] {
                            "currentLevel",
                            "number"});
                table3079.AddRow(new string[] {
                            "criteriaRequired",
                            "string"});
                table3079.AddRow(new string[] {
                            "consecutiveDays",
                            "number"});
                table3079.AddRow(new string[] {
                            "recommendation",
                            "string"});
#line 224
    testRunner.And("the response should contain:", ((string)(null)), table3079, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Bulk data entry")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Collection API Endpoints (FR-004)")]
        [Xunit.TraitAttribute("Description", "Bulk data entry")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "data-collection")]
        [Xunit.TraitAttribute("Category", "bulk")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BulkDataEntry()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "data-collection",
                    "bulk",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bulk data entry", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 234
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3080 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table3080.AddRow(new string[] {
                            "entries",
                            "[{\"studentId\": \"s1\", \"goalId\": \"g1\", \"score\": 85}]"});
                table3080.AddRow(new string[] {
                            "date",
                            "2024-01-22"});
                table3080.AddRow(new string[] {
                            "session",
                            "group-therapy"});
#line 235
    testRunner.When("I send a POST request to \"/api/data-collection/bulk\" with:", ((string)(null)), table3080, "When ");
#line hidden
#line 240
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 241
    testRunner.And("all entries should be processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
    testRunner.And("individual progress should update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DataCollectionAPIEndpointsFR_004Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DataCollectionAPIEndpointsFR_004Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
