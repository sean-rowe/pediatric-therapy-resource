// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CaseloadManagementFeature : object, Xunit.IClassFixture<CaseloadManagementFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "caseload-management.feature"
#line hidden
        
        public CaseloadManagementFeature(CaseloadManagementFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Caseload Management", "  As a therapy administrator or lead therapist\n  I want to manage therapist casel" +
                    "oads effectively\n  So that workload is balanced and students receive consistent " +
                    "services", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("I am logged in as therapy coordinator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3026 = new TechTalk.SpecFlow.Table(new string[] {
                        "Therapist",
                        "Service",
                        "FTE",
                        "Current Caseload"});
            table3026.AddRow(new string[] {
                        "Sarah Johnson",
                        "OT",
                        "1.0",
                        "45 students"});
            table3026.AddRow(new string[] {
                        "Michael Chen",
                        "PT",
                        "0.8",
                        "32 students"});
            table3026.AddRow(new string[] {
                        "Amy Lee",
                        "SLP",
                        "1.0",
                        "52 students"});
            table3026.AddRow(new string[] {
                        "Jessica Brown",
                        "OT",
                        "0.5",
                        "20 students"});
#line 8
    testRunner.And("the following therapists are active:", ((string)(null)), table3026, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View caseload distribution")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "View caseload distribution")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewCaseloadDistribution()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View caseload distribution", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 19
      testRunner.Given("multiple therapists in the practice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
      testRunner.When("I view caseload analytics", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3027 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Value"});
                table3027.AddRow(new string[] {
                            "Average OT Caseload",
                            "42.5 students"});
                table3027.AddRow(new string[] {
                            "Average PT Caseload",
                            "40 students (FTE adjusted)"});
                table3027.AddRow(new string[] {
                            "Average SLP Caseload",
                            "52 students"});
                table3027.AddRow(new string[] {
                            "Highest Individual Load",
                            "Amy Lee: 52 students"});
                table3027.AddRow(new string[] {
                            "Service Hour Distribution",
                            "Balanced within 10%"});
#line 21
      testRunner.Then("I see distribution metrics:", ((string)(null)), table3027, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3028 = new TechTalk.SpecFlow.Table(new string[] {
                            "Chart Type",
                            "Information Displayed"});
                table3028.AddRow(new string[] {
                            "Heat Map",
                            "Caseload by school location"});
                table3028.AddRow(new string[] {
                            "Bar Graph",
                            "Students per therapist"});
                table3028.AddRow(new string[] {
                            "Workload Index",
                            "Complexity-adjusted numbers"});
#line 28
      testRunner.And("visual charts show:", ((string)(null)), table3028, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Calculate workload using complexity factors")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Calculate workload using complexity factors")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CalculateWorkloadUsingComplexityFactors()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate workload using complexity factors", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 35
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 36
      testRunner.Given("students have varying needs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
      testRunner.When("I view \"Sarah Johnson\'s\" workload analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3029 = new TechTalk.SpecFlow.Table(new string[] {
                            "Student Type",
                            "Count",
                            "Weight",
                            "Weighted Units"});
                table3029.AddRow(new string[] {
                            "Regular weekly",
                            "30",
                            "1.0",
                            "30.0"});
                table3029.AddRow(new string[] {
                            "Intensive (2x/week)",
                            "10",
                            "2.0",
                            "20.0"});
                table3029.AddRow(new string[] {
                            "Consultation only",
                            "5",
                            "0.5",
                            "2.5"});
                table3029.AddRow(new string[] {
                            "Total Raw",
                            "45",
                            "-",
                            "-"});
                table3029.AddRow(new string[] {
                            "Total Weighted",
                            "-",
                            "-",
                            "52.5"});
#line 38
      testRunner.Then("I see complexity-adjusted metrics:", ((string)(null)), table3029, "Then ");
#line hidden
#line 45
      testRunner.And("recommended caseload is 50 weighted units", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Identify overloaded therapists")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Identify overloaded therapists")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void IdentifyOverloadedTherapists()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Identify overloaded therapists", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 49
      testRunner.Given("caseload limits are configured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
      testRunner.When("system analyzes current assignments", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3030 = new TechTalk.SpecFlow.Table(new string[] {
                            "Therapist",
                            "Issue",
                            "Recommendation"});
                table3030.AddRow(new string[] {
                            "Amy Lee",
                            "10% over recommended",
                            "Reassign 5 students"});
                table3030.AddRow(new string[] {
                            "Sarah Johnson",
                            "At capacity",
                            "No new assignments"});
#line 51
      testRunner.Then("alerts show:", ((string)(null)), table3030, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3031 = new TechTalk.SpecFlow.Table(new string[] {
                            "From",
                            "To",
                            "Students",
                            "Reason"});
                table3031.AddRow(new string[] {
                            "Amy Lee",
                            "New SLP hire",
                            "8",
                            "Geographic proximity"});
#line 55
      testRunner.And("redistribution suggestions include:", ((string)(null)), table3031, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Transfer student between therapists")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Transfer student between therapists")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TransferStudentBetweenTherapists()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transfer student between therapists", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 63
      testRunner.Given("\"Emma Wilson\" is assigned to \"Sarah Johnson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 64
      testRunner.And("\"Jessica Brown\" has capacity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
      testRunner.When("I transfer \"Emma Wilson\" to \"Jessica Brown\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3032 = new TechTalk.SpecFlow.Table(new string[] {
                            "Required Info",
                            "Details"});
                table3032.AddRow(new string[] {
                            "Transfer Reason",
                            "Therapist schedule change"});
                table3032.AddRow(new string[] {
                            "Effective Date",
                            "2024-02-01"});
                table3032.AddRow(new string[] {
                            "Transition Plan",
                            "Joint session on 2024-01-30"});
                table3032.AddRow(new string[] {
                            "Parent Notification",
                            "Automated email sent"});
#line 66
      testRunner.Then("I must provide:", ((string)(null)), table3032, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3033 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Result"});
                table3033.AddRow(new string[] {
                            "History Entry",
                            "Maintains therapist timeline"});
                table3033.AddRow(new string[] {
                            "Document Access",
                            "New therapist gains access"});
                table3033.AddRow(new string[] {
                            "Calendar Update",
                            "Sessions reassigned"});
                table3033.AddRow(new string[] {
                            "Handoff Note",
                            "Required from prior therapist"});
#line 72
      testRunner.And("transfer creates:", ((string)(null)), table3033, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Bulk reassignment for therapist leave")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Bulk reassignment for therapist leave")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BulkReassignmentForTherapistLeave()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Bulk reassignment for therapist leave", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 81
      testRunner.Given("\"Sarah Johnson\" is going on leave", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 82
      testRunner.When("I initiate coverage plan for \"2024-02-01\" to \"2024-04-30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3034 = new TechTalk.SpecFlow.Table(new string[] {
                            "Student Group",
                            "Suggested Coverage",
                            "Rationale"});
                table3034.AddRow(new string[] {
                            "Lincoln Elementary",
                            "Jessica Brown",
                            "Same school coverage"});
                table3034.AddRow(new string[] {
                            "Washington Middle",
                            "Agency substitute",
                            "No internal capacity"});
                table3034.AddRow(new string[] {
                            "High-need students",
                            "Maintain with sub",
                            "Consistency critical"});
#line 83
      testRunner.Then("system suggests distribution:", ((string)(null)), table3034, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3035 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Details"});
                table3035.AddRow(new string[] {
                            "Accept all",
                            "Implements suggestions"});
                table3035.AddRow(new string[] {
                            "Modify individual",
                            "Change specific assignments"});
                table3035.AddRow(new string[] {
                            "Create groups",
                            "Assign sets to therapists"});
#line 88
      testRunner.And("I can:", ((string)(null)), table3035, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Emergency coverage needed")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Emergency coverage needed")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EmergencyCoverageNeeded()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Emergency coverage needed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 96
      testRunner.Given("\"Michael Chen\" called in sick", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
      testRunner.When("I access same-day coverage options", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3036 = new TechTalk.SpecFlow.Table(new string[] {
                            "Coverage Option",
                            "Availability",
                            "Impact"});
                table3036.AddRow(new string[] {
                            "Jessica Brown",
                            "2 free periods",
                            "Can cover 2 students"});
                table3036.AddRow(new string[] {
                            "Sarah Johnson",
                            "Lunch period only",
                            "Can cover 1 student"});
                table3036.AddRow(new string[] {
                            "Reschedule",
                            "Next available slot",
                            "Parent notification"});
                table3036.AddRow(new string[] {
                            "Teletherapy",
                            "Backup therapist remote",
                            "If consent on file"});
#line 98
      testRunner.Then("system shows:", ((string)(null)), table3036, "Then ");
#line hidden
#line 104
      testRunner.And("critical sessions are prioritized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Optimize travel between schools")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Optimize travel between schools")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void OptimizeTravelBetweenSchools()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Optimize travel between schools", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 110
      testRunner.Given("therapists serve multiple locations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 111
      testRunner.When("I run route optimization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3037 = new TechTalk.SpecFlow.Table(new string[] {
                            "Therapist",
                            "Current Route",
                            "Optimized Route",
                            "Time Saved"});
                table3037.AddRow(new string[] {
                            "Sarah Johnson",
                            "School A→C→B→D",
                            "School A→B→C→D",
                            "45 min/week"});
                table3037.AddRow(new string[] {
                            "Michael Chen",
                            "Daily travel between 3 sites",
                            "Block scheduling by site",
                            "2 hrs/week"});
#line 112
      testRunner.Then("system suggests:", ((string)(null)), table3037, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3038 = new TechTalk.SpecFlow.Table(new string[] {
                            "Factor",
                            "Weight"});
                table3038.AddRow(new string[] {
                            "Student needs",
                            "High priority"});
                table3038.AddRow(new string[] {
                            "IEP requirements",
                            "Must maintain"});
                table3038.AddRow(new string[] {
                            "Therapist preference",
                            "Considered"});
#line 116
      testRunner.And("changes consider:", ((string)(null)), table3038, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Balance schedule density")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Balance schedule density")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BalanceScheduleDensity()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Balance schedule density", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 123
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 124
      testRunner.Given("varying session requirements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 125
      testRunner.When("I analyze \"Amy Lee\'s\" schedule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3039 = new TechTalk.SpecFlow.Table(new string[] {
                            "Day",
                            "Sessions",
                            "Breaks",
                            "Documentation Time",
                            "Utilization"});
                table3039.AddRow(new string[] {
                            "Monday",
                            "12",
                            "1",
                            "30 min",
                            "95%"});
                table3039.AddRow(new string[] {
                            "Tuesday",
                            "10",
                            "2",
                            "45 min",
                            "85%"});
                table3039.AddRow(new string[] {
                            "Wednesday",
                            "11",
                            "1",
                            "45 min",
                            "90%"});
#line 126
      testRunner.Then("I see:", ((string)(null)), table3039, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3040 = new TechTalk.SpecFlow.Table(new string[] {
                            "Issue",
                            "Solution"});
                table3040.AddRow(new string[] {
                            "Monday overloaded",
                            "Move 2 sessions to Thursday"});
                table3040.AddRow(new string[] {
                            "Insufficient breaks",
                            "Block 15-min breaks required"});
#line 131
      testRunner.And("productivity recommendations include:", ((string)(null)), table3040, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Project staffing needs")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Project staffing needs")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ProjectStaffingNeeds()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Project staffing needs", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 139
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 140
      testRunner.Given("current caseload trends", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
      testRunner.When("I run staffing projection for \"Fall 2024\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3041 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Current",
                            "Projected",
                            "Gap"});
                table3041.AddRow(new string[] {
                            "Total Students",
                            "149",
                            "175",
                            "+26"});
                table3041.AddRow(new string[] {
                            "Required Service Hours",
                            "4,200",
                            "4,900",
                            "+700"});
                table3041.AddRow(new string[] {
                            "Current FTE Capacity",
                            "3.3",
                            "3.3",
                            "0"});
                table3041.AddRow(new string[] {
                            "Needed FTE",
                            "3.3",
                            "3.85",
                            "+0.55"});
#line 142
      testRunner.Then("analysis shows:", ((string)(null)), table3041, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3042 = new TechTalk.SpecFlow.Table(new string[] {
                            "Option",
                            "Details"});
                table3042.AddRow(new string[] {
                            "Hire 0.5 FTE",
                            "Post by April for August start"});
                table3042.AddRow(new string[] {
                            "Increase current FTE",
                            "Offer 0.6 to current 0.5 FTE"});
#line 148
      testRunner.And("productivity recommendations include:", ((string)(null)), table3042, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Model impact of new school contract")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Model impact of new school contract")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ModelImpactOfNewSchoolContract()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Model impact of new school contract", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 155
      testRunner.Given("potential new school with 40 students", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 156
      testRunner.When("I model adding \"Riverside Elementary\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3043 = new TechTalk.SpecFlow.Table(new string[] {
                            "Impact Area",
                            "Assessment"});
                table3043.AddRow(new string[] {
                            "Geographic feasibility",
                            "15 miles from nearest site"});
                table3043.AddRow(new string[] {
                            "FTE Required",
                            "0.8 additional"});
                table3043.AddRow(new string[] {
                            "Current Staff Capacity",
                            "Cannot absorb"});
                table3043.AddRow(new string[] {
                            "Revenue Projection",
                            "$125,000 annually"});
                table3043.AddRow(new string[] {
                            "Recommendation",
                            "Hire dedicated therapist"});
#line 157
      testRunner.Then("impact analysis shows:", ((string)(null)), table3043, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track therapist productivity")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Track therapist productivity")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackTherapistProductivity()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track therapist productivity", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 168
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 169
      testRunner.Given("productivity expectations exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 170
      testRunner.When("I view team productivity dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3044 = new TechTalk.SpecFlow.Table(new string[] {
                            "Therapist",
                            "Direct Service",
                            "Documentation",
                            "Productivity"});
                table3044.AddRow(new string[] {
                            "Sarah Johnson",
                            "85%",
                            "15%",
                            "Optimal"});
                table3044.AddRow(new string[] {
                            "Michael Chen",
                            "75%",
                            "25%",
                            "Below target"});
                table3044.AddRow(new string[] {
                            "Amy Lee",
                            "90%",
                            "10%",
                            "Review needed"});
#line 171
      testRunner.Then("metrics include:", ((string)(null)), table3044, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3045 = new TechTalk.SpecFlow.Table(new string[] {
                            "Factor",
                            "Impact on Productivity"});
                table3045.AddRow(new string[] {
                            "Travel time",
                            "Reduces direct service"});
                table3045.AddRow(new string[] {
                            "Complex cases",
                            "Increases documentation"});
                table3045.AddRow(new string[] {
                            "No-shows",
                            "Impacts utilization"});
#line 176
      testRunner.And("drill-down shows:", ((string)(null)), table3045, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Monitor outcome quality by caseload")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Monitor outcome quality by caseload")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MonitorOutcomeQualityByCaseload()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Monitor outcome quality by caseload", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 183
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 184
      testRunner.Given("quality metrics are tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 185
      testRunner.When("I analyze outcomes by caseload size", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3046 = new TechTalk.SpecFlow.Table(new string[] {
                            "Caseload Range",
                            "Goal Achievement",
                            "Parent Satisfaction"});
                table3046.AddRow(new string[] {
                            "30-40 students",
                            "82%",
                            "4.7/5"});
                table3046.AddRow(new string[] {
                            "41-50 students",
                            "78%",
                            "4.5/5"});
                table3046.AddRow(new string[] {
                            "51-60 students",
                            "71%",
                            "4.1/5"});
#line 186
      testRunner.Then("data shows:", ((string)(null)), table3046, "Then ");
#line hidden
#line 191
      testRunner.And("correlation suggests optimal at 40-45", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Maintain substitute pool")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Maintain substitute pool")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MaintainSubstitutePool()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Maintain substitute pool", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 196
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 197
      testRunner.Given("substitute therapists available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 198
      testRunner.When("I view substitute management", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3047 = new TechTalk.SpecFlow.Table(new string[] {
                            "Substitute",
                            "Credentials",
                            "Last Assignment",
                            "Availability"});
                table3047.AddRow(new string[] {
                            "Maria Garcia",
                            "OT, SLP",
                            "2024-01-10",
                            "M, W, F"});
                table3047.AddRow(new string[] {
                            "James Wilson",
                            "PT",
                            "2024-01-05",
                            "All days"});
                table3047.AddRow(new string[] {
                            "Contract Agency",
                            "All types",
                            "On-demand",
                            "24hr notice"});
#line 199
      testRunner.Then("I see:", ((string)(null)), table3047, "Then ");
#line hidden
#line 204
      testRunner.And("performance ratings available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Plan maternity leave coverage")]
        [Xunit.TraitAttribute("FeatureTitle", "Caseload Management")]
        [Xunit.TraitAttribute("Description", "Plan maternity leave coverage")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PlanMaternityLeaveCoverage()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Plan maternity leave coverage", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 207
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 208
      testRunner.Given("\"Amy Lee\" announces 12-week leave", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 209
      testRunner.When("I create coverage plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3048 = new TechTalk.SpecFlow.Table(new string[] {
                            "Phase",
                            "Timeline",
                            "Action"});
                table3048.AddRow(new string[] {
                            "Knowledge transfer",
                            "6 weeks before",
                            "Document all students"});
                table3048.AddRow(new string[] {
                            "Introduce substitute",
                            "4 weeks before",
                            "Joint sessions begin"});
                table3048.AddRow(new string[] {
                            "Full transition",
                            "1 week before",
                            "Substitute leads"});
                table3048.AddRow(new string[] {
                            "Leave period",
                            "12 weeks",
                            "Check-ins weekly"});
                table3048.AddRow(new string[] {
                            "Return transition",
                            "1 week after",
                            "Joint sessions resume"});
#line 210
      testRunner.Then("timeline includes:", ((string)(null)), table3048, "Then ");
#line hidden
#line 217
      testRunner.And("all stakeholders notified appropriately", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CaseloadManagementFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CaseloadManagementFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
