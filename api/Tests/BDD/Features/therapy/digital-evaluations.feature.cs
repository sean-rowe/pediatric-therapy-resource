// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Therapy
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DigitalEvaluationsFeature : object, Xunit.IClassFixture<DigitalEvaluationsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "digital-evaluations.feature"
#line hidden
        
        public DigitalEvaluationsFeature(DigitalEvaluationsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/therapy", "Digital Evaluations", "  As a therapist\n  I want to conduct and document evaluations digitally\n  So that" +
                    " I can efficiently assess students and track outcomes", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("I am logged in as evaluating therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3081 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "Service",
                        "Duration",
                        "Sections"});
            table3081.AddRow(new string[] {
                        "Initial OT Evaluation",
                        "OT",
                        "60 min",
                        "Sensory, Motor, ADL, Academic"});
            table3081.AddRow(new string[] {
                        "Speech Language Evaluation",
                        "SLP",
                        "90 min",
                        "Articulation, Language, Pragmatics"});
            table3081.AddRow(new string[] {
                        "Physical Therapy Evaluation",
                        "PT",
                        "60 min",
                        "Strength, Balance, Mobility"});
#line 8
    testRunner.And("the following evaluation types are configured:", ((string)(null)), table3081, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Start new evaluation")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Start new evaluation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void StartNewEvaluation()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start new evaluation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 18
      testRunner.Given("\"Emma Wilson\" is referred for OT evaluation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
      testRunner.When("I start a new evaluation on \"2024-01-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3082 = new TechTalk.SpecFlow.Table(new string[] {
                            "Component",
                            "Status"});
                table3082.AddRow(new string[] {
                            "Student Demographics",
                            "Auto-populated from profile"});
                table3082.AddRow(new string[] {
                            "Referral Reason",
                            "Required field"});
                table3082.AddRow(new string[] {
                            "Parent Concerns",
                            "Text entry section"});
                table3082.AddRow(new string[] {
                            "Teacher Input",
                            "Structured questionnaire"});
                table3082.AddRow(new string[] {
                            "Assessment Battery",
                            "Standard protocol checklist"});
                table3082.AddRow(new string[] {
                            "Observations",
                            "Structured and free-text"});
#line 20
      testRunner.Then("the evaluation includes:", ((string)(null)), table3082, "Then ");
#line hidden
#line 28
      testRunner.And("evaluation ID is generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
      testRunner.And("status is \"in progress\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Complete standardized assessment")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Complete standardized assessment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompleteStandardizedAssessment()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete standardized assessment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 33
      testRunner.Given("I am conducting \"Peabody Developmental Motor Scales\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3083 = new TechTalk.SpecFlow.Table(new string[] {
                            "Subtest",
                            "Raw Score",
                            "Age Equivalent"});
                table3083.AddRow(new string[] {
                            "Reflexes",
                            "8",
                            "6.2"});
                table3083.AddRow(new string[] {
                            "Stationary",
                            "42",
                            "6.5"});
                table3083.AddRow(new string[] {
                            "Locomotion",
                            "65",
                            "6.8"});
                table3083.AddRow(new string[] {
                            "Object Manipulation",
                            "38",
                            "5.9"});
                table3083.AddRow(new string[] {
                            "Grasping",
                            "25",
                            "6.0"});
                table3083.AddRow(new string[] {
                            "Visual-Motor",
                            "52",
                            "6.3"});
#line 34
      testRunner.When("I enter assessment data:", ((string)(null)), table3083, "When ");
#line hidden
#line 42
      testRunner.Then("standard scores are calculated automatically", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
      testRunner.And("percentile ranks are displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
      testRunner.And("age equivalents are graphed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
      testRunner.And("interpretive ranges are highlighted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Document clinical observations")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Document clinical observations")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentClinicalObservations()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Document clinical observations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 49
      testRunner.Given("I am observing \"Emma Wilson\" during evaluation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3084 = new TechTalk.SpecFlow.Table(new string[] {
                            "Area",
                            "Observation"});
                table3084.AddRow(new string[] {
                            "Attention",
                            "Sustained for 10-12 minutes with breaks"});
                table3084.AddRow(new string[] {
                            "Behavior",
                            "Cooperative, sought approval frequently"});
                table3084.AddRow(new string[] {
                            "Sensory Response",
                            "Avoided loud noises, sought deep pressure"});
                table3084.AddRow(new string[] {
                            "Motor Planning",
                            "Required verbal cues for multi-step tasks"});
                table3084.AddRow(new string[] {
                            "Social Interaction",
                            "Engaged appropriately with examiner"});
#line 50
      testRunner.When("I document observations for:", ((string)(null)), table3084, "When ");
#line hidden
#line 57
      testRunner.Then("observations are linked to evaluation areas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
      testRunner.And("support interpretation of scores", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Import teacher questionnaire responses")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Import teacher questionnaire responses")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ImportTeacherQuestionnaireResponses()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Import teacher questionnaire responses", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 64
      testRunner.Given("teacher \"Ms. Smith\" completed input form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 65
      testRunner.When("I import the responses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3085 = new TechTalk.SpecFlow.Table(new string[] {
                            "Question Category",
                            "Response Summary"});
                table3085.AddRow(new string[] {
                            "Classroom Performance",
                            "Below grade level in writing"});
                table3085.AddRow(new string[] {
                            "Peer Interaction",
                            "Age-appropriate"});
                table3085.AddRow(new string[] {
                            "Following Directions",
                            "Requires repetition and visual cues"});
                table3085.AddRow(new string[] {
                            "Organization Skills",
                            "Significant difficulties noted"});
#line 66
      testRunner.Then("I see structured data:", ((string)(null)), table3085, "Then ");
#line hidden
#line 72
      testRunner.And("responses inform evaluation summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Include work samples")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Include work samples")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void IncludeWorkSamples()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Include work samples", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 76
      testRunner.Given("I have collected work samples from \"Emma Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3086 = new TechTalk.SpecFlow.Table(new string[] {
                            "Sample Type",
                            "File",
                            "Notes"});
                table3086.AddRow(new string[] {
                            "Handwriting",
                            "writing_1.jpg",
                            "Baseline writing sample"});
                table3086.AddRow(new string[] {
                            "Drawing",
                            "person_1.jpg",
                            "Human figure drawing"});
                table3086.AddRow(new string[] {
                            "Cutting",
                            "cutting_1.jpg",
                            "Curved line cutting attempt"});
#line 77
      testRunner.When("I attach to evaluation:", ((string)(null)), table3086, "When ");
#line hidden
#line 82
      testRunner.Then("samples are stored securely", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
      testRunner.And("samples support clinical findings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
      testRunner.And("samples can be referenced in report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record parent interview")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Record parent interview")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordParentInterview()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record parent interview", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 87
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 88
      testRunner.Given("I am interviewing parents during evaluation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3087 = new TechTalk.SpecFlow.Table(new string[] {
                            "Topic",
                            "Parent Report"});
                table3087.AddRow(new string[] {
                            "Developmental History",
                            "Delayed milestones, walked at 18 months"});
                table3087.AddRow(new string[] {
                            "Medical History",
                            "Premature birth, 32 weeks"});
                table3087.AddRow(new string[] {
                            "Current Concerns",
                            "Struggles with buttons, zippers"});
                table3087.AddRow(new string[] {
                            "Home Behavior",
                            "Avoids coloring, prefers physical play"});
                table3087.AddRow(new string[] {
                            "Previous Services",
                            "ECI services until age 3"});
#line 89
      testRunner.When("I document parent input:", ((string)(null)), table3087, "When ");
#line hidden
#line 96
      testRunner.Then("information integrates into evaluation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
      testRunner.And("relevant history highlights appear in summary", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate evaluation report")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Generate evaluation report")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateEvaluationReport()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate evaluation report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 102
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 103
      testRunner.Given("I have completed all evaluation components", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 104
      testRunner.When("I generate the report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3088 = new TechTalk.SpecFlow.Table(new string[] {
                            "Section",
                            "Content"});
                table3088.AddRow(new string[] {
                            "Identifying Information",
                            "Student demographics, dates"});
                table3088.AddRow(new string[] {
                            "Reason for Referral",
                            "Referral source and concerns"});
                table3088.AddRow(new string[] {
                            "Background Information",
                            "History, previous services"});
                table3088.AddRow(new string[] {
                            "Evaluation Methods",
                            "Tests administered, observations"});
                table3088.AddRow(new string[] {
                            "Test Results",
                            "Scores, tables, graphs"});
                table3088.AddRow(new string[] {
                            "Clinical Observations",
                            "Behavioral notes, performance"});
                table3088.AddRow(new string[] {
                            "Interpretation",
                            "Score analysis, patterns"});
                table3088.AddRow(new string[] {
                            "Summary",
                            "Strengths and areas of concern"});
                table3088.AddRow(new string[] {
                            "Recommendations",
                            "Service eligibility, frequency"});
                table3088.AddRow(new string[] {
                            "Goals",
                            "Proposed IEP goals if eligible"});
#line 105
      testRunner.Then("the report includes:", ((string)(null)), table3088, "Then ");
#line hidden
#line 117
      testRunner.And("report follows district template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
      testRunner.And("language is parent-friendly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Customize report sections")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Customize report sections")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CustomizeReportSections()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Customize report sections", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 122
      testRunner.Given("I am finalizing evaluation report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3089 = new TechTalk.SpecFlow.Table(new string[] {
                            "Action",
                            "Details"});
                table3089.AddRow(new string[] {
                            "Edit Summary",
                            "Add specific classroom examples"});
                table3089.AddRow(new string[] {
                            "Reorder Sections",
                            "Move recommendations before goals"});
                table3089.AddRow(new string[] {
                            "Add Custom Section",
                            "Include sensory profile results"});
                table3089.AddRow(new string[] {
                            "Adjust Language",
                            "Simplify technical terms"});
#line 123
      testRunner.When("I customize the generated content:", ((string)(null)), table3089, "When ");
#line hidden
#line 129
      testRunner.Then("customizations are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
      testRunner.And("report maintains professional format", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
      testRunner.And("changes are tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Determine eligibility - qualifies")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Determine eligibility - qualifies")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DetermineEligibility_Qualifies()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine eligibility - qualifies", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 137
      testRunner.Given("\"Emma Wilson\" completed OT evaluation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3090 = new TechTalk.SpecFlow.Table(new string[] {
                            "Criteria",
                            "Result"});
                table3090.AddRow(new string[] {
                            "Standard Scores",
                            ">1.5 SD below mean"});
                table3090.AddRow(new string[] {
                            "Educational Impact",
                            "Documented in classroom"});
                table3090.AddRow(new string[] {
                            "Need for Specialized Services",
                            "Confirmed by team"});
#line 138
      testRunner.And("evaluation shows:", ((string)(null)), table3090, "And ");
#line hidden
#line 143
      testRunner.When("I complete eligibility determination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
      testRunner.Then("student qualifies for services", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
      testRunner.And("recommended service level is \"30 minutes weekly\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
      testRunner.And("eligibility summary is generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Determine eligibility - does not qualify")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Determine eligibility - does not qualify")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DetermineEligibility_DoesNotQualify()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine eligibility - does not qualify", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 149
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 150
      testRunner.Given("\"Liam Brown\" completed evaluation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 151
      testRunner.And("scores are within normal limits", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
      testRunner.When("I complete eligibility determination", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
      testRunner.Then("student does not qualify for direct services", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3091 = new TechTalk.SpecFlow.Table(new string[] {
                            "Component",
                            "Content"});
                table3091.AddRow(new string[] {
                            "Explanation",
                            "Scores within typical range"});
                table3091.AddRow(new string[] {
                            "Recommendations",
                            "Classroom accommodations only"});
                table3091.AddRow(new string[] {
                            "Monitoring Plan",
                            "Re-evaluate if concerns arise"});
                table3091.AddRow(new string[] {
                            "Parent Resources",
                            "Home activity suggestions"});
#line 154
      testRunner.And("report includes:", ((string)(null)), table3091, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Borderline eligibility case")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Borderline eligibility case")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BorderlineEligibilityCase()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Borderline eligibility case", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 162
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 163
      testRunner.Given("evaluation results are borderline", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3092 = new TechTalk.SpecFlow.Table(new string[] {
                            "Factor",
                            "Impact"});
                table3092.AddRow(new string[] {
                            "Teacher Concern Level",
                            "High - daily struggles"});
                table3092.AddRow(new string[] {
                            "Parent Priority",
                            "Requesting services"});
                table3092.AddRow(new string[] {
                            "Response to Intervention",
                            "Limited progress documented"});
                table3092.AddRow(new string[] {
                            "Peer Comparison",
                            "Significantly behind peers"});
#line 164
      testRunner.When("I document additional considerations:", ((string)(null)), table3092, "When ");
#line hidden
#line 170
      testRunner.Then("multi-disciplinary team review is triggered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 171
      testRunner.And("additional documentation supports decision", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Share evaluation with IEP team")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Share evaluation with IEP team")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ShareEvaluationWithIEPTeam()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Share evaluation with IEP team", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 176
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 177
      testRunner.Given("evaluation is complete and signed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 178
      testRunner.When("I share with IEP team members", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3093 = new TechTalk.SpecFlow.Table(new string[] {
                            "Role",
                            "Access Level"});
                table3093.AddRow(new string[] {
                            "Special Ed Director",
                            "Full report and raw data"});
                table3093.AddRow(new string[] {
                            "Case Manager",
                            "Full report"});
                table3093.AddRow(new string[] {
                            "General Ed Teacher",
                            "Summary and recommendations"});
                table3093.AddRow(new string[] {
                            "Parents",
                            "Full report in parent portal"});
#line 179
      testRunner.Then("team members can:", ((string)(null)), table3093, "Then ");
#line hidden
#line 185
      testRunner.And("access is logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
      testRunner.And("documents are watermarked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Lock evaluation after ARD meeting")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Lock evaluation after ARD meeting")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void LockEvaluationAfterARDMeeting()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Lock evaluation after ARD meeting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 189
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 190
      testRunner.Given("evaluation was reviewed in ARD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 191
      testRunner.When("ARD meeting is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 192
      testRunner.Then("evaluation is locked from edits", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
      testRunner.And("addendums require new evaluation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
      testRunner.And("original remains unchanged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Schedule re-evaluation")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Schedule re-evaluation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ScheduleRe_Evaluation()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule re-evaluation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 199
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 200
      testRunner.Given("\"Emma Wilson\" had initial evaluation on \"2021-01-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 201
      testRunner.And("re-evaluations are required every 3 years", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
      testRunner.When("system date approaches \"2024-01-15\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 203
      testRunner.Then("re-evaluation reminder is triggered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 204
      testRunner.And("notification sent 60 days prior", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 205
      testRunner.And("re-evaluation is added to calendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compare evaluation results over time")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Compare evaluation results over time")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CompareEvaluationResultsOverTime()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare evaluation results over time", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 208
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3094 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Type",
                            "Key Finding"});
                table3094.AddRow(new string[] {
                            "2021-01-15",
                            "Initial",
                            "Significant delays"});
                table3094.AddRow(new string[] {
                            "2022-06-01",
                            "Annual",
                            "Moderate progress"});
                table3094.AddRow(new string[] {
                            "2024-01-15",
                            "Triennial",
                            "Approaching grade level"});
#line 209
      testRunner.Given("\"Emma Wilson\" has multiple evaluations:", ((string)(null)), table3094, "Given ");
#line hidden
#line 214
      testRunner.When("I view evaluation history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 215
      testRunner.Then("I see progress graphs", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 216
      testRunner.And("score comparisons", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
      testRunner.And("trend analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
      testRunner.And("progress narrative", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Document progress since last evaluation")]
        [Xunit.TraitAttribute("FeatureTitle", "Digital Evaluations")]
        [Xunit.TraitAttribute("Description", "Document progress since last evaluation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DocumentProgressSinceLastEvaluation()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Document progress since last evaluation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 221
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 222
      testRunner.Given("I am conducting re-evaluation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 223
      testRunner.When("I review previous recommendations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3095 = new TechTalk.SpecFlow.Table(new string[] {
                            "Previous Recommendation",
                            "Current Status"});
                table3095.AddRow(new string[] {
                            "OT 2x weekly",
                            "Implemented, good progress"});
                table3095.AddRow(new string[] {
                            "Sensory breaks",
                            "Effective strategy"});
                table3095.AddRow(new string[] {
                            "Pencil grip support",
                            "Still needed"});
#line 224
      testRunner.Then("I document:", ((string)(null)), table3095, "Then ");
#line hidden
#line 229
      testRunner.And("progress informs current recommendations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DigitalEvaluationsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DigitalEvaluationsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
