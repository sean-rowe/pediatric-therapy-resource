// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Communication
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CommunicationToolsAPIEndpointsFR_014Feature : object, Xunit.IClassFixture<CommunicationToolsAPIEndpointsFR_014Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "communication-tools.feature"
#line hidden
        
        public CommunicationToolsAPIEndpointsFR_014Feature(CommunicationToolsAPIEndpointsFR_014Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/communication", "Communication Tools API Endpoints (FR-014)", "  As a therapy professional\n  I want multi-channel communication and sharing tool" +
                    "s\n  So that I can effectively communicate with parents and share resources", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create expiring quicklink for resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Communication Tools API Endpoints (FR-014)")]
        [Xunit.TraitAttribute("Description", "Create expiring quicklink for resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "communication")]
        [Xunit.TraitAttribute("Category", "sharing")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateExpiringQuicklinkForResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "communication",
                    "sharing",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create expiring quicklink for resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table618 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table618.AddRow(new string[] {
                            "resourceIds",
                            "[\"res-123\", \"res-124\"]"});
                table618.AddRow(new string[] {
                            "expirationHours",
                            "72"});
                table618.AddRow(new string[] {
                            "requireAuth",
                            "false"});
                table618.AddRow(new string[] {
                            "accessLimit",
                            "10"});
                table618.AddRow(new string[] {
                            "message",
                            "\"This week\'s homework\""});
#line 13
    testRunner.When("I send a POST request to \"/api/communication/quicklinks\" with:", ((string)(null)), table618, "When ");
#line hidden
#line 20
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table619 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table619.AddRow(new string[] {
                            "linkId",
                            "string"});
                table619.AddRow(new string[] {
                            "shortUrl",
                            "string"});
                table619.AddRow(new string[] {
                            "expiresAt",
                            "string"});
                table619.AddRow(new string[] {
                            "qrCode",
                            "string"});
#line 21
    testRunner.And("the response should contain:", ((string)(null)), table619, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Send templated email to parents")]
        [Xunit.TraitAttribute("FeatureTitle", "Communication Tools API Endpoints (FR-014)")]
        [Xunit.TraitAttribute("Description", "Send templated email to parents")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "communication")]
        [Xunit.TraitAttribute("Category", "email")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SendTemplatedEmailToParents()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "communication",
                    "email",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send templated email to parents", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table620 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table620.AddRow(new string[] {
                            "recipientIds",
                            "[\"parent-123\", \"parent-124\"]"});
                table620.AddRow(new string[] {
                            "template",
                            "weekly-update"});
                table620.AddRow(new string[] {
                            "variables",
                            "{\"studentName\": \"Emma\", \"week\": \"12\"}"});
                table620.AddRow(new string[] {
                            "attachments",
                            "[\"res-123\", \"res-124\"]"});
                table620.AddRow(new string[] {
                            "language",
                            "es"});
#line 31
    testRunner.When("I send a POST request to \"/api/communication/email/send\" with:", ((string)(null)), table620, "When ");
#line hidden
#line 38
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.And("emails should be queued", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
    testRunner.And("delivery tracking should be enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Send SMS reminder to parent")]
        [Xunit.TraitAttribute("FeatureTitle", "Communication Tools API Endpoints (FR-014)")]
        [Xunit.TraitAttribute("Description", "Send SMS reminder to parent")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "communication")]
        [Xunit.TraitAttribute("Category", "sms")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SendSMSReminderToParent()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "communication",
                    "sms",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send SMS reminder to parent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table621 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table621.AddRow(new string[] {
                            "phoneNumber",
                            "\"+1-555-123-4567\""});
                table621.AddRow(new string[] {
                            "message",
                            "\"Reminder: Therapy tomorrow at 3pm\""});
                table621.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table621.AddRow(new string[] {
                            "scheduledAt",
                            "\"2024-01-23T08:00:00Z\""});
#line 45
    testRunner.When("I send a POST request to \"/api/communication/sms/send\" with:", ((string)(null)), table621, "When ");
#line hidden
#line 51
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
    testRunner.And("SMS should be scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
    testRunner.And("opt-out link should be included", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access parent portal for student")]
        [Xunit.TraitAttribute("FeatureTitle", "Communication Tools API Endpoints (FR-014)")]
        [Xunit.TraitAttribute("Description", "Access parent portal for student")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "communication")]
        [Xunit.TraitAttribute("Category", "portal")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessParentPortalForStudent()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "communication",
                    "portal",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access parent portal for student", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 58
    testRunner.Given("parent has access to student \"student-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
    testRunner.When("I send a GET request to \"/api/communication/portal/student-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table622 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table622.AddRow(new string[] {
                            "currentAssignments",
                            "array"});
                table622.AddRow(new string[] {
                            "progressReports",
                            "array"});
                table622.AddRow(new string[] {
                            "upcomingSessions",
                            "array"});
                table622.AddRow(new string[] {
                            "resources",
                            "array"});
                table622.AddRow(new string[] {
                            "messages",
                            "array"});
#line 61
    testRunner.And("the response should contain:", ((string)(null)), table622, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Assign homework with tracking")]
        [Xunit.TraitAttribute("FeatureTitle", "Communication Tools API Endpoints (FR-014)")]
        [Xunit.TraitAttribute("Description", "Assign homework with tracking")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "communication")]
        [Xunit.TraitAttribute("Category", "homework")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AssignHomeworkWithTracking()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "communication",
                    "homework",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign homework with tracking", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 71
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table623 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table623.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table623.AddRow(new string[] {
                            "resources",
                            "[\"res-123\", \"res-124\"]"});
                table623.AddRow(new string[] {
                            "dueDate",
                            "\"2024-01-30\""});
                table623.AddRow(new string[] {
                            "instructions",
                            "\"Complete 10 minutes daily\""});
                table623.AddRow(new string[] {
                            "trackProgress",
                            "true"});
                table623.AddRow(new string[] {
                            "parentNotify",
                            "true"});
#line 72
    testRunner.When("I send a POST request to \"/api/communication/homework/assign\" with:", ((string)(null)), table623, "When ");
#line hidden
#line 80
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
    testRunner.And("assignment should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
    testRunner.And("parent notification should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
    testRunner.And("tracking link should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View communication history")]
        [Xunit.TraitAttribute("FeatureTitle", "Communication Tools API Endpoints (FR-014)")]
        [Xunit.TraitAttribute("Description", "View communication history")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "communication")]
        [Xunit.TraitAttribute("Category", "history")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewCommunicationHistory()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "communication",
                    "history",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View communication history", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 87
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 88
    testRunner.When("I send a GET request to \"/api/communication/history/student-123?days=30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table624 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table624.AddRow(new string[] {
                            "emails",
                            "array"});
                table624.AddRow(new string[] {
                            "sms",
                            "array"});
                table624.AddRow(new string[] {
                            "portal",
                            "array"});
                table624.AddRow(new string[] {
                            "homework",
                            "array"});
                table624.AddRow(new string[] {
                            "notes",
                            "array"});
#line 90
    testRunner.And("the response should contain:", ((string)(null)), table624, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate parent-friendly progress report")]
        [Xunit.TraitAttribute("FeatureTitle", "Communication Tools API Endpoints (FR-014)")]
        [Xunit.TraitAttribute("Description", "Generate parent-friendly progress report")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "communication")]
        [Xunit.TraitAttribute("Category", "reports")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateParent_FriendlyProgressReport()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "communication",
                    "reports",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate parent-friendly progress report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table625 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table625.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table625.AddRow(new string[] {
                            "reportPeriod",
                            "monthly"});
                table625.AddRow(new string[] {
                            "includeGraphs",
                            "true"});
                table625.AddRow(new string[] {
                            "language",
                            "en"});
                table625.AddRow(new string[] {
                            "simplifyTerms",
                            "true"});
#line 101
    testRunner.When("I send a POST request to \"/api/communication/progress-report/generate\" with:", ((string)(null)), table625, "When ");
#line hidden
#line 108
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
    testRunner.And("report should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
    testRunner.And("language should be parent-friendly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
    testRunner.And("visuals should be included", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Send secure message to therapist")]
        [Xunit.TraitAttribute("FeatureTitle", "Communication Tools API Endpoints (FR-014)")]
        [Xunit.TraitAttribute("Description", "Send secure message to therapist")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "communication")]
        [Xunit.TraitAttribute("Category", "messaging")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SendSecureMessageToTherapist()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "communication",
                    "messaging",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send secure message to therapist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 115
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 116
    testRunner.Given("I am authenticated as a parent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table626 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table626.AddRow(new string[] {
                            "therapistId",
                            "therapist-123"});
                table626.AddRow(new string[] {
                            "subject",
                            "\"Question about exercises\""});
                table626.AddRow(new string[] {
                            "message",
                            "\"Should we continue if...\""});
                table626.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table626.AddRow(new string[] {
                            "urgent",
                            "false"});
#line 117
    testRunner.When("I send a POST request to \"/api/communication/secure-message\" with:", ((string)(null)), table626, "When ");
#line hidden
#line 124
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
    testRunner.And("message should be encrypted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
    testRunner.And("therapist should be notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Send bulk communication to multiple families")]
        [Xunit.TraitAttribute("FeatureTitle", "Communication Tools API Endpoints (FR-014)")]
        [Xunit.TraitAttribute("Description", "Send bulk communication to multiple families")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "communication")]
        [Xunit.TraitAttribute("Category", "bulk")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SendBulkCommunicationToMultipleFamilies()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "communication",
                    "bulk",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send bulk communication to multiple families", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table627 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table627.AddRow(new string[] {
                            "recipientType",
                            "active-caseload"});
                table627.AddRow(new string[] {
                            "channel",
                            "[\"email\", \"sms\"]"});
                table627.AddRow(new string[] {
                            "message",
                            "\"Clinic closed for holiday\""});
                table627.AddRow(new string[] {
                            "sendAt",
                            "\"2024-01-22T09:00:00Z\""});
                table627.AddRow(new string[] {
                            "trackOpens",
                            "true"});
#line 131
    testRunner.When("I send a POST request to \"/api/communication/bulk-message\" with:", ((string)(null)), table627, "When ");
#line hidden
#line 138
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
    testRunner.And("messages should be queued", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
    testRunner.And("delivery stats should be tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="List communication templates")]
        [Xunit.TraitAttribute("FeatureTitle", "Communication Tools API Endpoints (FR-014)")]
        [Xunit.TraitAttribute("Description", "List communication templates")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "communication")]
        [Xunit.TraitAttribute("Category", "templates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ListCommunicationTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "communication",
                    "templates",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List communication templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 144
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 145
    testRunner.When("I send a GET request to \"/api/communication/templates?category=parent\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table628 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table628.AddRow(new string[] {
                            "templateId",
                            "string"});
                table628.AddRow(new string[] {
                            "name",
                            "string"});
                table628.AddRow(new string[] {
                            "category",
                            "string"});
                table628.AddRow(new string[] {
                            "languages",
                            "array"});
                table628.AddRow(new string[] {
                            "variables",
                            "array"});
                table628.AddRow(new string[] {
                            "lastUsed",
                            "string"});
#line 147
    testRunner.And("the response should contain array of:", ((string)(null)), table628, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CommunicationToolsAPIEndpointsFR_014Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CommunicationToolsAPIEndpointsFR_014Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
