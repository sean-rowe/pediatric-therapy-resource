// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Communication
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ParentPortalFeature : object, Xunit.IClassFixture<ParentPortalFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "parent-portal.feature"
#line hidden
        
        public ParentPortalFeature(ParentPortalFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/communication", "Parent Portal", "  As a parent\n  I want to access my child\'s therapy information\n  So that I can s" +
                    "upport their progress and communicate with therapists", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the parent portal is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am logged in as parent \"Lisa Wilson\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table592 = new TechTalk.SpecFlow.Table(new string[] {
                        "Child Name",
                        "Services",
                        "Therapist"});
            table592.AddRow(new string[] {
                        "Emma Wilson",
                        "OT, Speech",
                        "Sarah Johnson"});
            table592.AddRow(new string[] {
                        "Jack Wilson",
                        "PT",
                        "Mike Chen"});
#line 9
    testRunner.And("I have children:", ((string)(null)), table592, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parent registration with access code")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Parent registration with access code")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ParentRegistrationWithAccessCode()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parent registration with access code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 17
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 18
      testRunner.Given("therapist sends portal invitation to \"robert.wilson@email.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
      testRunner.When("\"Robert Wilson\" receives invitation email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table593 = new TechTalk.SpecFlow.Table(new string[] {
                            "Content",
                            "Details"});
                table593.AddRow(new string[] {
                            "Access Code",
                            "Unique 8-character code"});
                table593.AddRow(new string[] {
                            "Registration Link",
                            "Expires in 48 hours"});
                table593.AddRow(new string[] {
                            "Student Connection",
                            "For Emma Wilson"});
#line 20
      testRunner.Then("email contains:", ((string)(null)), table593, "Then ");
#line hidden
#line 25
      testRunner.When("he registers with the access code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
      testRunner.Then("account is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
      testRunner.And("he has access to \"Emma Wilson\" information only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Parent login with 2FA")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Parent login with 2FA")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ParentLoginWith2FA()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parent login with 2FA", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 31
      testRunner.Given("parent has two-factor authentication enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
      testRunner.When("parent logs in with email and password", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
      testRunner.Then("SMS code is sent to registered phone", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
      testRunner.And("login requires code entry", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
      testRunner.And("session expires after 30 minutes of inactivity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Multiple parents access same student")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Multiple parents access same student")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MultipleParentsAccessSameStudent()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiple parents access same student", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 39
      testRunner.Given("\"Emma Wilson\" has two registered parents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
      testRunner.When("both parents access the portal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
      testRunner.Then("both see identical information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
      testRunner.And("both can communicate with therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
      testRunner.But("changes by one parent are visible to other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View session summaries")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "View session summaries")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewSessionSummaries()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View session summaries", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 49
      testRunner.Given("\"Emma Wilson\" had sessions this week", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
      testRunner.When("I view session history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table594 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "Therapist",
                            "Focus Area",
                            "Progress Note"});
                table594.AddRow(new string[] {
                            "2024-01-15",
                            "Sarah Johnson",
                            "Fine Motor",
                            "Worked on letter formation"});
                table594.AddRow(new string[] {
                            "2024-01-17",
                            "Amy Lee",
                            "Articulation",
                            "Practiced \'r\' sounds in words"});
#line 51
      testRunner.Then("I see parent-friendly summaries:", ((string)(null)), table594, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table595 = new TechTalk.SpecFlow.Table(new string[] {
                            "Restricted Info"});
                table595.AddRow(new string[] {
                            "Clinical diagnoses"});
                table595.AddRow(new string[] {
                            "Other student names"});
                table595.AddRow(new string[] {
                            "Detailed SOAP notes"});
#line 55
      testRunner.But("I cannot see:", ((string)(null)), table595, "But ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View goal progress")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "View goal progress")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewGoalProgress()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View goal progress", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 63
      testRunner.Given("\"Emma Wilson\" has active IEP goals", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 64
      testRunner.When("I view goals section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table596 = new TechTalk.SpecFlow.Table(new string[] {
                            "Goal Area",
                            "Current Level",
                            "Target",
                            "Progress"});
                table596.AddRow(new string[] {
                            "Handwriting",
                            "Forms 65%",
                            "Forms 80%",
                            "On Track"});
                table596.AddRow(new string[] {
                            "Speech Sounds",
                            "70% accurate",
                            "90%",
                            "Improving"});
#line 65
      testRunner.Then("I see simplified goal information:", ((string)(null)), table596, "Then ");
#line hidden
#line 69
      testRunner.And("visual progress bars", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
      testRunner.And("last updated dates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
      testRunner.But("not clinical measurement details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access progress reports")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Access progress reports")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessProgressReports()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access progress reports", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 75
      testRunner.Given("quarterly reports are available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
      testRunner.When("I view reports section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table597 = new TechTalk.SpecFlow.Table(new string[] {
                            "Report Type",
                            "Format",
                            "Content"});
                table597.AddRow(new string[] {
                            "Progress Summary",
                            "PDF",
                            "Quarter achievements"});
                table597.AddRow(new string[] {
                            "Home Activities",
                            "PDF",
                            "Recommended practice"});
                table597.AddRow(new string[] {
                            "Goal Update",
                            "PDF",
                            "IEP goal progress"});
#line 77
      testRunner.Then("I can download:", ((string)(null)), table597, "Then ");
#line hidden
#line 82
      testRunner.And("reports are watermarked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
      testRunner.And("download is logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View assigned home activities")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "View assigned home activities")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewAssignedHomeActivities()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View assigned home activities", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 88
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 89
      testRunner.Given("therapist assigned home practice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
      testRunner.When("I view home activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table598 = new TechTalk.SpecFlow.Table(new string[] {
                            "Activity",
                            "Frequency",
                            "Instructions",
                            "Demo"});
                table598.AddRow(new string[] {
                            "Pencil Exercises",
                            "Daily 5 min",
                            "Step-by-step guide",
                            "Video"});
                table598.AddRow(new string[] {
                            "Speech Practice",
                            "3x daily",
                            "Word list with audio",
                            "Audio"});
#line 91
      testRunner.Then("I see:", ((string)(null)), table598, "Then ");
#line hidden
#line 95
      testRunner.And("I can mark activities as completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
      testRunner.And("completion is visible to therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access resource library")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Access resource library")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessResourceLibrary()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access resource library", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 99
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 100
      testRunner.Given("general resources are available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
      testRunner.When("I browse resource library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table599 = new TechTalk.SpecFlow.Table(new string[] {
                            "Category",
                            "Resources"});
                table599.AddRow(new string[] {
                            "Fine Motor",
                            "15 activities, 5 videos"});
                table599.AddRow(new string[] {
                            "Speech Development",
                            "20 games, 10 printables"});
                table599.AddRow(new string[] {
                            "Sensory Activities",
                            "12 guides, 8 videos"});
#line 102
      testRunner.Then("I see categories:", ((string)(null)), table599, "Then ");
#line hidden
#line 107
      testRunner.And("resources are filtered by child\'s age", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
      testRunner.And("downloads are tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Watch instructional videos")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Watch instructional videos")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void WatchInstructionalVideos()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Watch instructional videos", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 112
      testRunner.Given("therapist shared technique videos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 113
      testRunner.When("I access video library", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table600 = new TechTalk.SpecFlow.Table(new string[] {
                            "Video Title",
                            "Duration",
                            "Therapist"});
                table600.AddRow(new string[] {
                            "Proper Pencil Grip",
                            "3:45",
                            "Sarah Johnson"});
                table600.AddRow(new string[] {
                            "Making Speech Practice Fun",
                            "5:20",
                            "Amy Lee"});
#line 114
      testRunner.Then("videos include:", ((string)(null)), table600, "Then ");
#line hidden
#line 118
      testRunner.And("videos track completion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
      testRunner.And("captions are available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Send message to therapist")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Send message to therapist")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SendMessageToTherapist()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send message to therapist", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 124
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 125
      testRunner.Given("I have a question about home practice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table601 = new TechTalk.SpecFlow.Table(new string[] {
                            "To",
                            "Sarah Johnson"});
                table601.AddRow(new string[] {
                            "Subject",
                            "Question about pencil grip"});
                table601.AddRow(new string[] {
                            "Message",
                            "Emma is holding the pencil differently"});
#line 126
      testRunner.When("I send message:", ((string)(null)), table601, "When ");
#line hidden
#line 130
      testRunner.Then("message is delivered to therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
      testRunner.And("I receive confirmation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
      testRunner.And("therapist has 48 hours to respond", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
      testRunner.And("conversation is threaded", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Request appointment")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Request appointment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RequestAppointment()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Request appointment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 137
      testRunner.Given("I need to discuss concerns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table602 = new TechTalk.SpecFlow.Table(new string[] {
                            "Therapist",
                            "Sarah Johnson"});
                table602.AddRow(new string[] {
                            "Preferred Times",
                            "Weekdays after 3 PM"});
                table602.AddRow(new string[] {
                            "Meeting Type",
                            "Phone call"});
                table602.AddRow(new string[] {
                            "Topics",
                            "Progress concerns"});
#line 138
      testRunner.When("I request meeting with:", ((string)(null)), table602, "When ");
#line hidden
#line 143
      testRunner.Then("request is sent to therapist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
      testRunner.And("therapist proposes available times", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
      testRunner.And("confirmation includes video link if virtual", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Emergency communication")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Emergency communication")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EmergencyCommunication()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Emergency communication", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 148
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 149
      testRunner.Given("urgent situation arose", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 150
      testRunner.When("I mark message as urgent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 151
      testRunner.Then("therapist receives immediate notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
      testRunner.And("backup contact is notified if no response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
      testRunner.And("school is alerted per protocol", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update contact information")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Update contact information")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateContactInformation()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update contact information", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 158
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 159
      testRunner.Given("my phone number changed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table603 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "New Value"});
                table603.AddRow(new string[] {
                            "Phone",
                            "555-0123"});
                table603.AddRow(new string[] {
                            "Alt Phone",
                            "555-0456"});
#line 160
      testRunner.When("I update profile:", ((string)(null)), table603, "When ");
#line hidden
#line 164
      testRunner.Then("changes are saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 165
      testRunner.And("therapist is notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 166
      testRunner.And("verification is required for email changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Manage consent forms")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Manage consent forms")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ManageConsentForms()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manage consent forms", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 169
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 170
      testRunner.Given("new consent forms are required", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 171
      testRunner.When("I view pending forms", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table604 = new TechTalk.SpecFlow.Table(new string[] {
                            "Form",
                            "Due Date",
                            "Status"});
                table604.AddRow(new string[] {
                            "Photo Release",
                            "2024-02-01",
                            "Pending"});
                table604.AddRow(new string[] {
                            "Field Trip Permission",
                            "2024-02-15",
                            "Pending"});
#line 172
      testRunner.Then("I see:", ((string)(null)), table604, "Then ");
#line hidden
#line 176
      testRunner.And("I can electronically sign", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
      testRunner.And("signed forms are timestamped", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
      testRunner.And("copies are available for download", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View scheduling calendar")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "View scheduling calendar")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewSchedulingCalendar()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View scheduling calendar", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 181
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 182
      testRunner.Given("\"Emma Wilson\" has recurring sessions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 183
      testRunner.When("I view calendar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table605 = new TechTalk.SpecFlow.Table(new string[] {
                            "Day",
                            "Time",
                            "Service",
                            "Location"});
                table605.AddRow(new string[] {
                            "Monday",
                            "9:00 AM",
                            "OT",
                            "OT Room"});
                table605.AddRow(new string[] {
                            "Thursday",
                            "1:30 PM",
                            "Speech",
                            "Speech Room"});
#line 184
      testRunner.Then("I see:", ((string)(null)), table605, "Then ");
#line hidden
#line 188
      testRunner.And("upcoming changes are highlighted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
      testRunner.And("I can request schedule changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access restricted by custody agreement")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Access restricted by custody agreement")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessRestrictedByCustodyAgreement()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access restricted by custody agreement", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 194
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 195
      testRunner.Given("custody restricts information sharing", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 196
      testRunner.When("non-custodial parent attempts access", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 197
      testRunner.Then("access is denied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 198
      testRunner.And("attempt is logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
      testRunner.And("appropriate parties are notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Information sharing preferences")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Information sharing preferences")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void InformationSharingPreferences()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Information sharing preferences", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 202
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 203
      testRunner.Given("I have two children in therapy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table606 = new TechTalk.SpecFlow.Table(new string[] {
                            "Setting",
                            "Choice"});
                table606.AddRow(new string[] {
                            "Share progress with spouse",
                            "Yes"});
                table606.AddRow(new string[] {
                            "Include in group emails",
                            "No"});
                table606.AddRow(new string[] {
                            "Allow therapist photos",
                            "Yes, internal only"});
#line 204
      testRunner.When("I set privacy preferences:", ((string)(null)), table606, "When ");
#line hidden
#line 209
      testRunner.Then("preferences are applied", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
      testRunner.And("override any defaults", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Data export request")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Data export request")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DataExportRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Data export request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 213
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 214
      testRunner.Given("FERPA rights", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 215
      testRunner.When("I request full data export", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 216
      testRunner.Then("request is processed within 45 days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table607 = new TechTalk.SpecFlow.Table(new string[] {
                            "Data Type"});
                table607.AddRow(new string[] {
                            "Session records"});
                table607.AddRow(new string[] {
                            "Communications"});
                table607.AddRow(new string[] {
                            "Progress reports"});
                table607.AddRow(new string[] {
                            "Consent forms"});
#line 217
      testRunner.And("export includes all:", ((string)(null)), table607, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Configure notifications")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Configure notifications")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConfigureNotifications()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure notifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 227
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 228
      testRunner.Given("I want specific updates", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table608 = new TechTalk.SpecFlow.Table(new string[] {
                            "Event",
                            "Email",
                            "SMS",
                            "Push"});
                table608.AddRow(new string[] {
                            "Session completed",
                            "Yes",
                            "No",
                            "Yes"});
                table608.AddRow(new string[] {
                            "New message",
                            "Yes",
                            "Yes",
                            "Yes"});
                table608.AddRow(new string[] {
                            "Progress report ready",
                            "Yes",
                            "No",
                            "Yes"});
                table608.AddRow(new string[] {
                            "Schedule change",
                            "Yes",
                            "Yes",
                            "Yes"});
#line 229
      testRunner.When("I set notification preferences:", ((string)(null)), table608, "When ");
#line hidden
#line 235
      testRunner.Then("preferences are saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 236
      testRunner.And("notifications follow settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Weekly summary email")]
        [Xunit.TraitAttribute("FeatureTitle", "Parent Portal")]
        [Xunit.TraitAttribute("Description", "Weekly summary email")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void WeeklySummaryEmail()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Weekly summary email", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 239
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 240
      testRunner.Given("I opted into weekly summaries", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 241
      testRunner.When("Friday evening arrives", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table609 = new TechTalk.SpecFlow.Table(new string[] {
                            "Section",
                            "Content"});
                table609.AddRow(new string[] {
                            "Sessions This Week",
                            "3 completed, 0 missed"});
                table609.AddRow(new string[] {
                            "Progress Highlights",
                            "New milestone reached"});
                table609.AddRow(new string[] {
                            "Upcoming Week",
                            "3 sessions scheduled"});
                table609.AddRow(new string[] {
                            "Home Practice",
                            "80% completion rate"});
                table609.AddRow(new string[] {
                            "Messages",
                            "1 unread from therapist"});
#line 242
      testRunner.Then("I receive email with:", ((string)(null)), table609, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ParentPortalFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ParentPortalFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
