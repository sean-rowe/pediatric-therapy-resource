// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Education
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ClinicalSupervisionAndEducationAPIEndpointsFR_036Feature : object, Xunit.IClassFixture<ClinicalSupervisionAndEducationAPIEndpointsFR_036Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "clinical-supervision.feature"
#line hidden
        
        public ClinicalSupervisionAndEducationAPIEndpointsFR_036Feature(ClinicalSupervisionAndEducationAPIEndpointsFR_036Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/education", "Clinical Supervision and Education API Endpoints (FR-036)", "  As a clinical educator or supervisor\n  I want comprehensive supervision tools\n " +
                    " So that I can effectively train future therapists", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"supervisor@university.edu\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("I have clinical instructor credentials", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add student clinician to supervision")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Add student clinician to supervision")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "student-management")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AddStudentClinicianToSupervision()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "student-management",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add student clinician to supervision", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table794 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table794.AddRow(new string[] {
                            "studentEmail",
                            "student@university.edu"});
                table794.AddRow(new string[] {
                            "studentName",
                            "Ashley Chen"});
                table794.AddRow(new string[] {
                            "program",
                            "MS-SLP"});
                table794.AddRow(new string[] {
                            "semester",
                            "Spring 2024"});
                table794.AddRow(new string[] {
                            "placementSite",
                            "Pediatric Therapy Clinic"});
                table794.AddRow(new string[] {
                            "startDate",
                            "2024-01-15"});
                table794.AddRow(new string[] {
                            "endDate",
                            "2024-05-15"});
                table794.AddRow(new string[] {
                            "requiredHours",
                            "150"});
                table794.AddRow(new string[] {
                            "supervisorRatio",
                            "25%"});
#line 14
    testRunner.When("I send a POST request to \"/api/supervision/students\" with:", ((string)(null)), table794, "When ");
#line hidden
#line 25
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table795 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table795.AddRow(new string[] {
                            "supervisionId",
                            "string"});
                table795.AddRow(new string[] {
                            "competencyFramework",
                            "object"});
                table795.AddRow(new string[] {
                            "documentTemplates",
                            "array"});
#line 26
    testRunner.And("the response should contain:", ((string)(null)), table795, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get student competency assessment")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Get student competency assessment")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "competency-tracking")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetStudentCompetencyAssessment()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "competency-tracking",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get student competency assessment", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 35
    testRunner.Given("student \"student-123\" is under supervision", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
    testRunner.When("I send a GET request to \"/api/supervision/students/student-123/competencies\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table796 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table796.AddRow(new string[] {
                            "clinicalSkills",
                            "object"});
                table796.AddRow(new string[] {
                            "professionalSkills",
                            "object"});
                table796.AddRow(new string[] {
                            "criticalThinking",
                            "object"});
                table796.AddRow(new string[] {
                            "culturalCompetence",
                            "object"});
                table796.AddRow(new string[] {
                            "overallProgress",
                            "string"});
                table796.AddRow(new string[] {
                            "strengthAreas",
                            "array"});
                table796.AddRow(new string[] {
                            "growthAreas",
                            "array"});
#line 38
    testRunner.And("the response should contain:", ((string)(null)), table796, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update competency ratings")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Update competency ratings")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "evaluation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateCompetencyRatings()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "evaluation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update competency ratings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 51
    testRunner.Given("student \"student-123\" is under supervision", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table797 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table797.AddRow(new string[] {
                            "evaluationType",
                            "midterm"});
                table797.AddRow(new string[] {
                            "clinicalSkills.assessment",
                            "emerging"});
                table797.AddRow(new string[] {
                            "clinicalSkills.intervention",
                            "developing"});
                table797.AddRow(new string[] {
                            "clinicalSkills.documentation",
                            "competent"});
                table797.AddRow(new string[] {
                            "professionalSkills.ethics",
                            "competent"});
                table797.AddRow(new string[] {
                            "evidence",
                            "[\"video-review\", \"observation\"]"});
                table797.AddRow(new string[] {
                            "comments",
                            "Shows good rapport building"});
#line 52
    testRunner.When("I send a POST request to \"/api/supervision/students/student-123/competencies\" wit" +
                        "h:", ((string)(null)), table797, "When ");
#line hidden
#line 61
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
    testRunner.And("competency progression should be tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And("student should receive notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record direct observation session")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Record direct observation session")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "direct-observation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordDirectObservationSession()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "direct-observation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record direct observation session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 67
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table798 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table798.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table798.AddRow(new string[] {
                            "observationDate",
                            "2024-01-22T10:00:00Z"});
                table798.AddRow(new string[] {
                            "duration",
                            "60"});
                table798.AddRow(new string[] {
                            "sessionType",
                            "individual-therapy"});
                table798.AddRow(new string[] {
                            "clientAge",
                            "5"});
                table798.AddRow(new string[] {
                            "disorderType",
                            "articulation"});
                table798.AddRow(new string[] {
                            "observationType",
                            "in-person"});
                table798.AddRow(new string[] {
                            "competenciesObserved",
                            "[\"rapport\", \"clinical-skills\"]"});
#line 68
    testRunner.When("I send a POST request to \"/api/supervision/observations\" with:", ((string)(null)), table798, "When ");
#line hidden
#line 78
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table799 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table799.AddRow(new string[] {
                            "observationId",
                            "string"});
                table799.AddRow(new string[] {
                            "feedbackForm",
                            "string"});
                table799.AddRow(new string[] {
                            "signatureRequired",
                            "boolean"});
#line 79
    testRunner.And("the response should contain:", ((string)(null)), table799, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Provide observation feedback")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Provide observation feedback")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "feedback")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ProvideObservationFeedback()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "feedback",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Provide observation feedback", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 87
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 88
    testRunner.Given("observation \"obs-123\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table800 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table800.AddRow(new string[] {
                            "strengths",
                            "[\"Clear instructions\", \"Good pacing\"]"});
                table800.AddRow(new string[] {
                            "areasForGrowth",
                            "[\"Data collection timing\"]"});
                table800.AddRow(new string[] {
                            "specificExamples",
                            "[{\"time\": \"10:15\", \"observation\": \"Nice use of wait time\"}]"});
                table800.AddRow(new string[] {
                            "actionItems",
                            "[\"Practice data collection during play\"]"});
                table800.AddRow(new string[] {
                            "supervisorReflection",
                            "Student showing good progress"});
                table800.AddRow(new string[] {
                            "nextObservationFocus",
                            "Data collection accuracy"});
#line 89
    testRunner.When("I send a POST request to \"/api/supervision/observations/obs-123/feedback\" with:", ((string)(null)), table800, "When ");
#line hidden
#line 97
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
    testRunner.And("feedback should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
    testRunner.And("student should have access to review", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create video review session")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Create video review session")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "video-analysis")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateVideoReviewSession()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "video-analysis",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create video review session", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 103
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table801 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table801.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table801.AddRow(new string[] {
                            "videoUrl",
                            "secure-video-link"});
                table801.AddRow(new string[] {
                            "sessionDate",
                            "2024-01-20"});
                table801.AddRow(new string[] {
                            "duration",
                            "30"});
                table801.AddRow(new string[] {
                            "reviewScheduled",
                            "2024-01-23T14:00:00Z"});
                table801.AddRow(new string[] {
                            "focusAreas",
                            "[\"prompting\", \"reinforcement\"]"});
#line 104
    testRunner.When("I send a POST request to \"/api/supervision/video-reviews\" with:", ((string)(null)), table801, "When ");
#line hidden
#line 112
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
    testRunner.And("video should be accessible for annotation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
    testRunner.And("review session should be scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add video annotations")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Add video annotations")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "video-annotation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AddVideoAnnotations()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "video-annotation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add video annotations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 118
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 119
    testRunner.Given("video review \"review-123\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table802 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table802.AddRow(new string[] {
                            "timestamp",
                            "125"});
                table802.AddRow(new string[] {
                            "annotation",
                            "Excellent use of visual support"});
                table802.AddRow(new string[] {
                            "competencyTag",
                            "therapeutic-use-of-self"});
                table802.AddRow(new string[] {
                            "type",
                            "strength"});
#line 120
    testRunner.When("I send a POST request to \"/api/supervision/video-reviews/review-123/annotations\" " +
                        "with:", ((string)(null)), table802, "When ");
#line hidden
#line 126
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
    testRunner.And("annotation should be saved at timestamp", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
    testRunner.And("be visible during playback", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get supervision hours summary")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Get supervision hours summary")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "hour-tracking")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetSupervisionHoursSummary()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "hour-tracking",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get supervision hours summary", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 132
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 133
    testRunner.Given("student \"student-123\" has logged hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
    testRunner.When("I send a GET request to \"/api/supervision/students/student-123/hours\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 135
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table803 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table803.AddRow(new string[] {
                            "directObservation",
                            "number"});
                table803.AddRow(new string[] {
                            "indirectSupervision",
                            "number"});
                table803.AddRow(new string[] {
                            "totalHours",
                            "number"});
                table803.AddRow(new string[] {
                            "requiredHours",
                            "number"});
                table803.AddRow(new string[] {
                            "percentComplete",
                            "number"});
                table803.AddRow(new string[] {
                            "hoursByCategory",
                            "object"});
                table803.AddRow(new string[] {
                            "signedHours",
                            "array"});
#line 136
    testRunner.And("the response should contain:", ((string)(null)), table803, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Log supervision hours")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Log supervision hours")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "hour-logging")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void LogSupervisionHours()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "hour-logging",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Log supervision hours", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 148
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table804 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table804.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table804.AddRow(new string[] {
                            "date",
                            "2024-01-22"});
                table804.AddRow(new string[] {
                            "startTime",
                            "10:00"});
                table804.AddRow(new string[] {
                            "endTime",
                            "11:30"});
                table804.AddRow(new string[] {
                            "supervisionType",
                            "direct"});
                table804.AddRow(new string[] {
                            "activities",
                            "[\"observation\", \"feedback\"]"});
                table804.AddRow(new string[] {
                            "clientPresent",
                            "true"});
                table804.AddRow(new string[] {
                            "supervisorSignature",
                            "digital-signature-id"});
#line 149
    testRunner.When("I send a POST request to \"/api/supervision/hours\" with:", ((string)(null)), table804, "When ");
#line hidden
#line 159
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 160
    testRunner.And("hours should be calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
    testRunner.And("require student acknowledgment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Submit case presentation")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Submit case presentation")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "case-study")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubmitCasePresentation()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "case-study",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit case presentation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 165
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table805 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table805.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table805.AddRow(new string[] {
                            "presentationDate",
                            "2024-02-15"});
                table805.AddRow(new string[] {
                            "clientInitials",
                            "J.D."});
                table805.AddRow(new string[] {
                            "diagnosis",
                            "childhood-apraxia"});
                table805.AddRow(new string[] {
                            "presentationFormat",
                            "oral-with-slides"});
                table805.AddRow(new string[] {
                            "materialsSubmitted",
                            "[\"slides.pdf\", \"handout.pdf\"]"});
                table805.AddRow(new string[] {
                            "peerReviewers",
                            "3"});
#line 166
    testRunner.When("I send a POST request to \"/api/supervision/case-presentations\" with:", ((string)(null)), table805, "When ");
#line hidden
#line 175
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 176
    testRunner.And("presentation should be scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
    testRunner.And("evaluation rubric should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate supervision report")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Generate supervision report")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "reporting")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateSupervisionReport()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "reporting",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate supervision report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 181
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 182
    testRunner.Given("student \"student-123\" at midterm", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 183
    testRunner.When("I send a GET request to \"/api/supervision/students/student-123/reports?type=midte" +
                        "rm\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 184
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table806 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table806.AddRow(new string[] {
                            "reportUrl",
                            "string"});
                table806.AddRow(new string[] {
                            "competencySummary",
                            "object"});
                table806.AddRow(new string[] {
                            "hoursSummary",
                            "object"});
                table806.AddRow(new string[] {
                            "strengthsNoted",
                            "array"});
                table806.AddRow(new string[] {
                            "improvementPlan",
                            "object"});
                table806.AddRow(new string[] {
                            "supervisorComments",
                            "string"});
                table806.AddRow(new string[] {
                            "signatureFields",
                            "array"});
#line 185
    testRunner.And("the response should contain:", ((string)(null)), table806, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create learning contract")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Create learning contract")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "planning")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateLearningContract()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "planning",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create learning contract", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 197
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table807 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table807.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table807.AddRow(new string[] {
                            "semester",
                            "Spring 2024"});
                table807.AddRow(new string[] {
                            "learningGoals",
                            "[\"Improve assessment skills\", \"Develop treatment planning\"]"});
                table807.AddRow(new string[] {
                            "activities",
                            "[\"Weekly observations\", \"Case presentations\"]"});
                table807.AddRow(new string[] {
                            "evaluationMethod",
                            "[\"Direct observation\", \"Portfolio review\"]"});
                table807.AddRow(new string[] {
                            "timeline",
                            "{\"week4\": \"First observation\", \"week8\": \"Midterm eval\"}"});
#line 198
    testRunner.When("I send a POST request to \"/api/supervision/learning-contracts\" with:", ((string)(null)), table807, "When ");
#line hidden
#line 206
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 207
    testRunner.And("contract should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
    testRunner.And("require signatures from both parties", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create remediation plan")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Create remediation plan")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "remediation")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateRemediationPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "remediation",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create remediation plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 212
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 213
    testRunner.Given("student \"student-123\" struggling with competencies", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table808 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table808.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table808.AddRow(new string[] {
                            "concernAreas",
                            "[\"clinical-reasoning\", \"documentation\"]"});
                table808.AddRow(new string[] {
                            "specificObjectives",
                            "[\"Complete decision tree exercises\"]"});
                table808.AddRow(new string[] {
                            "additionalSupport",
                            "[\"Extra supervision\", \"Peer mentoring\"]"});
                table808.AddRow(new string[] {
                            "timeline",
                            "4-weeks"});
                table808.AddRow(new string[] {
                            "successCriteria",
                            "[\"80% accuracy on assessments\"]"});
#line 214
    testRunner.When("I send a POST request to \"/api/supervision/remediation-plans\" with:", ((string)(null)), table808, "When ");
#line hidden
#line 222
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 223
    testRunner.And("remediation tracking should begin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 224
    testRunner.And("university should be notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get supervision resources")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Get supervision resources")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "resources")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetSupervisionResources()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "resources",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get supervision resources", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 228
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 229
    testRunner.When("I send a GET request to \"/api/supervision/resources?category=evaluation-tools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 230
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table809 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table809.AddRow(new string[] {
                            "evaluationForms",
                            "array"});
                table809.AddRow(new string[] {
                            "rubrics",
                            "array"});
                table809.AddRow(new string[] {
                            "learningModules",
                            "array"});
                table809.AddRow(new string[] {
                            "videoExamples",
                            "array"});
                table809.AddRow(new string[] {
                            "bestPractices",
                            "array"});
#line 231
    testRunner.And("the response should contain:", ((string)(null)), table809, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Schedule group supervision")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Schedule group supervision")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "group")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ScheduleGroupSupervision()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "group",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Schedule group supervision", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 241
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table810 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table810.AddRow(new string[] {
                            "studentIds",
                            "[\"student-123\", \"student-456\"]"});
                table810.AddRow(new string[] {
                            "date",
                            "2024-01-25T13:00:00Z"});
                table810.AddRow(new string[] {
                            "duration",
                            "90"});
                table810.AddRow(new string[] {
                            "topic",
                            "Ethics in pediatric practice"});
                table810.AddRow(new string[] {
                            "format",
                            "case-discussion"});
                table810.AddRow(new string[] {
                            "materials",
                            "[\"ethics-scenarios.pdf\"]"});
#line 242
    testRunner.When("I send a POST request to \"/api/supervision/group-supervision\" with:", ((string)(null)), table810, "When ");
#line hidden
#line 250
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 251
    testRunner.And("meeting should be scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 252
    testRunner.And("students should receive invitation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 253
    testRunner.And("hours should be pre-allocated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Submit portfolio for review")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Submit portfolio for review")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "supervision")]
        [Xunit.TraitAttribute("Category", "portfolio")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubmitPortfolioForReview()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "supervision",
                    "portfolio",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit portfolio for review", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 257
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table811 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table811.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table811.AddRow(new string[] {
                            "portfolioItems",
                            "[\"assessment-video\", \"treatment-plan\", \"progress-note\"]"});
                table811.AddRow(new string[] {
                            "reflections",
                            "[\"growth-reflection.pdf\"]"});
                table811.AddRow(new string[] {
                            "competencyEvidence",
                            "{\"assessment\": [\"video1\", \"report1\"]}"});
                table811.AddRow(new string[] {
                            "submissionType",
                            "final"});
#line 258
    testRunner.When("I send a POST request to \"/api/supervision/portfolio-reviews\" with:", ((string)(null)), table811, "When ");
#line hidden
#line 265
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 266
    testRunner.And("portfolio should be queued for review", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 267
    testRunner.And("evaluation timeline should be set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Comprehensive competency tracking and progression monitoring for student clinicia" +
            "ns")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Comprehensive competency tracking and progression monitoring for student clinicia" +
            "ns")]
        [Xunit.TraitAttribute("Category", "competency-tracking")]
        [Xunit.TraitAttribute("Category", "skill-development")]
        [Xunit.TraitAttribute("Category", "clinical-education")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ComprehensiveCompetencyTrackingAndProgressionMonitoringForStudentClinicians()
        {
            string[] tagsOfScenario = new string[] {
                    "competency-tracking",
                    "skill-development",
                    "clinical-education",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comprehensive competency tracking and progression monitoring for student clinicia" +
                    "ns", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 271
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 272
    testRunner.Given("I am supervising graduate student \"Ashley Chen\" in pediatric speech therapy place" +
                        "ment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 273
    testRunner.And("Ashley is in her second semester of clinical practice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 274
    testRunner.When("I conduct systematic competency assessment", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table812 = new TechTalk.SpecFlow.Table(new string[] {
                            "Competency Domain",
                            "Specific Skills",
                            "Ashley\'s Level",
                            "Evidence Required"});
                table812.AddRow(new string[] {
                            "Clinical Skills",
                            "Assessment administration",
                            "Emerging",
                            "Direct observation"});
                table812.AddRow(new string[] {
                            "",
                            "Intervention planning",
                            "Developing",
                            "Treatment plans"});
                table812.AddRow(new string[] {
                            "",
                            "Data collection",
                            "Competent",
                            "Session documentation"});
                table812.AddRow(new string[] {
                            "",
                            "Progress monitoring",
                            "Emerging",
                            "Chart reviews"});
                table812.AddRow(new string[] {
                            "Professional Skills",
                            "Ethical decision-making",
                            "Competent",
                            "Case discussions"});
                table812.AddRow(new string[] {
                            "",
                            "Communication with families",
                            "Developing",
                            "Parent meetings"});
                table812.AddRow(new string[] {
                            "",
                            "Collaboration with team",
                            "Competent",
                            "IEP participation"});
                table812.AddRow(new string[] {
                            "",
                            "Documentation quality",
                            "Emerging",
                            "Note reviews"});
                table812.AddRow(new string[] {
                            "Critical Thinking",
                            "Clinical reasoning",
                            "Developing",
                            "Case presentations"});
                table812.AddRow(new string[] {
                            "",
                            "Problem-solving",
                            "Emerging",
                            "Difficult cases"});
                table812.AddRow(new string[] {
                            "",
                            "Evidence-based practice",
                            "Developing",
                            "Research integration"});
                table812.AddRow(new string[] {
                            "",
                            "Self-reflection",
                            "Competent",
                            "Supervision discussions"});
#line 275
    testRunner.And("I evaluate her across all required domains:", ((string)(null)), table812, "And ");
#line hidden
                TechTalk.SpecFlow.Table table813 = new TechTalk.SpecFlow.Table(new string[] {
                            "Tracking Element",
                            "Implementation"});
                table813.AddRow(new string[] {
                            "Progression over time",
                            "Weekly competency ratings"});
                table813.AddRow(new string[] {
                            "Evidence documentation",
                            "Link specific examples to ratings"});
                table813.AddRow(new string[] {
                            "Growth trajectory",
                            "Predict readiness for independence"});
                table813.AddRow(new string[] {
                            "Targeted learning",
                            "Focus on emerging/developing areas"});
#line 289
    testRunner.Then("comprehensive tracking should monitor:", ((string)(null)), table813, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table814 = new TechTalk.SpecFlow.Table(new string[] {
                            "Development Support",
                            "Strategy"});
                table814.AddRow(new string[] {
                            "Targeted learning",
                            "Specific skill-building activities"});
                table814.AddRow(new string[] {
                            "Progressive challenges",
                            "Gradually increase complexity"});
                table814.AddRow(new string[] {
                            "Mentorship",
                            "Pair with experienced clinicians"});
                table814.AddRow(new string[] {
                            "Resource access",
                            "Specialized training materials"});
#line 295
    testRunner.And("competency development should include:", ((string)(null)), table814, "And ");
#line hidden
#line 301
    testRunner.When("Ashley shows improvement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table815 = new TechTalk.SpecFlow.Table(new string[] {
                            "Decision Factor",
                            "Requirement"});
                table815.AddRow(new string[] {
                            "Consistency",
                            "Demonstrates skill across multiple cases"});
                table815.AddRow(new string[] {
                            "Independence",
                            "Performs with minimal guidance"});
                table815.AddRow(new string[] {
                            "Quality",
                            "Meets professional standards"});
                table815.AddRow(new string[] {
                            "Safety",
                            "Makes sound clinical decisions"});
#line 302
    testRunner.Then("advancement decisions should consider:", ((string)(null)), table815, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table816 = new TechTalk.SpecFlow.Table(new string[] {
                            "Portfolio Element",
                            "Documentation"});
                table816.AddRow(new string[] {
                            "Skill demonstrations",
                            "Video examples of competencies"});
                table816.AddRow(new string[] {
                            "Written work",
                            "Case studies and reports"});
                table816.AddRow(new string[] {
                            "Reflection papers",
                            "Self-assessment and growth plans"});
                table816.AddRow(new string[] {
                            "Supervisor feedback",
                            "Detailed progression notes"});
#line 308
    testRunner.And("competency portfolio should include:", ((string)(null)), table816, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Comprehensive video review and annotation system for clinical skill development")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Comprehensive video review and annotation system for clinical skill development")]
        [Xunit.TraitAttribute("Category", "video-review")]
        [Xunit.TraitAttribute("Category", "clinical-feedback")]
        [Xunit.TraitAttribute("Category", "reflective-practice")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ComprehensiveVideoReviewAndAnnotationSystemForClinicalSkillDevelopment()
        {
            string[] tagsOfScenario = new string[] {
                    "video-review",
                    "clinical-feedback",
                    "reflective-practice",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comprehensive video review and annotation system for clinical skill development", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 316
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 317
    testRunner.Given("student clinician \"Marcus Rodriguez\" recorded therapy session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 318
    testRunner.And("video contains 30-minute pediatric language session", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 319
    testRunner.When("I access the secure video review platform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 320
    testRunner.And("I prepare for systematic analysis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table817 = new TechTalk.SpecFlow.Table(new string[] {
                            "Annotation Feature",
                            "Functionality"});
                table817.AddRow(new string[] {
                            "Timestamp markers",
                            "Flag specific moments for discussion"});
                table817.AddRow(new string[] {
                            "Text comments",
                            "Add detailed observations"});
                table817.AddRow(new string[] {
                            "Drawing tools",
                            "Highlight positioning or materials"});
                table817.AddRow(new string[] {
                            "Competency tags",
                            "Link observations to skills"});
                table817.AddRow(new string[] {
                            "Rating scales",
                            "Score specific competencies"});
#line 321
    testRunner.Then("I should be able to use comprehensive annotation tools:", ((string)(null)), table817, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table818 = new TechTalk.SpecFlow.Table(new string[] {
                            "Review Category",
                            "Focus Areas"});
                table818.AddRow(new string[] {
                            "Clinical skills",
                            "Assessment technique, intervention quality"});
                table818.AddRow(new string[] {
                            "Interpersonal skills",
                            "Rapport building, communication"});
                table818.AddRow(new string[] {
                            "Professional behavior",
                            "Ethics, documentation, safety"});
                table818.AddRow(new string[] {
                            "Technical competence",
                            "Use of materials, data collection"});
#line 328
    testRunner.And("video review should cover:", ((string)(null)), table818, "And ");
#line hidden
#line 334
    testRunner.When("I create timestamp annotations", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table819 = new TechTalk.SpecFlow.Table(new string[] {
                            "Annotation Element",
                            "Content"});
                table819.AddRow(new string[] {
                            "Specific timestamp",
                            "5:32 - \"Nice use of wait time\""});
                table819.AddRow(new string[] {
                            "Competency connection",
                            "Links to \"Therapeutic use of self\""});
                table819.AddRow(new string[] {
                            "Feedback type",
                            "Strength, growth area, question"});
                table819.AddRow(new string[] {
                            "Actionable suggestion",
                            "Specific improvement strategy"});
#line 335
    testRunner.Then("each annotation should include:", ((string)(null)), table819, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table820 = new TechTalk.SpecFlow.Table(new string[] {
                            "Collaboration Feature",
                            "Implementation"});
                table820.AddRow(new string[] {
                            "Student self-reflection",
                            "Marcus adds own observations"});
                table820.AddRow(new string[] {
                            "Peer review",
                            "Other students provide feedback"});
                table820.AddRow(new string[] {
                            "Supervisor guidance",
                            "Leading questions and prompts"});
                table820.AddRow(new string[] {
                            "Action planning",
                            "Specific goals for next session"});
#line 341
    testRunner.And("collaborative review should enable:", ((string)(null)), table820, "And ");
#line hidden
#line 347
    testRunner.When("video review is complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table821 = new TechTalk.SpecFlow.Table(new string[] {
                            "Learning Outcome",
                            "Achievement"});
                table821.AddRow(new string[] {
                            "Self-awareness",
                            "Student recognizes own performance"});
                table821.AddRow(new string[] {
                            "Skill refinement",
                            "Specific techniques to improve"});
                table821.AddRow(new string[] {
                            "Professional growth",
                            "Understanding of best practices"});
                table821.AddRow(new string[] {
                            "Confidence building",
                            "Recognition of strengths"});
#line 348
    testRunner.Then("learning outcomes should include:", ((string)(null)), table821, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table822 = new TechTalk.SpecFlow.Table(new string[] {
                            "Library Feature",
                            "Organization"});
                table822.AddRow(new string[] {
                            "Skill exemplars",
                            "Best practice examples"});
                table822.AddRow(new string[] {
                            "Common challenges",
                            "Learning from difficulties"});
                table822.AddRow(new string[] {
                            "Progress timeline",
                            "Student growth over semester"});
                table822.AddRow(new string[] {
                            "Privacy protection",
                            "Secure, limited access"});
#line 354
    testRunner.And("video library should maintain:", ((string)(null)), table822, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Comprehensive supervision hour tracking and accreditation compliance")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Comprehensive supervision hour tracking and accreditation compliance")]
        [Xunit.TraitAttribute("Category", "supervision-hours")]
        [Xunit.TraitAttribute("Category", "accreditation-compliance")]
        [Xunit.TraitAttribute("Category", "clinical-education")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ComprehensiveSupervisionHourTrackingAndAccreditationCompliance()
        {
            string[] tagsOfScenario = new string[] {
                    "supervision-hours",
                    "accreditation-compliance",
                    "clinical-education",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Comprehensive supervision hour tracking and accreditation compliance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 362
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 363
    testRunner.Given("I supervise multiple graduate students requiring detailed hour documentation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 364
    testRunner.And("university accreditation requires specific supervision ratios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 365
    testRunner.When("I manage supervision hour compliance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table823 = new TechTalk.SpecFlow.Table(new string[] {
                            "Supervision Type",
                            "Ratio Requirement",
                            "Documentation Needed"});
                table823.AddRow(new string[] {
                            "Direct observation",
                            "25% of student hours minimum",
                            "Real-time supervision"});
                table823.AddRow(new string[] {
                            "Indirect supervision",
                            "Discussion, planning, feedback",
                            "Structured meetings"});
                table823.AddRow(new string[] {
                            "Group supervision",
                            "Max 3 students per session",
                            "Group learning focus"});
                table823.AddRow(new string[] {
                            "Video review",
                            "Counts as direct when live",
                            "Annotation records"});
#line 366
    testRunner.Then("I should track multiple supervision types:", ((string)(null)), table823, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table824 = new TechTalk.SpecFlow.Table(new string[] {
                            "Hour Documentation",
                            "Required Information"});
                table824.AddRow(new string[] {
                            "Date and time",
                            "Precise start/end times"});
                table824.AddRow(new string[] {
                            "Supervision type",
                            "Direct, indirect, group"});
                table824.AddRow(new string[] {
                            "Student names",
                            "All students involved"});
                table824.AddRow(new string[] {
                            "Activities conducted",
                            "Specific supervision focus"});
                table824.AddRow(new string[] {
                            "Client presence",
                            "Whether clients were present"});
                table824.AddRow(new string[] {
                            "Topics covered",
                            "Competencies addressed"});
                table824.AddRow(new string[] {
                            "Supervisor signature",
                            "Digital verification required"});
#line 372
    testRunner.And("hour logging should capture:", ((string)(null)), table824, "And ");
#line hidden
#line 381
    testRunner.When("tracking semester progress", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table825 = new TechTalk.SpecFlow.Table(new string[] {
                            "Compliance Metric",
                            "Ashley Chen",
                            "Marcus Rodriguez",
                            "Status"});
                table825.AddRow(new string[] {
                            "Total hours required",
                            "150 hours",
                            "150 hours",
                            "On track"});
                table825.AddRow(new string[] {
                            "Direct hours completed",
                            "38 hours",
                            "42 hours",
                            "Meeting"});
                table825.AddRow(new string[] {
                            "Direct percentage",
                            "25.3%",
                            "28%",
                            "Compliant"});
                table825.AddRow(new string[] {
                            "Indirect hours",
                            "112 hours",
                            "108 hours",
                            "On track"});
                table825.AddRow(new string[] {
                            "Signed documentation",
                            "100%",
                            "98%",
                            "Mostly compliant"});
#line 382
    testRunner.Then("compliance monitoring should show:", ((string)(null)), table825, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table826 = new TechTalk.SpecFlow.Table(new string[] {
                            "Report Type",
                            "Content"});
                table826.AddRow(new string[] {
                            "University summary",
                            "All students\' hour completion"});
                table826.AddRow(new string[] {
                            "Individual transcripts",
                            "Detailed hour breakdown per student"});
                table826.AddRow(new string[] {
                            "Compliance verification",
                            "Meeting all accreditation standards"});
                table826.AddRow(new string[] {
                            "Quality indicators",
                            "Supervision effectiveness metrics"});
#line 389
    testRunner.And("accreditation reporting should generate:", ((string)(null)), table826, "And ");
#line hidden
#line 395
    testRunner.When("deficiencies are identified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table827 = new TechTalk.SpecFlow.Table(new string[] {
                            "Deficiency Type",
                            "Corrective Action"});
                table827.AddRow(new string[] {
                            "Insufficient hours",
                            "Additional supervision scheduled"});
                table827.AddRow(new string[] {
                            "Low direct percentage",
                            "Increase observation frequency"});
                table827.AddRow(new string[] {
                            "Missing documentation",
                            "Supervisor meeting to complete"});
                table827.AddRow(new string[] {
                            "Quality concerns",
                            "Enhanced supervision intensity"});
#line 396
    testRunner.Then("corrective actions should include:", ((string)(null)), table827, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create individualized learning plans and remediation strategies for struggling st" +
            "udents")]
        [Xunit.TraitAttribute("FeatureTitle", "Clinical Supervision and Education API Endpoints (FR-036)")]
        [Xunit.TraitAttribute("Description", "Create individualized learning plans and remediation strategies for struggling st" +
            "udents")]
        [Xunit.TraitAttribute("Category", "learning-plans")]
        [Xunit.TraitAttribute("Category", "individualized-education")]
        [Xunit.TraitAttribute("Category", "remediation")]
        [Xunit.TraitAttribute("Category", "workflow")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateIndividualizedLearningPlansAndRemediationStrategiesForStrugglingStudents()
        {
            string[] tagsOfScenario = new string[] {
                    "learning-plans",
                    "individualized-education",
                    "remediation",
                    "workflow",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create individualized learning plans and remediation strategies for struggling st" +
                    "udents", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 404
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 405
    testRunner.Given("student \"Jordan Taylor\" is having difficulty with clinical reasoning skills", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 406
    testRunner.And("mid-semester evaluation shows concerning patterns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 407
    testRunner.When("I develop comprehensive individualized learning plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table828 = new TechTalk.SpecFlow.Table(new string[] {
                            "Learning Need Area",
                            "Specific Challenges",
                            "Evidence"});
                table828.AddRow(new string[] {
                            "Assessment skills",
                            "Difficulty selecting tests",
                            "Inappropriate test choices"});
                table828.AddRow(new string[] {
                            "Clinical reasoning",
                            "Struggles with hypothesis formation",
                            "Unclear treatment rationale"});
                table828.AddRow(new string[] {
                            "Treatment planning",
                            "Goals not measurable or functional",
                            "Non-specific objectives"});
                table828.AddRow(new string[] {
                            "Data interpretation",
                            "Cannot analyze assessment results",
                            "Incorrect conclusions"});
#line 408
    testRunner.Then("learning needs assessment should identify:", ((string)(null)), table828, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table829 = new TechTalk.SpecFlow.Table(new string[] {
                            "Learning Strategy",
                            "Implementation",
                            "Timeline"});
                table829.AddRow(new string[] {
                            "Structured mentoring",
                            "Pair with expert clinician",
                            "4 weeks"});
                table829.AddRow(new string[] {
                            "Case study method",
                            "Work through decision trees",
                            "2 weeks"});
                table829.AddRow(new string[] {
                            "Observation increase",
                            "Shadow experienced therapists",
                            "3 weeks"});
                table829.AddRow(new string[] {
                            "Reflection practice",
                            "Guided self-assessment activities",
                            "Ongoing"});
                table829.AddRow(new string[] {
                            "Competency coaching",
                            "Targeted skill-building sessions",
                            "6 weeks"});
#line 414
    testRunner.And("individualized strategies should include:", ((string)(null)), table829, "And ");
#line hidden
#line 421
    testRunner.When("implementing learning plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table830 = new TechTalk.SpecFlow.Table(new string[] {
                            "Progress Indicator",
                            "Measurement Method"});
                table830.AddRow(new string[] {
                            "Skill demonstration",
                            "Direct observation frequency"});
                table830.AddRow(new string[] {
                            "Knowledge application",
                            "Case presentation quality"});
                table830.AddRow(new string[] {
                            "Clinical decisions",
                            "Accuracy of assessment choices"});
                table830.AddRow(new string[] {
                            "Self-awareness",
                            "Quality of reflection responses"});
#line 422
    testRunner.Then("progress monitoring should track:", ((string)(null)), table830, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table831 = new TechTalk.SpecFlow.Table(new string[] {
                            "Resource Type",
                            "Specific Support"});
                table831.AddRow(new string[] {
                            "Additional readings",
                            "Evidence-based practice articles"});
                table831.AddRow(new string[] {
                            "Video examples",
                            "Expert clinician demonstrations"});
                table831.AddRow(new string[] {
                            "Practice cases",
                            "Graduated complexity scenarios"});
                table831.AddRow(new string[] {
                            "Peer collaboration",
                            "Study groups with stronger students"});
#line 428
    testRunner.And("support resources should include:", ((string)(null)), table831, "And ");
#line hidden
#line 434
    testRunner.When("evaluating plan effectiveness", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table832 = new TechTalk.SpecFlow.Table(new string[] {
                            "Success Criterion",
                            "Target Performance"});
                table832.AddRow(new string[] {
                            "Assessment selection",
                            "80% appropriate test choices"});
                table832.AddRow(new string[] {
                            "Clinical reasoning",
                            "Clear rationale in 90% of cases"});
                table832.AddRow(new string[] {
                            "Goal writing",
                            "SMART goals in all treatment plans"});
                table832.AddRow(new string[] {
                            "Data interpretation",
                            "Accurate conclusions drawn"});
#line 435
    testRunner.Then("success criteria should measure:", ((string)(null)), table832, "Then ");
#line hidden
#line 441
    testRunner.And("if remediation is unsuccessful", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table833 = new TechTalk.SpecFlow.Table(new string[] {
                            "Escalation Step",
                            "Action Required"});
                table833.AddRow(new string[] {
                            "University notification",
                            "Formal academic concern report"});
                table833.AddRow(new string[] {
                            "Extended timeline",
                            "Additional semester if needed"});
                table833.AddRow(new string[] {
                            "Alternative placement",
                            "Different supervision setting"});
                table833.AddRow(new string[] {
                            "Program review",
                            "Fitness for profession evaluation"});
#line 442
    testRunner.Then("escalation procedures should include:", ((string)(null)), table833, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ClinicalSupervisionAndEducationAPIEndpointsFR_036Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ClinicalSupervisionAndEducationAPIEndpointsFR_036Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
