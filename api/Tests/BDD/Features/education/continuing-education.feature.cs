// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Education
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ContinuingEducationAPIEndpointsFR_018Feature : object, Xunit.IClassFixture<ContinuingEducationAPIEndpointsFR_018Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "continuing-education.feature"
#line hidden
        
        public ContinuingEducationAPIEndpointsFR_018Feature(ContinuingEducationAPIEndpointsFR_018Feature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/education", "Continuing Education API Endpoints (FR-018)", "  As a therapy professional\n  I want to access continuing education opportunities" +
                    "\n  So that I can maintain my license and improve my skills", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Browse available CE courses")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Browse available CE courses")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "catalog")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BrowseAvailableCECourses()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "catalog",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Browse available CE courses", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/continuing-education/courses?discipline=OT&credits=" +
                        "2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table815 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table815.AddRow(new string[] {
                            "courses",
                            "array"});
                table815.AddRow(new string[] {
                            "total",
                            "number"});
                table815.AddRow(new string[] {
                            "filters",
                            "object"});
#line 15
    testRunner.And("the response should contain:", ((string)(null)), table815, "And ");
#line hidden
                TechTalk.SpecFlow.Table table816 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table816.AddRow(new string[] {
                            "courseId",
                            "string"});
                table816.AddRow(new string[] {
                            "title",
                            "string"});
                table816.AddRow(new string[] {
                            "credits",
                            "number"});
                table816.AddRow(new string[] {
                            "discipline",
                            "array"});
                table816.AddRow(new string[] {
                            "format",
                            "string"});
                table816.AddRow(new string[] {
                            "price",
                            "number"});
                table816.AddRow(new string[] {
                            "instructor",
                            "object"});
                table816.AddRow(new string[] {
                            "accreditation",
                            "array"});
#line 20
    testRunner.And("each course should contain:", ((string)(null)), table816, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get course details")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Get course details")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "details")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetCourseDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "details",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get course details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 34
    testRunner.Given("CE course \"course-123\" exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
    testRunner.When("I send a GET request to \"/api/continuing-education/courses/course-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table817 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table817.AddRow(new string[] {
                            "courseId",
                            "string"});
                table817.AddRow(new string[] {
                            "title",
                            "string"});
                table817.AddRow(new string[] {
                            "description",
                            "string"});
                table817.AddRow(new string[] {
                            "objectives",
                            "array"});
                table817.AddRow(new string[] {
                            "outline",
                            "array"});
                table817.AddRow(new string[] {
                            "prerequisites",
                            "array"});
                table817.AddRow(new string[] {
                            "credits",
                            "object"});
                table817.AddRow(new string[] {
                            "duration",
                            "string"});
                table817.AddRow(new string[] {
                            "expirationDate",
                            "string"});
                table817.AddRow(new string[] {
                            "passRate",
                            "number"});
#line 37
    testRunner.And("the response should contain:", ((string)(null)), table817, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Enroll in CE course")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Enroll in CE course")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "enrollment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void EnrollInCECourse()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "enrollment",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enroll in CE course", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table818 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table818.AddRow(new string[] {
                            "courseId",
                            "course-123"});
                table818.AddRow(new string[] {
                            "paymentMethod",
                            "saved-card"});
                table818.AddRow(new string[] {
                            "licenseNumber",
                            "OT-12345"});
                table818.AddRow(new string[] {
                            "state",
                            "CA"});
#line 53
    testRunner.When("I send a POST request to \"/api/continuing-education/enrollment\" with:", ((string)(null)), table818, "When ");
#line hidden
#line 59
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table819 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table819.AddRow(new string[] {
                            "enrollmentId",
                            "string"});
                table819.AddRow(new string[] {
                            "accessUrl",
                            "string"});
                table819.AddRow(new string[] {
                            "expiresAt",
                            "string"});
#line 60
    testRunner.And("the response should contain:", ((string)(null)), table819, "And ");
#line hidden
#line 65
    testRunner.And("course materials should be accessible", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get enrolled courses")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Get enrolled courses")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "progress")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetEnrolledCourses()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "progress",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get enrolled courses", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 70
    testRunner.Given("I am enrolled in CE courses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 71
    testRunner.When("I send a GET request to \"/api/continuing-education/my-courses\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table820 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table820.AddRow(new string[] {
                            "courseId",
                            "string"});
                table820.AddRow(new string[] {
                            "enrollmentDate",
                            "string"});
                table820.AddRow(new string[] {
                            "progress",
                            "number"});
                table820.AddRow(new string[] {
                            "status",
                            "string"});
                table820.AddRow(new string[] {
                            "certificateUrl",
                            "string"});
                table820.AddRow(new string[] {
                            "expiresAt",
                            "string"});
#line 73
    testRunner.And("the response should contain array of:", ((string)(null)), table820, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update course progress")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Update course progress")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "tracking")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateCourseProgress()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "tracking",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update course progress", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 85
    testRunner.Given("I am enrolled in \"course-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table821 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table821.AddRow(new string[] {
                            "moduleId",
                            "module-3"});
                table821.AddRow(new string[] {
                            "status",
                            "completed"});
                table821.AddRow(new string[] {
                            "timeSpent",
                            "1800"});
                table821.AddRow(new string[] {
                            "quizScore",
                            "85"});
#line 86
    testRunner.When("I send a POST request to \"/api/continuing-education/courses/course-123/progress\" " +
                        "with:", ((string)(null)), table821, "When ");
#line hidden
#line 92
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
    testRunner.And("progress should be saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
    testRunner.And("next module should be unlocked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Take course exam")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Take course exam")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "assessment")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TakeCourseExam()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "assessment",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Take course exam", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 98
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 99
    testRunner.Given("I completed all modules for \"course-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table822 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table822.AddRow(new string[] {
                            "answers",
                            "[{\"questionId\": \"q1\", \"answer\": \"a\"}]"});
                table822.AddRow(new string[] {
                            "timeSpent",
                            "2400"});
#line 100
    testRunner.When("I send a POST request to \"/api/continuing-education/courses/course-123/exam\" with" +
                        ":", ((string)(null)), table822, "When ");
#line hidden
#line 104
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table823 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table823.AddRow(new string[] {
                            "score",
                            "number"});
                table823.AddRow(new string[] {
                            "passed",
                            "boolean"});
                table823.AddRow(new string[] {
                            "attempts",
                            "number"});
                table823.AddRow(new string[] {
                            "retakeDate",
                            "string"});
#line 105
    testRunner.And("the response should contain:", ((string)(null)), table823, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get CE certificates")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Get CE certificates")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "certificates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetCECertificates()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "certificates",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get CE certificates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 114
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 115
    testRunner.Given("I have completed CE courses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 116
    testRunner.When("I send a GET request to \"/api/continuing-education/certificates\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table824 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table824.AddRow(new string[] {
                            "certificateId",
                            "string"});
                table824.AddRow(new string[] {
                            "courseTitle",
                            "string"});
                table824.AddRow(new string[] {
                            "completionDate",
                            "string"});
                table824.AddRow(new string[] {
                            "credits",
                            "number"});
                table824.AddRow(new string[] {
                            "downloadUrl",
                            "string"});
                table824.AddRow(new string[] {
                            "verificationCode",
                            "string"});
#line 118
    testRunner.And("the response should contain array of:", ((string)(null)), table824, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Register for live webinar")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Register for live webinar")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "webinars")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RegisterForLiveWebinar()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "webinars",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register for live webinar", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 129
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table825 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table825.AddRow(new string[] {
                            "webinarId",
                            "webinar-456"});
                table825.AddRow(new string[] {
                            "timeZone",
                            "America/Los_Angeles"});
                table825.AddRow(new string[] {
                            "reminders",
                            "[\"1-day\", \"1-hour\"]"});
#line 130
    testRunner.When("I send a POST request to \"/api/continuing-education/webinars/register\" with:", ((string)(null)), table825, "When ");
#line hidden
#line 135
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 136
    testRunner.And("calendar invite should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
    testRunner.And("access link should be provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get CE recommendations")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Get CE recommendations")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "personalized")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetCERecommendations()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "personalized",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get CE recommendations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 141
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 142
    testRunner.Given("I have CE history", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 143
    testRunner.When("I send a GET request to \"/api/continuing-education/recommendations\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 144
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table826 = new TechTalk.SpecFlow.Table(new string[] {
                            "factor"});
                table826.AddRow(new string[] {
                            "License requirements"});
                table826.AddRow(new string[] {
                            "Skill gaps"});
                table826.AddRow(new string[] {
                            "Interest areas"});
                table826.AddRow(new string[] {
                            "Upcoming deadlines"});
#line 145
    testRunner.And("recommendations should be based on:", ((string)(null)), table826, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Log external CE credits")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Log external CE credits")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "external")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void LogExternalCECredits()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "external",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Log external CE credits", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table827 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table827.AddRow(new string[] {
                            "courseName",
                            "Sensory Integration 101"});
                table827.AddRow(new string[] {
                            "provider",
                            "AOTA"});
                table827.AddRow(new string[] {
                            "completionDate",
                            "2024-01-15"});
                table827.AddRow(new string[] {
                            "credits",
                            "3"});
                table827.AddRow(new string[] {
                            "certificate",
                            "certificate.pdf"});
#line 155
    testRunner.When("I send a POST request to \"/api/continuing-education/tracking/external\" with:", ((string)(null)), table827, "When ");
#line hidden
#line 162
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
    testRunner.And("credits should be tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
    testRunner.And("verification should be pending", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get license renewal requirements")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Get license renewal requirements")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "compliance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetLicenseRenewalRequirements()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "compliance",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get license renewal requirements", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 168
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 169
    testRunner.When("I send a GET request to \"/api/continuing-education/requirements?state=CA&license=" +
                        "OT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 170
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table828 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table828.AddRow(new string[] {
                            "totalRequired",
                            "number"});
                table828.AddRow(new string[] {
                            "periodLength",
                            "string"});
                table828.AddRow(new string[] {
                            "currentCredits",
                            "number"});
                table828.AddRow(new string[] {
                            "expirationDate",
                            "string"});
                table828.AddRow(new string[] {
                            "specificRequirements",
                            "array"});
                table828.AddRow(new string[] {
                            "remainingCredits",
                            "number"});
#line 171
    testRunner.And("the response should contain:", ((string)(null)), table828, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create learning group")]
        [Xunit.TraitAttribute("FeatureTitle", "Continuing Education API Endpoints (FR-018)")]
        [Xunit.TraitAttribute("Description", "Create learning group")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "ce")]
        [Xunit.TraitAttribute("Category", "group-learning")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void CreateLearningGroup()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "ce",
                    "group-learning",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create learning group", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 182
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table829 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table829.AddRow(new string[] {
                            "name",
                            "Pediatric OT Study Group"});
                table829.AddRow(new string[] {
                            "courseId",
                            "course-123"});
                table829.AddRow(new string[] {
                            "maxMembers",
                            "10"});
                table829.AddRow(new string[] {
                            "meetingSchedule",
                            "weekly"});
                table829.AddRow(new string[] {
                            "startDate",
                            "2024-02-01"});
#line 183
    testRunner.When("I send a POST request to \"/api/continuing-education/groups\" with:", ((string)(null)), table829, "When ");
#line hidden
#line 190
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
    testRunner.And("group should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
    testRunner.And("discussion forum should be available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ContinuingEducationAPIEndpointsFR_018Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ContinuingEducationAPIEndpointsFR_018Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
