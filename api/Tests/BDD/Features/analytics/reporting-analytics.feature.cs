// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Analytics
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ReportingAndAnalyticsAPIEndpointsFeature : object, Xunit.IClassFixture<ReportingAndAnalyticsAPIEndpointsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "reporting-analytics.feature"
#line hidden
        
        public ReportingAndAnalyticsAPIEndpointsFeature(ReportingAndAnalyticsAPIEndpointsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/analytics", "Reporting and Analytics API Endpoints", "  As a therapy professional or administrator\n  I want comprehensive analytics and" +
                    " reporting\n  So that I can make data-driven decisions", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get personal analytics dashboard")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get personal analytics dashboard")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "dashboard")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetPersonalAnalyticsDashboard()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "dashboard",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get personal analytics dashboard", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/analytics/dashboard\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table448 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table448.AddRow(new string[] {
                            "productivity",
                            "object"});
                table448.AddRow(new string[] {
                            "studentOutcomes",
                            "object"});
                table448.AddRow(new string[] {
                            "resourceUsage",
                            "object"});
                table448.AddRow(new string[] {
                            "timeAllocation",
                            "object"});
                table448.AddRow(new string[] {
                            "trendsThisMonth",
                            "array"});
                table448.AddRow(new string[] {
                            "comparisons",
                            "object"});
#line 15
    testRunner.And("the response should contain:", ((string)(null)), table448, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get detailed productivity metrics")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get detailed productivity metrics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "productivity")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetDetailedProductivityMetrics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "productivity",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get detailed productivity metrics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 27
    testRunner.When("I send a GET request to \"/api/analytics/productivity?period=month\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table449 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table449.AddRow(new string[] {
                            "sessionsCompleted",
                            "number"});
                table449.AddRow(new string[] {
                            "studentsServed",
                            "number"});
                table449.AddRow(new string[] {
                            "documentationRate",
                            "number"});
                table449.AddRow(new string[] {
                            "cancellationRate",
                            "number"});
                table449.AddRow(new string[] {
                            "billableHours",
                            "number"});
                table449.AddRow(new string[] {
                            "efficiencyScore",
                            "number"});
                table449.AddRow(new string[] {
                            "peakProductiveTimes",
                            "array"});
#line 29
    testRunner.And("the response should contain:", ((string)(null)), table449, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get student outcome analytics")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get student outcome analytics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "outcomes")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetStudentOutcomeAnalytics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "outcomes",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get student outcome analytics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 42
    testRunner.Given("student \"student-123\" has 6 months of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
    testRunner.When("I send a GET request to \"/api/analytics/students/student-123/outcomes\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table450 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table450.AddRow(new string[] {
                            "goalAchievement",
                            "object"});
                table450.AddRow(new string[] {
                            "progressRate",
                            "number"});
                table450.AddRow(new string[] {
                            "interventionEffect",
                            "object"});
                table450.AddRow(new string[] {
                            "predictedOutcomes",
                            "object"});
                table450.AddRow(new string[] {
                            "comparisonToPeers",
                            "object"});
#line 45
    testRunner.And("the response should contain:", ((string)(null)), table450, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate custom report")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Generate custom report")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "reports")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateCustomReport()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "reports",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate custom report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 55
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table451 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table451.AddRow(new string[] {
                            "reportType",
                            "quarterly-outcomes"});
                table451.AddRow(new string[] {
                            "dateRange",
                            "{\"start\": \"2024-01-01\", \"end\": \"2024-03-31\"}"});
                table451.AddRow(new string[] {
                            "groupBy",
                            "goal-area"});
                table451.AddRow(new string[] {
                            "includeGraphs",
                            "true"});
                table451.AddRow(new string[] {
                            "format",
                            "pdf"});
#line 56
    testRunner.When("I send a POST request to \"/api/analytics/reports/generate\" with:", ((string)(null)), table451, "When ");
#line hidden
#line 63
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table452 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table452.AddRow(new string[] {
                            "jobId",
                            "string"});
                table452.AddRow(new string[] {
                            "status",
                            "string"});
                table452.AddRow(new string[] {
                            "estimatedTime",
                            "number"});
#line 64
    testRunner.And("the response should contain:", ((string)(null)), table452, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get generated report")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get generated report")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "report-status")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetGeneratedReport()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "report-status",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get generated report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 73
    testRunner.Given("report job \"job-123\" is complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
    testRunner.When("I send a GET request to \"/api/analytics/reports/job-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table453 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table453.AddRow(new string[] {
                            "downloadUrl",
                            "string"});
                table453.AddRow(new string[] {
                            "expiresAt",
                            "string"});
                table453.AddRow(new string[] {
                            "metadata",
                            "object"});
#line 76
    testRunner.And("the response should contain:", ((string)(null)), table453, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get performance benchmarks")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get performance benchmarks")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "benchmarks")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetPerformanceBenchmarks()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "benchmarks",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get performance benchmarks", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 85
    testRunner.When("I send a GET request to \"/api/analytics/benchmarks?discipline=OT\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table454 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table454.AddRow(new string[] {
                            "nationalAverages",
                            "object"});
                table454.AddRow(new string[] {
                            "regionalAverages",
                            "object"});
                table454.AddRow(new string[] {
                            "facilityAverages",
                            "object"});
                table454.AddRow(new string[] {
                            "yourPerformance",
                            "object"});
                table454.AddRow(new string[] {
                            "percentileRanking",
                            "number"});
#line 87
    testRunner.And("the response should contain:", ((string)(null)), table454, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get resource usage analytics")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get resource usage analytics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "resource-analytics")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetResourceUsageAnalytics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "resource-analytics",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get resource usage analytics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 98
    testRunner.When("I send a GET request to \"/api/analytics/resources/usage?period=quarter\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table455 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table455.AddRow(new string[] {
                            "mostUsedResources",
                            "array"});
                table455.AddRow(new string[] {
                            "effectivenessScores",
                            "object"});
                table455.AddRow(new string[] {
                            "studentEngagement",
                            "object"});
                table455.AddRow(new string[] {
                            "outcomeCorrelation",
                            "object"});
                table455.AddRow(new string[] {
                            "recommendations",
                            "array"});
#line 100
    testRunner.And("the response should contain:", ((string)(null)), table455, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get caseload analytics")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get caseload analytics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "caseload")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetCaseloadAnalytics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "caseload",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get caseload analytics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 111
    testRunner.When("I send a GET request to \"/api/analytics/caseload\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table456 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table456.AddRow(new string[] {
                            "totalStudents",
                            "number"});
                table456.AddRow(new string[] {
                            "byDiagnosis",
                            "object"});
                table456.AddRow(new string[] {
                            "byAge",
                            "object"});
                table456.AddRow(new string[] {
                            "byServiceType",
                            "object"});
                table456.AddRow(new string[] {
                            "complexityScore",
                            "number"});
                table456.AddRow(new string[] {
                            "timeAllocation",
                            "object"});
#line 113
    testRunner.And("the response should contain:", ((string)(null)), table456, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get predictive analytics")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get predictive analytics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "predictive")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetPredictiveAnalytics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "predictive",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get predictive analytics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 124
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table457 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table457.AddRow(new string[] {
                            "studentId",
                            "student-123"});
                table457.AddRow(new string[] {
                            "goalId",
                            "goal-456"});
                table457.AddRow(new string[] {
                            "timeframe",
                            "3-months"});
#line 125
    testRunner.When("I send a POST request to \"/api/analytics/predictive\" with:", ((string)(null)), table457, "When ");
#line hidden
#line 130
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table458 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table458.AddRow(new string[] {
                            "predictedProgress",
                            "object"});
                table458.AddRow(new string[] {
                            "confidence",
                            "number"});
                table458.AddRow(new string[] {
                            "riskFactors",
                            "array"});
                table458.AddRow(new string[] {
                            "recommendations",
                            "array"});
#line 131
    testRunner.And("the response should contain:", ((string)(null)), table458, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get organization-wide analytics")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get organization-wide analytics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "org-level")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetOrganization_WideAnalytics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "org-level",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get organization-wide analytics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 140
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 141
    testRunner.Given("I have organization admin role", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 142
    testRunner.When("I send a GET request to \"/api/analytics/organization\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 143
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table459 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table459.AddRow(new string[] {
                            "overallMetrics",
                            "object"});
                table459.AddRow(new string[] {
                            "departmentBreakdown",
                            "object"});
                table459.AddRow(new string[] {
                            "therapistMetrics",
                            "array"});
                table459.AddRow(new string[] {
                            "studentOutcomes",
                            "object"});
                table459.AddRow(new string[] {
                            "resourceROI",
                            "object"});
                table459.AddRow(new string[] {
                            "complianceStatus",
                            "object"});
#line 144
    testRunner.And("the response should contain:", ((string)(null)), table459, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get billing analytics")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get billing analytics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "financial")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetBillingAnalytics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "financial",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get billing analytics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 155
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 156
    testRunner.When("I send a GET request to \"/api/analytics/billing?period=month\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 157
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table460 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table460.AddRow(new string[] {
                            "totalBilled",
                            "number"});
                table460.AddRow(new string[] {
                            "totalCollected",
                            "number"});
                table460.AddRow(new string[] {
                            "outstandingAmount",
                            "number"});
                table460.AddRow(new string[] {
                            "denialRate",
                            "number"});
                table460.AddRow(new string[] {
                            "payerBreakdown",
                            "object"});
                table460.AddRow(new string[] {
                            "productivityUnits",
                            "number"});
#line 158
    testRunner.And("the response should contain:", ((string)(null)), table460, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Export analytics data")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Export analytics data")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "export")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ExportAnalyticsData()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "export",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export analytics data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 169
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table461 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table461.AddRow(new string[] {
                            "dataType",
                            "student-outcomes"});
                table461.AddRow(new string[] {
                            "format",
                            "excel"});
                table461.AddRow(new string[] {
                            "dateRange",
                            "{\"start\": \"2024-01-01\", \"end\": \"2024-12-31\"}"});
                table461.AddRow(new string[] {
                            "filters",
                            "{\"diagnosis\": [\"autism\"]}"});
#line 170
    testRunner.When("I send a POST request to \"/api/analytics/export\" with:", ((string)(null)), table461, "When ");
#line hidden
#line 176
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table462 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table462.AddRow(new string[] {
                            "downloadUrl",
                            "string"});
                table462.AddRow(new string[] {
                            "fileName",
                            "string"});
                table462.AddRow(new string[] {
                            "rowCount",
                            "number"});
#line 177
    testRunner.And("the response should contain:", ((string)(null)), table462, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get trend analysis")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get trend analysis")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "trends")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetTrendAnalysis()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "trends",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get trend analysis", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 185
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 186
    testRunner.When("I send a GET request to \"/api/analytics/trends?metric=goal-achievement&period=yea" +
                        "r\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 187
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table463 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table463.AddRow(new string[] {
                            "trendDirection",
                            "string"});
                table463.AddRow(new string[] {
                            "changePercentage",
                            "number"});
                table463.AddRow(new string[] {
                            "dataPoints",
                            "array"});
                table463.AddRow(new string[] {
                            "seasonalPatterns",
                            "object"});
                table463.AddRow(new string[] {
                            "projections",
                            "object"});
#line 188
    testRunner.And("the response should contain:", ((string)(null)), table463, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get compliance metrics")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get compliance metrics")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "compliance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetComplianceMetrics()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "compliance",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get compliance metrics", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 198
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 199
    testRunner.When("I send a GET request to \"/api/analytics/compliance\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 200
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table464 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table464.AddRow(new string[] {
                            "documentationCompliance",
                            "number"});
                table464.AddRow(new string[] {
                            "billingCompliance",
                            "number"});
                table464.AddRow(new string[] {
                            "regulatoryCompliance",
                            "object"});
                table464.AddRow(new string[] {
                            "trainingCompliance",
                            "object"});
                table464.AddRow(new string[] {
                            "auditReadiness",
                            "number"});
#line 201
    testRunner.And("the response should contain:", ((string)(null)), table464, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Configure analytics alerts")]
        [Xunit.TraitAttribute("FeatureTitle", "Reporting and Analytics API Endpoints")]
        [Xunit.TraitAttribute("Description", "Configure analytics alerts")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "analytics")]
        [Xunit.TraitAttribute("Category", "alerts")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConfigureAnalyticsAlerts()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "analytics",
                    "alerts",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Configure analytics alerts", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 211
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table465 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table465.AddRow(new string[] {
                            "alertType",
                            "low-progress"});
                table465.AddRow(new string[] {
                            "threshold",
                            "{\"progressRate\": \"<50%\"}"});
                table465.AddRow(new string[] {
                            "frequency",
                            "weekly"});
                table465.AddRow(new string[] {
                            "recipients",
                            "[\"therapist@clinic.com\"]"});
#line 212
    testRunner.When("I send a POST request to \"/api/analytics/alerts\" with:", ((string)(null)), table465, "When ");
#line hidden
#line 218
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 219
    testRunner.And("alert should be configured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
    testRunner.And("test notification should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ReportingAndAnalyticsAPIEndpointsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ReportingAndAnalyticsAPIEndpointsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
