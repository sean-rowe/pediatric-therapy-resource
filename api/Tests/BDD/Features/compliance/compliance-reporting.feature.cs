// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Compliance
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ComplianceAndReportingFeature : object, Xunit.IClassFixture<ComplianceAndReportingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "compliance-reporting.feature"
#line hidden
        
        public ComplianceAndReportingFeature(ComplianceAndReportingFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/compliance", "Compliance and Reporting", "  As a therapy practice administrator\n  I want to ensure regulatory compliance an" +
                    "d generate required reports\n  So that we meet all legal requirements and maintai" +
                    "n accreditation", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("I am logged in as administrator", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table627 = new TechTalk.SpecFlow.Table(new string[] {
                        "Framework",
                        "Requirement"});
            table627.AddRow(new string[] {
                        "HIPAA",
                        "Protected health information security"});
            table627.AddRow(new string[] {
                        "FERPA",
                        "Educational records privacy"});
            table627.AddRow(new string[] {
                        "Medicaid",
                        "Documentation and billing compliance"});
            table627.AddRow(new string[] {
                        "State",
                        "Therapy licensure and supervision rules"});
#line 8
    testRunner.And("the following compliance frameworks apply:", ((string)(null)), table627, "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Monitor documentation timeliness")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Monitor documentation timeliness")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MonitorDocumentationTimeliness()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Monitor documentation timeliness", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 19
      testRunner.Given("documentation must be completed within 48 hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
      testRunner.When("I view compliance dashboard", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table628 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Count",
                            "Status"});
                table628.AddRow(new string[] {
                            "Sessions documented <24hr",
                            "145",
                            "Compliant"});
                table628.AddRow(new string[] {
                            "Sessions documented 24-48hr",
                            "23",
                            "Compliant"});
                table628.AddRow(new string[] {
                            "Sessions pending >48hr",
                            "3",
                            "Alert"});
                table628.AddRow(new string[] {
                            "Sessions missing documentation",
                            "0",
                            "Good"});
#line 21
      testRunner.Then("I see:", ((string)(null)), table628, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table629 = new TechTalk.SpecFlow.Table(new string[] {
                            "Therapist",
                            "Student",
                            "Session Date",
                            "Hours Overdue"});
                table629.AddRow(new string[] {
                            "Sarah Johnson",
                            "Emma Wilson",
                            "2024-01-13",
                            "12"});
#line 27
      testRunner.And("non-compliant items show:", ((string)(null)), table629, "And ");
#line hidden
#line 30
      testRunner.And("automated reminders were sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track signature requirements")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Track signature requirements")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackSignatureRequirements()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track signature requirements", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 34
      testRunner.Given("supervisory signatures required monthly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
      testRunner.When("I check signature compliance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table630 = new TechTalk.SpecFlow.Table(new string[] {
                            "Therapist",
                            "Documents",
                            "Signed",
                            "Pending",
                            "Due Date"});
                table630.AddRow(new string[] {
                            "Sarah Johnson",
                            "47",
                            "45",
                            "2",
                            "2024-01-31"});
                table630.AddRow(new string[] {
                            "Michael Chen",
                            "52",
                            "52",
                            "0",
                            "Compliant"});
                table630.AddRow(new string[] {
                            "Amy Lee (CF)",
                            "38",
                            "38",
                            "0",
                            "Compliant"});
#line 36
      testRunner.Then("report shows:", ((string)(null)), table630, "Then ");
#line hidden
#line 41
      testRunner.And("pending items are flagged for supervisor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify credential compliance")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Verify credential compliance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void VerifyCredentialCompliance()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify credential compliance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 45
      testRunner.Given("therapists must maintain current licenses", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
      testRunner.When("I run credential audit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table631 = new TechTalk.SpecFlow.Table(new string[] {
                            "Therapist",
                            "License",
                            "Expiration",
                            "Status"});
                table631.AddRow(new string[] {
                            "Sarah Johnson",
                            "OT-12345",
                            "2024-12-31",
                            "Active"});
                table631.AddRow(new string[] {
                            "Michael Chen",
                            "PT-67890",
                            "2024-03-15",
                            "Expiring Soon"});
                table631.AddRow(new string[] {
                            "Amy Lee",
                            "SLP-54321",
                            "2024-08-30",
                            "Active"});
#line 47
      testRunner.Then("system reports:", ((string)(null)), table631, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table632 = new TechTalk.SpecFlow.Table(new string[] {
                            "Days Before",
                            "Action"});
                table632.AddRow(new string[] {
                            "90",
                            "Email reminder to therapist"});
                table632.AddRow(new string[] {
                            "60",
                            "Email reminder + supervisor"});
                table632.AddRow(new string[] {
                            "30",
                            "Daily reminders + practice admin"});
#line 52
      testRunner.And("expiring credentials trigger:", ((string)(null)), table632, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate HIPAA audit log")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Generate HIPAA audit log")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateHIPAAAuditLog()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate HIPAA audit log", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 62
      testRunner.Given("HIPAA requires access tracking", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
      testRunner.When("I generate audit report for \"January 2024\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table633 = new TechTalk.SpecFlow.Table(new string[] {
                            "Event Type",
                            "Count",
                            "Details Available"});
                table633.AddRow(new string[] {
                            "Record Access",
                            "1,247",
                            "User, time, reason"});
                table633.AddRow(new string[] {
                            "Record Modification",
                            "823",
                            "User, time, changes"});
                table633.AddRow(new string[] {
                            "Failed Access",
                            "12",
                            "User, time, attempt type"});
                table633.AddRow(new string[] {
                            "Data Export",
                            "45",
                            "User, time, scope"});
                table633.AddRow(new string[] {
                            "Permission Changes",
                            "8",
                            "Admin, time, details"});
#line 64
      testRunner.Then("report includes:", ((string)(null)), table633, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table634 = new TechTalk.SpecFlow.Table(new string[] {
                            "Field",
                            "Example"});
                table634.AddRow(new string[] {
                            "Timestamp",
                            "2024-01-15 09:23:45 EST"});
                table634.AddRow(new string[] {
                            "User",
                            "sjohnson@therapy.com"});
                table634.AddRow(new string[] {
                            "Action",
                            "Viewed student record"});
                table634.AddRow(new string[] {
                            "Resource",
                            "Student: Emma Wilson"});
                table634.AddRow(new string[] {
                            "IP Address",
                            "192.168.1.100"});
#line 71
      testRunner.And("each entry shows:", ((string)(null)), table634, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track data breach protocols")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Track data breach protocols")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackDataBreachProtocols()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track data breach protocols", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 81
      testRunner.Given("potential breach detected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 82
      testRunner.When("I access breach response workflow", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table635 = new TechTalk.SpecFlow.Table(new string[] {
                            "Step",
                            "Action",
                            "Deadline"});
                table635.AddRow(new string[] {
                            "1",
                            "Contain the breach",
                            "Immediate"});
                table635.AddRow(new string[] {
                            "2",
                            "Assess scope and impact",
                            "Within 24 hours"});
                table635.AddRow(new string[] {
                            "3",
                            "Document all findings",
                            "Within 48 hours"});
                table635.AddRow(new string[] {
                            "4",
                            "Notify affected individuals",
                            "Within 60 days"});
                table635.AddRow(new string[] {
                            "5",
                            "Report to HHS if required",
                            "Within 60 days"});
                table635.AddRow(new string[] {
                            "6",
                            "Implement preventive measures",
                            "Ongoing"});
#line 83
      testRunner.Then("system guides through:", ((string)(null)), table635, "Then ");
#line hidden
#line 91
      testRunner.And("all actions are logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate Medicaid billing compliance")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Validate Medicaid billing compliance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ValidateMedicaidBillingCompliance()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Medicaid billing compliance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 97
      testRunner.Given("Medicaid services were provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
      testRunner.When("I run compliance check for \"Q4 2023\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table636 = new TechTalk.SpecFlow.Table(new string[] {
                            "Check",
                            "Result",
                            "Issues Found"});
                table636.AddRow(new string[] {
                            "Prior authorization",
                            "98% Pass",
                            "3 missing"});
                table636.AddRow(new string[] {
                            "Timely filing",
                            "100% Pass",
                            "0"});
                table636.AddRow(new string[] {
                            "Documentation completeness",
                            "96% Pass",
                            "8 incomplete"});
                table636.AddRow(new string[] {
                            "Service delivery verification",
                            "99% Pass",
                            "2 errors"});
                table636.AddRow(new string[] {
                            "Therapist credentials",
                            "100% Pass",
                            "0"});
#line 99
      testRunner.Then("validation includes:", ((string)(null)), table636, "Then ");
#line hidden
#line 106
      testRunner.And("issues detail shows corrective actions needed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate Medicaid cost report")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Generate Medicaid cost report")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateMedicaidCostReport()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate Medicaid cost report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 109
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 110
      testRunner.Given("annual cost reporting required", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 111
      testRunner.When("I generate cost report for \"2023\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table637 = new TechTalk.SpecFlow.Table(new string[] {
                            "Section",
                            "Data Points"});
                table637.AddRow(new string[] {
                            "Direct Service Costs",
                            "Therapist time, benefits"});
                table637.AddRow(new string[] {
                            "Indirect Costs",
                            "Administration, facilities"});
                table637.AddRow(new string[] {
                            "Student Service Hours",
                            "By category and location"});
                table637.AddRow(new string[] {
                            "Reimbursement Received",
                            "By payer and service type"});
                table637.AddRow(new string[] {
                            "Compliance Metrics",
                            "Documentation, authorization"});
#line 112
      testRunner.Then("report includes:", ((string)(null)), table637, "Then ");
#line hidden
#line 119
      testRunner.And("calculations follow state methodology", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Submit state therapy services report")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Submit state therapy services report")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubmitStateTherapyServicesReport()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Submit state therapy services report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 124
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 125
      testRunner.Given("quarterly reporting to state required", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 126
      testRunner.When("I generate \"Q4 2023\" state report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table638 = new TechTalk.SpecFlow.Table(new string[] {
                            "Metric",
                            "Value"});
                table638.AddRow(new string[] {
                            "Total Students Served",
                            "324"});
                table638.AddRow(new string[] {
                            "Total Service Hours",
                            "4,836"});
                table638.AddRow(new string[] {
                            "Services by Type",
                            "OT: 45%, PT: 30%, SLP: 25%"});
                table638.AddRow(new string[] {
                            "Outcomes Achieved",
                            "78% met goals"});
                table638.AddRow(new string[] {
                            "Therapist FTE",
                            "12.5"});
                table638.AddRow(new string[] {
                            "Geographic Distribution",
                            "By county/district"});
#line 127
      testRunner.Then("report contains:", ((string)(null)), table638, "Then ");
#line hidden
#line 135
      testRunner.And("format matches state specifications", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
      testRunner.And("submission is tracked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Annual outcome reporting")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Annual outcome reporting")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AnnualOutcomeReporting()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Annual outcome reporting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 139
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 140
      testRunner.Given("state requires outcome data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
      testRunner.When("I compile annual outcomes for \"2023\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table639 = new TechTalk.SpecFlow.Table(new string[] {
                            "Outcome Category",
                            "Metrics"});
                table639.AddRow(new string[] {
                            "Goal Achievement",
                            "78% of goals met or exceeded"});
                table639.AddRow(new string[] {
                            "Parent Satisfaction",
                            "4.6/5 average rating"});
                table639.AddRow(new string[] {
                            "School Integration",
                            "92% regular classroom time"});
                table639.AddRow(new string[] {
                            "Service Efficiency",
                            "15% reduction in service need"});
                table639.AddRow(new string[] {
                            "Early Intervention",
                            "65% prevented escalation"});
#line 142
      testRunner.Then("report includes:", ((string)(null)), table639, "Then ");
#line hidden
#line 149
    testRunner.And("supporting documentation is attached", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="FERPA compliance check")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "FERPA compliance check")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void FERPAComplianceCheck()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("FERPA compliance check", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 155
      testRunner.Given("educational records exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 156
      testRunner.When("I audit FERPA compliance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table640 = new TechTalk.SpecFlow.Table(new string[] {
                            "Requirement",
                            "Status",
                            "Details"});
                table640.AddRow(new string[] {
                            "Parent access rights",
                            "Compliant",
                            "All requests fulfilled"});
                table640.AddRow(new string[] {
                            "Consent for disclosure",
                            "Compliant",
                            "100% documented"});
                table640.AddRow(new string[] {
                            "Directory info opt-outs",
                            "Applied",
                            "12 students opted out"});
                table640.AddRow(new string[] {
                            "Third party access",
                            "Logged",
                            "All access authenticated"});
                table640.AddRow(new string[] {
                            "Annual notification",
                            "Sent",
                            "2023-08-15"});
#line 157
      testRunner.Then("system verifies:", ((string)(null)), table640, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Data retention compliance")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Data retention compliance")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void DataRetentionCompliance()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Data retention compliance", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 167
      testRunner.Given("retention policies are configured", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 168
      testRunner.When("I run retention audit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table641 = new TechTalk.SpecFlow.Table(new string[] {
                            "Record Type",
                            "Retention Period",
                            "Due for Deletion",
                            "Action Required"});
                table641.AddRow(new string[] {
                            "Session Notes",
                            "7 years",
                            "127 records",
                            "Review and approve"});
                table641.AddRow(new string[] {
                            "Evaluations",
                            "7 years",
                            "43 records",
                            "Review and approve"});
                table641.AddRow(new string[] {
                            "Billing Records",
                            "10 years",
                            "0 records",
                            "None"});
                table641.AddRow(new string[] {
                            "Audit Logs",
                            "6 years",
                            "10,847 records",
                            "Auto-delete scheduled"});
#line 169
      testRunner.Then("system reports:", ((string)(null)), table641, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Monitor staff compliance training")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Monitor staff compliance training")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MonitorStaffComplianceTraining()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Monitor staff compliance training", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 179
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 180
      testRunner.Given("annual training requirements exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 181
      testRunner.When("I check training compliance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table642 = new TechTalk.SpecFlow.Table(new string[] {
                            "Training Module",
                            "Required By",
                            "Completed",
                            "Overdue"});
                table642.AddRow(new string[] {
                            "HIPAA Privacy",
                            "All Staff",
                            "42/45",
                            "3"});
                table642.AddRow(new string[] {
                            "Mandated Reporting",
                            "Therapists",
                            "15/15",
                            "0"});
                table642.AddRow(new string[] {
                            "Documentation Standards",
                            "Therapists",
                            "14/15",
                            "1"});
                table642.AddRow(new string[] {
                            "Billing Compliance",
                            "Admin",
                            "5/5",
                            "0"});
#line 182
      testRunner.Then("dashboard shows:", ((string)(null)), table642, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table643 = new TechTalk.SpecFlow.Table(new string[] {
                            "Days Overdue",
                            "Action"});
                table643.AddRow(new string[] {
                            "1-7",
                            "Email reminder"});
                table643.AddRow(new string[] {
                            "8-14",
                            "Email + supervisor notice"});
                table643.AddRow(new string[] {
                            "15+",
                            "Access restrictions apply"});
#line 188
      testRunner.And("overdue training triggers:", ((string)(null)), table643, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track continuing education")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Track continuing education")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackContinuingEducation()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track continuing education", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 195
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 196
      testRunner.Given("therapists need CE hours", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 197
      testRunner.When("I view CE compliance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table644 = new TechTalk.SpecFlow.Table(new string[] {
                            "Therapist",
                            "Required",
                            "Completed",
                            "Deadline",
                            "Status"});
                table644.AddRow(new string[] {
                            "Sarah Johnson",
                            "24 hours",
                            "18 hours",
                            "2024-12-31",
                            "On Track"});
                table644.AddRow(new string[] {
                            "Michael Chen",
                            "24 hours",
                            "24 hours",
                            "2024-12-31",
                            "Complete"});
                table644.AddRow(new string[] {
                            "Amy Lee",
                            "36 hours",
                            "30 hours",
                            "2024-06-30",
                            "At Risk"});
#line 198
      testRunner.Then("report shows:", ((string)(null)), table644, "Then ");
#line hidden
#line 203
      testRunner.And("CE certificates are on file", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Prepare for external audit")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Prepare for external audit")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void PrepareForExternalAudit()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Prepare for external audit", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 208
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 209
      testRunner.Given("Medicaid audit scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 210
      testRunner.When("I generate audit preparation package", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table645 = new TechTalk.SpecFlow.Table(new string[] {
                            "Document Set",
                            "Status",
                            "Items"});
                table645.AddRow(new string[] {
                            "Service Documentation",
                            "Complete",
                            "1,247"});
                table645.AddRow(new string[] {
                            "Billing Records",
                            "Complete",
                            "1,198"});
                table645.AddRow(new string[] {
                            "Authorization Records",
                            "Complete",
                            "324"});
                table645.AddRow(new string[] {
                            "Therapist Credentials",
                            "Current",
                            "15"});
                table645.AddRow(new string[] {
                            "Policy/Procedures",
                            "Updated 2024",
                            "23"});
                table645.AddRow(new string[] {
                            "Training Records",
                            "Complete",
                            "45"});
#line 211
      testRunner.Then("package includes:", ((string)(null)), table645, "Then ");
#line hidden
#line 219
      testRunner.And("all documents are organized by audit requirements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Respond to audit findings")]
        [Xunit.TraitAttribute("FeatureTitle", "Compliance and Reporting")]
        [Xunit.TraitAttribute("Description", "Respond to audit findings")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RespondToAuditFindings()
        {
            string[] tagsOfScenario = new string[] {
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Respond to audit findings", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 222
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 223
      testRunner.Given("audit identified issues", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 224
      testRunner.When("I create corrective action plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table646 = new TechTalk.SpecFlow.Table(new string[] {
                            "Finding",
                            "Root Cause",
                            "Corrective Action",
                            "Due Date"});
                table646.AddRow(new string[] {
                            "Late documentation",
                            "Staff shortage",
                            "Hire additional staff",
                            "2024-03-01"});
                table646.AddRow(new string[] {
                            "Missing authorizations",
                            "Process gap",
                            "Automated checks",
                            "2024-02-15"});
                table646.AddRow(new string[] {
                            "Training gaps",
                            "Scheduling",
                            "Mandatory sessions",
                            "2024-02-01"});
#line 225
      testRunner.Then("plan includes:", ((string)(null)), table646, "Then ");
#line hidden
#line 230
      testRunner.And("progress tracking is enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 231
      testRunner.And("follow-up audit scheduled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ComplianceAndReportingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ComplianceAndReportingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
