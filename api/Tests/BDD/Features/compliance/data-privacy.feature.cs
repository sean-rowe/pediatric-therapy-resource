// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Compliance
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DataPrivacyAndComplianceAPIEndpointsFeature : object, Xunit.IClassFixture<DataPrivacyAndComplianceAPIEndpointsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "data-privacy.feature"
#line hidden
        
        public DataPrivacyAndComplianceAPIEndpointsFeature(DataPrivacyAndComplianceAPIEndpointsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/compliance", "Data Privacy and Compliance API Endpoints", "  As a platform user or administrator\n  I want data privacy and compliance tools\n" +
                    "  So that I can ensure HIPAA, FERPA, GDPR, and CCPA compliance", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 9
    testRunner.And("compliance features are enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record privacy consent")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Privacy and Compliance API Endpoints")]
        [Xunit.TraitAttribute("Description", "Record privacy consent")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "privacy")]
        [Xunit.TraitAttribute("Category", "consent")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordPrivacyConsent()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "privacy",
                    "consent",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record privacy consent", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table664 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table664.AddRow(new string[] {
                            "userId",
                            "user-123"});
                table664.AddRow(new string[] {
                            "consentType",
                            "data-processing"});
                table664.AddRow(new string[] {
                            "consentGiven",
                            "true"});
                table664.AddRow(new string[] {
                            "ipAddress",
                            "192.168.1.1"});
                table664.AddRow(new string[] {
                            "timestamp",
                            "2024-01-22T10:00:00Z"});
                table664.AddRow(new string[] {
                            "version",
                            "2.1"});
#line 14
    testRunner.When("I send a POST request to \"/api/privacy/consent\" with:", ((string)(null)), table664, "When ");
#line hidden
#line 22
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
    testRunner.And("consent should be recorded immutably", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
    testRunner.And("audit trail should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Export user data for GDPR request")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Privacy and Compliance API Endpoints")]
        [Xunit.TraitAttribute("Description", "Export user data for GDPR request")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "privacy")]
        [Xunit.TraitAttribute("Category", "gdpr")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ExportUserDataForGDPRRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "privacy",
                    "gdpr",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Export user data for GDPR request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 29
    testRunner.Given("user \"user-123\" requests their data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
    testRunner.When("I send a GET request to \"/api/privacy/user/user-123/data\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 31
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table665 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table665.AddRow(new string[] {
                            "personalData",
                            "object"});
                table665.AddRow(new string[] {
                            "activityHistory",
                            "array"});
                table665.AddRow(new string[] {
                            "consentRecords",
                            "array"});
                table665.AddRow(new string[] {
                            "dataSharing",
                            "array"});
                table665.AddRow(new string[] {
                            "exportUrl",
                            "string"});
#line 32
    testRunner.And("the response should contain:", ((string)(null)), table665, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Process right to be forgotten request")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Privacy and Compliance API Endpoints")]
        [Xunit.TraitAttribute("Description", "Process right to be forgotten request")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "privacy")]
        [Xunit.TraitAttribute("Category", "deletion")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ProcessRightToBeForgottenRequest()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "privacy",
                    "deletion",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Process right to be forgotten request", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 43
    testRunner.Given("user \"user-123\" requests data deletion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table666 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table666.AddRow(new string[] {
                            "confirmDeletion",
                            "true"});
                table666.AddRow(new string[] {
                            "retentionExempt",
                            "[\"legal-requirement\"]"});
                table666.AddRow(new string[] {
                            "reason",
                            "user-request"});
#line 44
    testRunner.When("I send a DELETE request to \"/api/privacy/user/user-123/data\" with:", ((string)(null)), table666, "When ");
#line hidden
#line 49
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
    testRunner.And("personal data should be anonymized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
    testRunner.And("legally required data should be retained", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.And("deletion certificate should be generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Access audit trail")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Privacy and Compliance API Endpoints")]
        [Xunit.TraitAttribute("Description", "Access audit trail")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "compliance")]
        [Xunit.TraitAttribute("Category", "audit")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void AccessAuditTrail()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "compliance",
                    "audit",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access audit trail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 57
    testRunner.When("I send a GET request to \"/api/compliance/audit-trail?entity=student-123&days=30\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table667 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table667.AddRow(new string[] {
                            "events",
                            "array"});
                table667.AddRow(new string[] {
                            "users",
                            "array"});
                table667.AddRow(new string[] {
                            "actions",
                            "array"});
                table667.AddRow(new string[] {
                            "timestamps",
                            "array"});
#line 59
    testRunner.And("the response should contain:", ((string)(null)), table667, "And ");
#line hidden
#line 65
    testRunner.And("all data access should be logged", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Report potential data breach")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Privacy and Compliance API Endpoints")]
        [Xunit.TraitAttribute("Description", "Report potential data breach")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "compliance")]
        [Xunit.TraitAttribute("Category", "breach")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ReportPotentialDataBreach()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "compliance",
                    "breach",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Report potential data breach", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table668 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table668.AddRow(new string[] {
                            "incidentType",
                            "unauthorized-access"});
                table668.AddRow(new string[] {
                            "affectedRecords",
                            "150"});
                table668.AddRow(new string[] {
                            "discoveryDate",
                            "2024-01-22T09:00:00Z"});
                table668.AddRow(new string[] {
                            "dataTypes",
                            "[\"names\", \"dob\", \"diagnosis\"]"});
                table668.AddRow(new string[] {
                            "containmentSteps",
                            "[\"passwords-reset\", \"access-revoked\"]"});
#line 70
    testRunner.When("I send a POST request to \"/api/compliance/breach-notification\" with:", ((string)(null)), table668, "When ");
#line hidden
#line 77
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
    testRunner.And("incident response should be triggered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
    testRunner.And("compliance team should be notified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.And("breach assessment should begin", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Generate HIPAA compliance report")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Privacy and Compliance API Endpoints")]
        [Xunit.TraitAttribute("Description", "Generate HIPAA compliance report")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "compliance")]
        [Xunit.TraitAttribute("Category", "hipaa")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GenerateHIPAAComplianceReport()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "compliance",
                    "hipaa",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Generate HIPAA compliance report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 85
    testRunner.When("I send a GET request to \"/api/compliance/reports/hipaa?period=quarter\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table669 = new TechTalk.SpecFlow.Table(new string[] {
                            "section",
                            "status"});
                table669.AddRow(new string[] {
                            "access-controls",
                            "compliant"});
                table669.AddRow(new string[] {
                            "encryption",
                            "compliant"});
                table669.AddRow(new string[] {
                            "audit-logs",
                            "compliant"});
                table669.AddRow(new string[] {
                            "workforce-training",
                            "95%"});
                table669.AddRow(new string[] {
                            "risk-assessments",
                            "current"});
#line 87
    testRunner.And("admin report should include:", ((string)(null)), table669, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Record compliance training completion")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Privacy and Compliance API Endpoints")]
        [Xunit.TraitAttribute("Description", "Record compliance training completion")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "compliance")]
        [Xunit.TraitAttribute("Category", "training")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void RecordComplianceTrainingCompletion()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "compliance",
                    "training",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Record compliance training completion", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 97
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table670 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table670.AddRow(new string[] {
                            "userId",
                            "user-123"});
                table670.AddRow(new string[] {
                            "trainingType",
                            "hipaa-privacy"});
                table670.AddRow(new string[] {
                            "score",
                            "95"});
                table670.AddRow(new string[] {
                            "completedAt",
                            "2024-01-22T14:00:00Z"});
                table670.AddRow(new string[] {
                            "certificate",
                            "cert-url"});
#line 98
    testRunner.When("I send a POST request to \"/api/compliance/training/complete\" with:", ((string)(null)), table670, "When ");
#line hidden
#line 105
    testRunner.Then("the response status should be 201", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
    testRunner.And("training record should be created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
    testRunner.And("compliance percentage should update", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="View data retention policies")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Privacy and Compliance API Endpoints")]
        [Xunit.TraitAttribute("Description", "View data retention policies")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "compliance")]
        [Xunit.TraitAttribute("Category", "retention")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ViewDataRetentionPolicies()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "compliance",
                    "retention",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View data retention policies", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 112
    testRunner.When("I send a GET request to \"/api/compliance/data-retention\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table671 = new TechTalk.SpecFlow.Table(new string[] {
                            "dataType",
                            "retentionPeriod",
                            "legalBasis"});
                table671.AddRow(new string[] {
                            "student-records",
                            "7-years",
                            "FERPA"});
                table671.AddRow(new string[] {
                            "therapy-notes",
                            "7-years",
                            "HIPAA"});
                table671.AddRow(new string[] {
                            "billing-records",
                            "10-years",
                            "IRS"});
                table671.AddRow(new string[] {
                            "audit-logs",
                            "indefinite",
                            "compliance"});
#line 114
    testRunner.And("the response should contain:", ((string)(null)), table671, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Conduct access review")]
        [Xunit.TraitAttribute("FeatureTitle", "Data Privacy and Compliance API Endpoints")]
        [Xunit.TraitAttribute("Description", "Conduct access review")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "compliance")]
        [Xunit.TraitAttribute("Category", "access")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConductAccessReview()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "compliance",
                    "access",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Conduct access review", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 123
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table672 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table672.AddRow(new string[] {
                            "reviewType",
                            "quarterly"});
                table672.AddRow(new string[] {
                            "departments",
                            "[\"therapy\", \"billing\"]"});
                table672.AddRow(new string[] {
                            "checkType",
                            "least-privilege"});
#line 124
    testRunner.When("I send a POST request to \"/api/compliance/access-review\" with:", ((string)(null)), table672, "When ");
#line hidden
#line 129
    testRunner.Then("the response status should be 202", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
    testRunner.And("review should analyze all user permissions", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
    testRunner.And("over-privileged accounts should be identified", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
    testRunner.And("recommendations should be provided", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                DataPrivacyAndComplianceAPIEndpointsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                DataPrivacyAndComplianceAPIEndpointsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
