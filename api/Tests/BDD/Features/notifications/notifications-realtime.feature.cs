// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UPTRMS.Api.Tests.BDD.Features.Notifications
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NotificationsAndReal_TimeAPIEndpointsFeature : object, Xunit.IClassFixture<NotificationsAndReal_TimeAPIEndpointsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "notifications-realtime.feature"
#line hidden
        
        public NotificationsAndReal_TimeAPIEndpointsFeature(NotificationsAndReal_TimeAPIEndpointsFeature.FixtureData fixtureData, UPTRMS_Api_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "BDD/Features/notifications", "Notifications and Real-time API Endpoints", "  As a platform user\n  I want to receive notifications and real-time updates\n  So" +
                    " that I can stay informed about important events", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
  #line hidden
#line 7
    testRunner.Given("the API is available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
    testRunner.And("I am authenticated as \"therapist@clinic.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get user notifications")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get user notifications")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "list")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetUserNotifications()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "notifications",
                    "list",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get user notifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 13
    testRunner.When("I send a GET request to \"/api/notifications?unread=true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1725 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1725.AddRow(new string[] {
                            "notifications",
                            "array"});
                table1725.AddRow(new string[] {
                            "unreadCount",
                            "number"});
                table1725.AddRow(new string[] {
                            "total",
                            "number"});
#line 15
    testRunner.And("the response should contain:", ((string)(null)), table1725, "And ");
#line hidden
                TechTalk.SpecFlow.Table table1726 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1726.AddRow(new string[] {
                            "id",
                            "string"});
                table1726.AddRow(new string[] {
                            "type",
                            "string"});
                table1726.AddRow(new string[] {
                            "title",
                            "string"});
                table1726.AddRow(new string[] {
                            "message",
                            "string"});
                table1726.AddRow(new string[] {
                            "createdAt",
                            "string"});
                table1726.AddRow(new string[] {
                            "read",
                            "boolean"});
                table1726.AddRow(new string[] {
                            "actionUrl",
                            "string"});
#line 20
    testRunner.And("each notification should contain:", ((string)(null)), table1726, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Mark notification as read")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Mark notification as read")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "read")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MarkNotificationAsRead()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "notifications",
                    "read",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mark notification as read", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 33
    testRunner.Given("I have unread notification \"notif-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
    testRunner.When("I send a PUT request to \"/api/notifications/notif-123/read\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
    testRunner.And("notification should be marked as read", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
    testRunner.And("unread count should decrease", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Mark all notifications as read")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Mark all notifications as read")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "bulk")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void MarkAllNotificationsAsRead()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "notifications",
                    "bulk",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mark all notifications as read", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 41
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 42
    testRunner.Given("I have multiple unread notifications", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 43
    testRunner.When("I send a PUT request to \"/api/notifications/read-all\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
    testRunner.And("all notifications should be marked as read", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
    testRunner.And("unread count should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get notification preferences")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get notification preferences")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "preferences")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetNotificationPreferences()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "notifications",
                    "preferences",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get notification preferences", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 51
    testRunner.When("I send a GET request to \"/api/notifications/preferences\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1727 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1727.AddRow(new string[] {
                            "email",
                            "object"});
                table1727.AddRow(new string[] {
                            "push",
                            "object"});
                table1727.AddRow(new string[] {
                            "inApp",
                            "object"});
                table1727.AddRow(new string[] {
                            "sms",
                            "object"});
                table1727.AddRow(new string[] {
                            "quietHours",
                            "object"});
                table1727.AddRow(new string[] {
                            "frequency",
                            "string"});
#line 53
    testRunner.And("the response should contain:", ((string)(null)), table1727, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update notification preferences")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Update notification preferences")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "settings")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UpdateNotificationPreferences()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "notifications",
                    "settings",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update notification preferences", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1728 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1728.AddRow(new string[] {
                            "email.newResources",
                            "true"});
                table1728.AddRow(new string[] {
                            "email.studentProgress",
                            "true"});
                table1728.AddRow(new string[] {
                            "push.sessionReminders",
                            "true"});
                table1728.AddRow(new string[] {
                            "quietHours.start",
                            "22:00"});
                table1728.AddRow(new string[] {
                            "quietHours.end",
                            "07:00"});
                table1728.AddRow(new string[] {
                            "frequency",
                            "immediate"});
#line 65
    testRunner.When("I send a PUT request to \"/api/notifications/preferences\" with:", ((string)(null)), table1728, "When ");
#line hidden
#line 73
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
    testRunner.And("preferences should be updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
    testRunner.And("future notifications should respect settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Subscribe to push notifications")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Subscribe to push notifications")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "push")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubscribeToPushNotifications()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "notifications",
                    "push",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe to push notifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1729 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1729.AddRow(new string[] {
                            "deviceToken",
                            "device-token-123"});
                table1729.AddRow(new string[] {
                            "deviceType",
                            "ios"});
                table1729.AddRow(new string[] {
                            "appVersion",
                            "1.2.3"});
#line 80
    testRunner.When("I send a POST request to \"/api/notifications/subscribe\" with:", ((string)(null)), table1729, "When ");
#line hidden
#line 85
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
    testRunner.And("device should be registered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.And("test notification should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unsubscribe device from push notifications")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Unsubscribe device from push notifications")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "unsubscribe")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void UnsubscribeDeviceFromPushNotifications()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "notifications",
                    "unsubscribe",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unsubscribe device from push notifications", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 92
    testRunner.Given("device \"device-token-123\" is subscribed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
    testRunner.When("I send a DELETE request to \"/api/notifications/subscribe/device-token-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
    testRunner.And("device should be unregistered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
    testRunner.And("no more push notifications should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Connect to notifications WebSocket")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Connect to notifications WebSocket")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "websocket")]
        [Xunit.TraitAttribute("Category", "real-time")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void ConnectToNotificationsWebSocket()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "websocket",
                    "real-time",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Connect to notifications WebSocket", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 101
    testRunner.When("I connect to WebSocket \"/ws/notifications\" with auth token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
    testRunner.Then("connection should be established", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1730 = new TechTalk.SpecFlow.Table(new string[] {
                            "type",
                            "connected"});
                table1730.AddRow(new string[] {
                            "userId",
                            "user-123"});
#line 103
    testRunner.And("I should receive message:", ((string)(null)), table1730, "And ");
#line hidden
#line 106
    testRunner.And("real-time notifications should be received", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Real-time session collaboration")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Real-time session collaboration")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "websocket")]
        [Xunit.TraitAttribute("Category", "session")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void Real_TimeSessionCollaboration()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "websocket",
                    "session",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Real-time session collaboration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 110
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 111
    testRunner.Given("I am in session \"session-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
    testRunner.When("I connect to WebSocket \"/ws/session/session-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1731 = new TechTalk.SpecFlow.Table(new string[] {
                            "event",
                            "data"});
                table1731.AddRow(new string[] {
                            "student.progress",
                            "Goal achievement"});
                table1731.AddRow(new string[] {
                            "resource.shared",
                            "New resource added"});
                table1731.AddRow(new string[] {
                            "data.collected",
                            "Progress updated"});
#line 113
    testRunner.Then("I should receive real-time updates:", ((string)(null)), table1731, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Real-time marketplace updates")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Real-time marketplace updates")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "websocket")]
        [Xunit.TraitAttribute("Category", "marketplace")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void Real_TimeMarketplaceUpdates()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "websocket",
                    "marketplace",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Real-time marketplace updates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 122
    testRunner.Given("I am a marketplace seller", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 123
    testRunner.When("I connect to WebSocket \"/ws/marketplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1732 = new TechTalk.SpecFlow.Table(new string[] {
                            "event",
                            "data"});
                table1732.AddRow(new string[] {
                            "sale.completed",
                            "Order details"});
                table1732.AddRow(new string[] {
                            "review.posted",
                            "New review"});
                table1732.AddRow(new string[] {
                            "question.asked",
                            "Buyer question"});
#line 124
    testRunner.Then("I should receive:", ((string)(null)), table1732, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Broadcast notification to users")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Broadcast notification to users")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "admin")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void BroadcastNotificationToUsers()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "notifications",
                    "admin",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Broadcast notification to users", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 132
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 133
    testRunner.Given("I have admin privileges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1733 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1733.AddRow(new string[] {
                            "audience",
                            "all-active-users"});
                table1733.AddRow(new string[] {
                            "title",
                            "System Maintenance"});
                table1733.AddRow(new string[] {
                            "message",
                            "Scheduled maintenance tonight"});
                table1733.AddRow(new string[] {
                            "priority",
                            "high"});
                table1733.AddRow(new string[] {
                            "channels",
                            "[\"email\", \"push\", \"in-app\"]"});
#line 134
    testRunner.When("I send a POST request to \"/api/notifications/broadcast\" with:", ((string)(null)), table1733, "When ");
#line hidden
#line 141
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
    testRunner.And("notification should be queued", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
    testRunner.And("delivery status should be trackable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Track notification delivery")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Track notification delivery")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "tracking")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void TrackNotificationDelivery()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "notifications",
                    "tracking",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Track notification delivery", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 147
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 148
    testRunner.Given("broadcast notification \"broadcast-123\" was sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 149
    testRunner.When("I send a GET request to \"/api/notifications/delivery/broadcast-123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 150
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1734 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1734.AddRow(new string[] {
                            "sent",
                            "number"});
                table1734.AddRow(new string[] {
                            "delivered",
                            "number"});
                table1734.AddRow(new string[] {
                            "opened",
                            "number"});
                table1734.AddRow(new string[] {
                            "failed",
                            "number"});
                table1734.AddRow(new string[] {
                            "channels",
                            "object"});
#line 151
    testRunner.And("the response should contain:", ((string)(null)), table1734, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Subscribe to server-sent events")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Subscribe to server-sent events")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "sse")]
        [Xunit.TraitAttribute("Category", "updates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SubscribeToServer_SentEvents()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "sse",
                    "updates",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subscribe to server-sent events", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 161
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 162
    testRunner.When("I connect to SSE endpoint \"/sse/updates\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1735 = new TechTalk.SpecFlow.Table(new string[] {
                            "event",
                            "data"});
                table1735.AddRow(new string[] {
                            "resource.new",
                            "New resources info"});
                table1735.AddRow(new string[] {
                            "student.milestone",
                            "Goal achieved"});
                table1735.AddRow(new string[] {
                            "system.announcement",
                            "Platform updates"});
#line 163
    testRunner.Then("I should receive events:", ((string)(null)), table1735, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Send test notification")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Send test notification")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "testing")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void SendTestNotification()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "notifications",
                    "testing",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send test notification", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 171
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1736 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "value"});
                table1736.AddRow(new string[] {
                            "channel",
                            "email"});
                table1736.AddRow(new string[] {
                            "template",
                            "welcome"});
#line 172
    testRunner.When("I send a POST request to \"/api/notifications/test\" with:", ((string)(null)), table1736, "When ");
#line hidden
#line 176
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 177
    testRunner.And("test notification should be sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
    testRunner.And("delivery should be confirmed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get notification templates")]
        [Xunit.TraitAttribute("FeatureTitle", "Notifications and Real-time API Endpoints")]
        [Xunit.TraitAttribute("Description", "Get notification templates")]
        [Xunit.TraitAttribute("Category", "endpoint")]
        [Xunit.TraitAttribute("Category", "notifications")]
        [Xunit.TraitAttribute("Category", "templates")]
        [Xunit.TraitAttribute("Category", "not-implemented")]
        public void GetNotificationTemplates()
        {
            string[] tagsOfScenario = new string[] {
                    "endpoint",
                    "notifications",
                    "templates",
                    "not-implemented"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get notification templates", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 182
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
  this.FeatureBackground();
#line hidden
#line 183
    testRunner.Given("I have admin privileges", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 184
    testRunner.When("I send a GET request to \"/api/notifications/templates\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 185
    testRunner.Then("the response status should be 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1737 = new TechTalk.SpecFlow.Table(new string[] {
                            "field",
                            "type"});
                table1737.AddRow(new string[] {
                            "templateId",
                            "string"});
                table1737.AddRow(new string[] {
                            "name",
                            "string"});
                table1737.AddRow(new string[] {
                            "channels",
                            "array"});
                table1737.AddRow(new string[] {
                            "variables",
                            "array"});
                table1737.AddRow(new string[] {
                            "lastModified",
                            "string"});
#line 186
    testRunner.And("the response should contain array of:", ((string)(null)), table1737, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NotificationsAndReal_TimeAPIEndpointsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NotificationsAndReal_TimeAPIEndpointsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
