<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.EntityFrameworkCore.SqlServer</name>
    </assembly>
    <members>
        <member name="T:Microsoft.EntityFrameworkCore.DataCompressionType">
            <summary>
                Indicates type of data compression used on a index.
            </summary>
            <remarks>
                See <see href="https://docs.microsoft.com/sql/relational-databases/data-compression">Data Compression</see> for more information on
                data compression.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DataCompressionType.None">
            <summary>
                Index is not compressed.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DataCompressionType.Row">
            <summary>
                Index is compressed by using row compression.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.DataCompressionType.Page">
            <summary>
                Index is compressed by using page compression.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerAnnotationCodeGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerAnnotationCodeGenerator.#ctor(Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerAnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerAnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.#ctor(Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorDependencies,Microsoft.EntityFrameworkCore.Design.Internal.RelationalCSharpRuntimeAnnotationCodeGeneratorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IColumn,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.ITableIndex,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.ITable,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerCSharpRuntimeAnnotationCodeGenerator.Generate(Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides,Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerDesignTimeServices">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Design.Internal.SqlServerDesignTimeServices.ConfigureDesignTimeServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogDecimalTypeKey">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogDefaultDecimalTypeColumn">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogByteIdentityColumn">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogColumnWithoutType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogFoundDefaultSchema">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogFoundTypeAlias">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogFoundColumn">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogFoundForeignKey">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogPrincipalTableNotInSelectionSet">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogMissingSchema">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogMissingTable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogFoundSequence">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogFoundTable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogFoundIndex">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogFoundPrimaryKey">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogFoundUniqueConstraint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogPrincipalColumnNotFound">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogReflexiveConstraintIgnored">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogDuplicateForeignKeyConstraintIgnored">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogPrincipalTableInformationNotFound">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogSavepointsDisabledBecauseOfMARS">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogConflictingValueGenerationStrategies">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogMissingViewDefinitionRights">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Diagnostics.Internal.SqlServerLoggingDefinitions.LogJsonTypeExperimental">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.DecimalTypeKeyWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.DecimalTypeDefaultWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.ByteIdentityColumnWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.JsonTypeExperimental(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.ConflictingValueGenerationStrategiesWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy,System.String,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.ColumnFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.ForeignKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.DefaultSchemaFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.TypeAliasFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.PrimaryKeyFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.UniqueConstraintFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.IndexFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.ForeignKeyReferencesUnknownPrincipalTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.ForeignKeyReferencesMissingPrincipalTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.ForeignKeyPrincipalColumnMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.MissingSchemaWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.MissingTableWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.ColumnWithoutTypeWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.SequenceFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.Boolean,System.Int32,System.Int64,System.Int64,System.Int64)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.TableFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.ReflexiveConstraintIgnored(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.DuplicateForeignKeyConstraintIgnored(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},System.String,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.SavepointsDisabledBecauseOfMARS(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Extensions.Internal.SqlServerLoggerExtensions.MissingViewDefinitionRightsWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions.EngineType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions.SqlServerCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions.AzureSqlCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions.AzureSynapseCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerEngineType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerEngineType.Unknown">
            <summary>
                Unknown SQL engine type.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerEngineType.SqlServer">
            <summary>
                SQL Server.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerEngineType.AzureSql">
            <summary>
                Azure SQL.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerEngineType.AzureSynapse">
            <summary>
                Azure Synapse.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies,Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidatorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.Validate(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateUseOfJsonType(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateDecimalColumns(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateByteIdentityMapping(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateValueGeneration(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateTypeMappings(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateIndexIncludeProperties(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateTemporalTables(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateSharedTableCompatibility(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IEntityType},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateSharedColumnsCompatibility(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IEntityType},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateCompatible(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateCompatible(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IKey,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerModelValidator.ValidateCompatible(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.IIndex,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.SqlServerDefaultCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.AzureSqlDefaultCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.AzureSynapseDefaultCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.#ctor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.#ctor(Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.Info">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.Clone">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.EngineType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.SqlServerCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.AzureSqlCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.AzureSynapseCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.UseRetryingStrategyByDefault">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.WithEngineType(Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerEngineType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.WithLegacyAzureSql(System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.WithSqlServerCompatibilityLevel(System.Nullable{System.Int32})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.WithAzureSqlCompatibilityLevel(System.Nullable{System.Int32})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.WithAzureSynapseCompatibilityLevel(System.Nullable{System.Int32})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.WithUseRetryingStrategyByDefault(System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.ApplyDefaults(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerOptionsExtension.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerSingletonOptions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerSingletonOptions.EngineType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerSingletonOptions.SqlServerCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerSingletonOptions.AzureSqlCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerSingletonOptions.AzureSynapseCompatibilityLevel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerSingletonOptions.Initialize(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.SqlServerSingletonOptions.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.Prefix">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.Clustered">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.CreatedOnline">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.EditionOptions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.FillFactor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.SortInTempDb">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.DataCompression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.HiLoSequenceName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.HiLoSequenceSchema">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.SequenceNameSuffix">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.SequenceName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.SequenceSchema">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.Identity">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.IdentityIncrement">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.IdentitySeed">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.Include">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.MaxDatabaseSize">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.MemoryOptimized">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.PerformanceLevelSql">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.ServiceTierSql">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.Sparse">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.IsTemporal">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalHistoryTableName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalHistoryTableSchema">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalPeriodStartPropertyName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalPeriodStartColumnName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalPeriodEndPropertyName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalPeriodEndColumnName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalOperationType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalAsOfPointInTime">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalRangeOperationFrom">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalRangeOperationTo">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.ValueGenerationStrategy">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.UseSqlOutputClause">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalIsPeriodStartColumn">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationNames.TemporalIsPeriodEndColumn">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider.#ctor(Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProviderDependencies)">
            <summary>
                Initializes a new instance of this class.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this service.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ITable,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ITableIndex,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Metadata.Internal.SqlServerAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IColumn,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository.#ctor(Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository.ExistsSql">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository.InterpretExistsResult(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository.LockReleaseBehavior">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository.AcquireDatabaseLock">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository.AcquireDatabaseLockAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository.GetCreateIfNotExistsScript">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository.GetBeginIfNotExistsScript(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository.GetBeginIfExistsScript(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerHistoryRepository.GetEndIfScript">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationDatabaseLock">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationDatabaseLock.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject,Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository,System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationDatabaseLock.HistoryRepository">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationDatabaseLock.Dispose">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationDatabaseLock.DisposeAsync">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider.#ctor(Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProviderDependencies)">
            <summary>
                Initializes a new instance of this class.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this service.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.ITable)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IColumn)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider.ForRename(Microsoft.EntityFrameworkCore.Metadata.ITable)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Migrations.Internal.SqlServerMigrationsAnnotationProvider.ForRename(Microsoft.EntityFrameworkCore.Metadata.IColumn)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.AlreadyConfiguredEngineType(System.Object,System.Object)">
            <summary>
                Cannot configure engine type '{newEngineType}', because engine type was already configured as '{oldEngineType}'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.AlterIdentityColumn">
            <summary>
                To change the IDENTITY property of a column, the column needs to be dropped and recreated.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.AlterMemoryOptimizedTable">
            <summary>
                To change the memory-optimized setting on a table, the table needs to be dropped and recreated.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.CannotProduceUnterminatedSQLWithComments(System.Object)">
            <summary>
                Can't produce unterminated SQL with comments when generating migrations SQL for {operation}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.CompatibilityLevelTooLowForScalarCollections(System.Object)">
            <summary>
                EF Core's SQL Server compatibility level is set to {compatibilityLevel}; compatibility level 130 (SQL Server 2016) is the minimum for most forms of querying of JSON arrays.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateColumnIdentityIncrementMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}', but are configured with different identity increment values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateColumnIdentitySeedMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}', but are configured with different identity seed values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateColumnNameValueGenerationStrategyMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}', but are configured with different value generation strategies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateColumnSequenceMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}', but are configured with different hi-lo sequences.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateColumnSparsenessMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}', but are configured with different sparseness.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateIndexClusteredMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different clustered configurations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateIndexDataCompressionMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different data compression configurations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateIndexFillFactorMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different fill factor configurations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateIndexIncludedMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different included columns: {includedColumns1} and {includedColumns2}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateIndexOnlineMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different online configurations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateIndexSortInTempDbMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The indexes {index1} on '{entityType1}' and {index2} on '{entityType2}' are both mapped to '{table}.{indexName}', but have different sort in tempdb configurations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.DuplicateKeyMismatchedClustering(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The keys {key1} on '{entityType1}' and {key2} on '{entityType2}' are both mapped to '{table}.{keyName}', but have different clustering configurations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.IdentityBadType(System.Object,System.Object,System.Object)">
            <summary>
                Identity value generation cannot be used for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Identity value generation can only be used with signed integer properties.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.IncludePropertyDuplicated(System.Object,System.Object,System.Object)">
            <summary>
                The include property '{entityType}.{property}' was specified multiple times for the index {index}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.IncludePropertyInIndex(System.Object,System.Object,System.Object)">
            <summary>
                The include property '{entityType}.{property}' is already part of the index {index}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.IncludePropertyNotFound(System.Object,System.Object,System.Object)">
            <summary>
                The include property '{property}' specified on the index {index} was not found on entity type '{entityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.IncompatibleSqlOutputClauseMismatch(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and entity type '{entityTypeWithSqlOutputClause}' is configured to use the SQL OUTPUT clause, but entity type '{entityTypeWithoutSqlOutputClause}' is not.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.IncompatibleTableMemoryOptimizedMismatch(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and entity type '{memoryOptimizedEntityType}' is marked as memory-optimized, but entity type '{nonMemoryOptimizedEntityType}' is not.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.IndexTableRequired">
            <summary>
                SQL Server requires the table name to be specified for index operations. Specify table name in calls to 'MigrationBuilder.RenameIndex' and 'DropIndex'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.InvalidColumnNameForFreeText">
            <summary>
                The expression passed to the 'propertyReference' parameter of the 'FreeText' method is not a valid reference to a property. The expression must represent a reference to a full-text indexed property on the object referenced in the from clause: 'from e in context.Entities where EF.Functions.FreeText(e.SomeProperty, textToSearchFor) select e'
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.InvalidEngineType(System.Object)">
            <summary>
                Engine type was not configured. Use one of {methods} to configure it.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.InvalidTableToIncludeInScaffolding(System.Object)">
            <summary>
                The specified table '{table}' is not in a valid format. Specify tables using the format '[schema].[table]'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.JsonValuePathExpressionsNotSupported(System.Object)">
            <summary>
                A non-constant array index or property name was used when navigating inside a JSON document, but EF Core's SQL Server compatibility level is set to {compatibilityLevel}; this is only supported with compatibility level 140 (SQL Server 2017) or higher.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.LeastGreatestCompatibilityLevelTooLow">
            <summary>
                This usage of Math.Min or Math.Max requires SQL Server functions LEAST and GREATEST, which require compatibility level 160.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.MultipleIdentityColumns(System.Object,System.Object)">
            <summary>
                The properties {properties} are configured to use 'Identity' value generation and are mapped to the same table '{table}', but only one column per table can be configured as 'Identity'. Call 'ValueGeneratedNever' in 'OnModelCreating' for properties that should not use 'Identity'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.NoInitialCatalog">
            <summary>
                The database name could not be determined. To use 'EnsureDeleted', the connection string must specify 'Initial Catalog'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.NoSavepointRelease">
            <summary>
                SQL Server does not support releasing a savepoint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.QueryingOrderedBinaryJsonCollectionsNotSupported">
            <summary>
                The query is attempting to query a JSON collection of binary data in a context that requires preserving the ordering of the collection; this isn't supported by SQL Server.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.SaveChangesFailedBecauseOfComputedColumnWithFunction">
            <summary>
                Could not save changes because the target table has computed column with a function that performs data access. Please configure your table accordingly, see https://aka.ms/efcore-docs-sqlserver-save-changes-and-output-clause for more information.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.SaveChangesFailedBecauseOfTriggers">
            <summary>
                Could not save changes because the target table has database triggers. Please configure your table accordingly, see https://aka.ms/efcore-docs-sqlserver-save-changes-and-output-clause for more information.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.SequenceBadType(System.Object,System.Object,System.Object)">
            <summary>
                SQL Server sequences cannot be used to generate values for the property '{property}' on entity type '{entityType}' because the property type is '{propertyType}'. Sequences can only be used with integer properties.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.SplitQueryOffsetWithoutOrderBy">
            <summary>
                The query uses 'Skip' without specifying ordering and uses split query mode. This generates incorrect results. Either provide ordering or run query in single query mode using `AsSingleQuery()`. See https://go.microsoft.com/fwlink/?linkid=2196526 for more information.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalAllEntitiesMappedToSameTableMustBeTemporal(System.Object)">
            <summary>
                Entity type '{entityType}' should be marked as temporal because it shares table mapping with another entity that has been marked as temporal. Alternatively, other entity types that share the same table must be non-temporal.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalExpectedPeriodPropertyNotFound(System.Object,System.Object)">
            <summary>
                Entity type '{entityType}' mapped to temporal table does not contain the expected period property: '{propertyName}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalMigrationModifyingComputedColumnNotSupported(System.Object,System.Object)">
            <summary>
                Modifying SQL of a computed column '{columnName}' on a temporal table '{tableName}' is not supported by migrations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalMustDefinePeriodProperties(System.Object)">
            <summary>
                Entity type '{entityType}' mapped to temporal table must have a period start and a period end property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalNavigationExpansionBetweenTemporalAndNonTemporal(System.Object)">
            <summary>
                Temporal query is trying to use navigation to an entity '{entityType}' which itself doesn't map to temporal table. Either map the entity to temporal table or use join manually to access it.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalNavigationExpansionOnlySupportedForAsOf(System.Object)">
            <summary>
                Navigation expansion is only supported for '{operationName}' temporal operation. For other operations use join manually.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalNotSupportedForTableSplittingWithInconsistentPeriodMapping(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                When multiple temporal entities are mapped to the same table, their period {periodType} properties must map to the same column. Issue happens for entity type '{entityType}' with period property '{periodProperty}' which is mapped to column '{periodColumn}'. Expected period column name is '{expectedColumnName}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalOnlyOnRoot(System.Object)">
            <summary>
                Only root entity type should be marked as temporal. Entity type: '{entityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalOnlySupportedForTPH(System.Object)">
            <summary>
                Temporal tables are only supported for entities using Table-Per-Hierarchy inheritance mapping. Entity type: '{entityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalPeriodPropertyCantHaveDefaultValue(System.Object,System.Object)">
            <summary>
                Period property '{entityType}.{propertyName}' can't have a default value specified.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalPeriodPropertyMustBeInShadowState(System.Object,System.Object)">
            <summary>
                Period property '{entityType}.{propertyName}' must be a shadow property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalPeriodPropertyMustBeMappedToDatetime2(System.Object,System.Object,System.Object)">
            <summary>
                Period property '{entityType}.{propertyName}' must be mapped to a column of type '{columnType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalPeriodPropertyMustBeNonNullableDateTime(System.Object,System.Object,System.Object)">
            <summary>
                Period property '{entityType}.{propertyName}' must be non-nullable and of type '{dateTimeType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalPropertyMappedToPeriodColumnMustBeValueGeneratedOnAddOrUpdate(System.Object,System.Object,System.Object)">
            <summary>
                Property '{entityType}.{propertyName}' is mapped to the period column and must have ValueGenerated set to '{valueGeneratedValue}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TemporalSetOperationOnMismatchedSources(System.Object)">
            <summary>
                Set operation can't be applied on entity '{entityType}' because temporal operations on both arguments don't match.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerStrings.TransientExceptionDetected">
            <summary>
                An exception has been raised that is likely due to a transient failure. Consider enabling transient error resiliency by adding 'EnableRetryOnFailure' to the 'UseSqlServer' call.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogByteIdentityColumn(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The property '{property}' on entity type '{entityType}' is of type 'byte', but is set up to use a SQL Server identity column; this requires that values starting at 255 and counting down will be used for temporary key values. A temporary key value is needed for every entity inserted in a single call to 'SaveChanges'. Care must be taken that these values do not collide with real key values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogColumnWithoutType(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                A database type for column '{columnName}' on table '{tableName}' could not be found, the column will be skipped.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogConflictingValueGenerationStrategies(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Both the SqlServerValueGenerationStrategy '{generationStrategy}' and '{otherGenerationStrategy}' have been set on property '{propertyName}' on entity type '{entityName}'. Configuring two strategies is usually unintentional and will likely result in a database error.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogDecimalTypeKey(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The decimal property '{property}' is part of a key on entity type '{entityType}'. If the configured precision and scale don't match the column type in the database, this will cause values to be silently truncated if they do not fit in the default precision and scale. Consider using a different property as the key, or make sure that the database column type matches the model configuration and enable decimal rounding warnings using 'SET NUMERIC_ROUNDABORT ON'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogDefaultDecimalTypeColumn(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                No store type was specified for the decimal property '{property}' on entity type '{entityType}'. This will cause values to be silently truncated if they do not fit in the default precision and scale. Explicitly specify the SQL server column type that can accommodate all the values in 'OnModelCreating' using 'HasColumnType', specify precision and scale using 'HasPrecision', or configure a value converter using 'HasConversion'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogDuplicateForeignKeyConstraintIgnored(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Skipping foreign key '{foreignKeyName}' on table '{tableName}' since it is a duplicate of '{duplicateForeignKeyName}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogFoundColumn(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found column with table: {tableName}, column name: {columnName}, ordinal: {ordinal}, data type: {dataType}, maximum length: {maxLength}, precision: {precision}, scale: {scale}, nullable: {nullable}, identity: {identity}, default value: {defaultValue}, computed value: {computedValue}, computed value is stored: {stored}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogFoundDefaultSchema(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found default schema '{defaultSchema}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogFoundForeignKey(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found foreign key on table '{tableName}' with name '{foreignKeyName}', principal table '{principalTableName}', delete action {deleteAction}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogFoundIndex(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found index on table '{tableName}' with name '{indexName}', is unique: {isUnique}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogFoundPrimaryKey(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found primary key on table '{tableName}' with name '{primaryKeyName}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogFoundSequence(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found sequence with '{name}', data type: {dataType}, cyclic: {isCyclic}, increment: {increment}, start: {start}, minimum: {min}, maximum: {max}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogFoundTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found table with name '{name}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogFoundTypeAlias(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found type alias with name '{alias}' which maps to underlying data type {dataType}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogFoundUniqueConstraint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Found unique constraint on table '{tableName}' with name '{uniqueConstraintName}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogJsonTypeExperimental(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The entity type '{entityType}' makes use of the SQL Server native 'json' type. Please note that support for this type in EF Core 9 is experimental and may change in future releases.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogMissingSchema(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Unable to find a schema in the database matching the selected schema '{schema}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogMissingTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Unable to find a table in the database matching the selected table '{table}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogMissingViewDefinitionRights(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The database user has not been granted 'VIEW DEFINITION' rights. Scaffolding requires these rights to construct the Entity Framework model correctly. Without these rights, parts of the scaffolded model may be missing, resulting in incorrect interactions between Entity Framework and the database at runtime.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogPrincipalColumnNotFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Skipping foreign key with identity '{id}' on table '{tableName}', since the principal column '{principalColumnName}' on the foreign key's principal table, '{principalTableName}', was not found in the model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogPrincipalTableInformationNotFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Skipping foreign key '{foreignKeyName}' on table '{tableName}' since principal table information is not available. This usually happens when the user doesn't have permission to read data about principal table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogPrincipalTableNotInSelectionSet(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Skipping foreign key '{foreignKeyName}' on table '{tableName}' since principal table '{principalTableName}' was not found in the model. This usually happens when the principal table was not included in the selection set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogReflexiveConstraintIgnored(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Skipping foreign key '{foreignKeyName}' on table '{tableName}' since all of its columns reference themselves.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Internal.SqlServerResources.LogSavepointsDisabledBecauseOfMARS(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Savepoints are disabled because Multiple Active Result Sets (MARS) is enabled. If 'SaveChanges' fails, then the transaction cannot be automatically rolled back to a known clean state. Instead, the transaction should be rolled back by the application before retrying 'SaveChanges'. See https://go.microsoft.com/fwlink/?linkid=2149338 for more information and examples. To identify the code which triggers this warning, call 'ConfigureWarnings(w =&gt; w.Throw(SqlServerEventId.SavepointsDisabledBecauseOfMARS))'.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitCase(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitCollate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitColumn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitDelete(Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitDistinct(Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitExists(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitFromSql(Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitIn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitLike(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitAtTimeZone(Microsoft.EntityFrameworkCore.Query.SqlExpressions.AtTimeZoneExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlBinary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlUnary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlConstant(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlFragment(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitTableValuedFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitSqlParameter(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitTable(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitProjection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitOrdering(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitCrossApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitOuterApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitLeftJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitScalarSubquery(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitRowNumber(Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitRowValue(Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowValueExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitExcept(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitIntersect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitUnion(Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitUpdate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitJsonScalar(Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SearchConditionConvertingExpressionVisitor.VisitValues(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SkipTakeCollapsingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SkipTakeCollapsingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SkipTakeCollapsingExpressionVisitor.Process(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SkipTakeCollapsingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerExpression.AggregateFunction(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.EnumerableExpression,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerExpression.AggregateFunctionWithOrdering(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.EnumerableExpression,System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression">
            <summary>
                An expression that represents a SQL Server OPENJSON function call in a SQL tree.
            </summary>
            <remarks>
                <para>
                    See <see href="https://learn.microsoft.com/sql/t-sql/functions/openjson-transact-sql">OPENJSON (Transact-SQL)</see> for more
                    information and examples.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </remarks>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.JsonExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.Path">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.ColumnInfos">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.#ctor(System.String,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.PathSegment},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.ColumnInfo})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.PathSegment},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.ColumnInfo})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.Clone(System.String,System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.WithAlias(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.Quote">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.ColumnInfo">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression.ColumnInfo.#ctor(System.String,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.PathSegment},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAllQueryRootExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAllQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAllQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAllQueryRootExpression.DetachQueryProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAllQueryRootExpression.UpdateEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAllQueryRootExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAllQueryRootExpression.Equals(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAllQueryRootExpression.GetHashCode">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAsOfQueryRootExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAsOfQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAsOfQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAsOfQueryRootExpression.PointInTime">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAsOfQueryRootExpression.DetachQueryProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAsOfQueryRootExpression.UpdateEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAsOfQueryRootExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAsOfQueryRootExpression.Equals(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalAsOfQueryRootExpression.GetHashCode">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime,System.DateTime)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime,System.DateTime)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.DetachQueryProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.UpdateEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.Equals(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalBetweenQueryRootExpression.GetHashCode">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalContainedInQueryRootExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalContainedInQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime,System.DateTime)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalContainedInQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime,System.DateTime)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalContainedInQueryRootExpression.DetachQueryProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalContainedInQueryRootExpression.UpdateEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalContainedInQueryRootExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalContainedInQueryRootExpression.Equals(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalContainedInQueryRootExpression.GetHashCode">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalFromToQueryRootExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalFromToQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime,System.DateTime)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalFromToQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime,System.DateTime)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalFromToQueryRootExpression.DetachQueryProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalFromToQueryRootExpression.UpdateEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalFromToQueryRootExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalFromToQueryRootExpression.Equals(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalFromToQueryRootExpression.GetHashCode">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalQueryRootExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalQueryRootExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalRangeQueryRootExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalRangeQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime,System.DateTime)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalRangeQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.DateTime,System.DateTime)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalRangeQueryRootExpression.From">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalRangeQueryRootExpression.To">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalRangeQueryRootExpression.Equals(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalRangeQueryRootExpression.GetHashCode">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression},System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.Name">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.Arguments">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.Orderings">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.IsNullable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.ArgumentsPropagateNullability">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.Update(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.Quote">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateMethodCallTranslatorProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateMethodCallTranslatorProvider.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalAggregateMethodCallTranslatorProviderDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateOverSubqueryPostprocessor">
            <summary>
                SQL Server doesn't support aggregate function invocations over subqueries, or other aggregate function invocations; this
                postprocessor lifts such subqueries out to an OUTER APPLY/JOIN on the SELECT to work around this limitation.
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateOverSubqueryPostprocessor.#ctor(Microsoft.EntityFrameworkCore.Query.SqlAliasManager)">
            <summary>
                SQL Server doesn't support aggregate function invocations over subqueries, or other aggregate function invocations; this
                postprocessor lifts such subqueries out to an OUTER APPLY/JOIN on the SELECT to work around this limitation.
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateOverSubqueryPostprocessor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerCompiledQueryCacheKeyGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerCompiledQueryCacheKeyGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGeneratorDependencies,Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerCompiledQueryCacheKeyGenerator.GenerateCacheKey(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerEvaluatableExpressionFilter">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerEvaluatableExpressionFilter.#ctor(Microsoft.EntityFrameworkCore.Query.EvaluatableExpressionFilterDependencies,Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilterDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerEvaluatableExpressionFilter.IsEvaluatableExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor">
            <summary>
                Performs various post-processing rewriting to account for SQL Server JSON quirks.
                1. Converts <see cref="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression" /> expressions with WITH (the default) to OPENJSON without WITH under the
                following conditions:
                * When an ordering still exists on the [key] column, i.e. when the ordering of the original JSON array needs to be preserved
                (e.g. limit/offset).
                * When the column type in the WITH clause is a SQL Server "CLR type" - these are incompatible with WITH (e.g. hierarchy id).
                2. Rewrite JsonScalarExpression (JSON_VALUE()) to OPENJSON for when JSON_VALUE() isn't compatible with the type (e.g. binary data
                which needs to be base64-decoded).
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Query.SqlAliasManager)">
            <summary>
                Performs various post-processing rewriting to account for SQL Server JSON quirks.
                1. Converts <see cref="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression" /> expressions with WITH (the default) to OPENJSON without WITH under the
                following conditions:
                * When an ordering still exists on the [key] column, i.e. when the ordering of the original JSON array needs to be preserved
                (e.g. limit/offset).
                * When the column type in the WITH clause is a SQL Server "CLR type" - these are incompatible with WITH (e.g. hierarchy id).
                2. Rewrite JsonScalarExpression (JSON_VALUE()) to OPENJSON for when JSON_VALUE() isn't compatible with the type (e.g. binary data
                which needs to be base64-decoded).
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor.Process(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerJsonPostprocessor.Visit(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMemberTranslatorProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMemberTranslatorProvider.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProviderDependencies,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMethodCallTranslatorProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMethodCallTranslatorProvider.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies,Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper.#ctor(Microsoft.EntityFrameworkCore.Query.NavigationExpansionExtensibilityHelperDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper.CreateQueryRoot(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper.ValidateQueryRootCreation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNavigationExpansionExtensibilityHelper.AreQueryRootsCompatible(Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression,Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor.Optimize(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessor.ProcessSqlNullability(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessorFactory.Dependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerParameterBasedSqlProcessorFactory.Create(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContext,Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.TranslatePrimitiveCollection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.TransformJsonQueryToTable(Microsoft.EntityFrameworkCore.Query.JsonQueryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.IsNaturallyOrdered(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteDelete(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.StructuralTypeShaperExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitor.IsValidSelectExpressionForExecuteUpdate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitorFactory.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitorFactory.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryableMethodTranslatingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContext.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContextDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContextDependencies,System.Boolean,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContext.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContextDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContextDependencies,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IReadOnlySet{System.String})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContext.IsBuffering">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContext.SupportsPrecompiledQuery">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContextFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContextFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContextDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContextDependencies,Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContextFactory.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContextFactory.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContextFactory.Create(System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContextFactory.CreatePrecompiled(System.Boolean,System.Collections.Generic.IReadOnlySet{System.String})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.TryGenerateWithoutWrappingSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.VisitDelete(Microsoft.EntityFrameworkCore.Query.SqlExpressions.DeleteExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.VisitSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.VisitUpdate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.UpdateExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.VisitValues(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.GenerateValues(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ValuesExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.GenerateTop(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.GenerateProjection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.GenerateFrom(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.GenerateOrderings(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.VisitSqlServerAggregateFunction(Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.VisitJsonScalar(Microsoft.EntityFrameworkCore.Query.SqlExpressions.JsonScalarExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.VisitOpenJsonExpression(Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.CheckComposableSqlTrimmed(System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGenerator.TryGetOperatorInfo(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Int32@,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGeneratorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGeneratorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGeneratorFactory.Dependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQuerySqlGeneratorFactory.Create">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryStringFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryStringFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryStringFactory.Create(System.Data.Common.DbCommand)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessor.Process(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessor.ProcessTypeMappings(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessor.Prune(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessorFactory.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessorFactory.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryTranslationPostprocessorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlExpressionFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlExpressionFactory.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlExpressionFactory.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor.VisitCustomSqlExpression(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor.VisitSqlServerAggregateFunction(Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerAggregateFunctionExpression,System.Boolean,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor.PreferExistsToInWithCoalesce">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor.IsCollectionTable(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.Linq.Expressions.Expression@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlNullabilityProcessor.UpdateParameterCollection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerQueryCompilationContext,Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor,Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.ConstructLikePatternParameter(Microsoft.EntityFrameworkCore.Query.QueryContext,System.String,Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.StartsEndsWithContains)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.StartsEndsWithContains">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.StartsEndsWithContains.StartsWith">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.StartsEndsWithContains.EndsWith">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.StartsEndsWithContains.Contains">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.IsLikeWildChar(System.Char)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.EscapeLikePattern(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.GenerateGreatest(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitor.GenerateLeast(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitorFactory.Dependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTranslatingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTreePruner">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerSqlTreePruner.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTypeMappingPostprocessor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTypeMappingPostprocessor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTypeMappingPostprocessor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTypeMappingPostprocessor.ApplyTypeMappingsOnOpenJsonExpression(Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerOpenJsonExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalOperationType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalOperationType.All">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalOperationType.AsOf">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalOperationType.Between">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalOperationType.ContainedIn">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.TemporalOperationType.FromTo">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerByteArrayMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerByteArrayMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerByteArrayMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerConvertTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerConvertTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerConvertTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDataLengthFunctionTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDataLengthFunctionTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDataLengthFunctionTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateDiffFunctionsTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateDiffFunctionsTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateDiffFunctionsTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateOnlyMemberTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateOnlyMemberTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateOnlyMemberTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateOnlyMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateOnlyMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateOnlyMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateTimeMemberTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateTimeMemberTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateTimeMemberTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateTimeMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateTimeMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerDateTimeMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerFromPartsFunctionTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerFromPartsFunctionTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerFromPartsFunctionTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerFullTextSearchFunctionsTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerFullTextSearchFunctionsTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerFullTextSearchFunctionsTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerIsDateFunctionTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerIsDateFunctionTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerIsDateFunctionTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerIsNumericFunctionTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerIsNumericFunctionTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerIsNumericFunctionTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerLongCountMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerLongCountMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerLongCountMethodTranslator.Translate(System.Reflection.MethodInfo,Microsoft.EntityFrameworkCore.Query.EnumerableExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMathTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMathTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerMathTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNewGuidTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNewGuidTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerNewGuidTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerObjectToStringTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerObjectToStringTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerObjectToStringTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStatisticsAggregateMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStatisticsAggregateMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStatisticsAggregateMethodTranslator.Translate(System.Reflection.MethodInfo,Microsoft.EntityFrameworkCore.Query.EnumerableExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringAggregateMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringAggregateMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringAggregateMethodTranslator.Translate(System.Reflection.MethodInfo,Microsoft.EntityFrameworkCore.Query.EnumerableExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringMemberTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringMemberTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringMemberTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.SqlServer.Infrastructure.Internal.ISqlServerSingletonOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerStringMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeOnlyMemberTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeOnlyMemberTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeOnlyMemberTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeOnlyMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeOnlyMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeOnlyMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeSpanMemberTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeSpanMemberTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Query.Internal.SqlServerTimeSpanMemberTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault``1(System.Data.Common.DbDataReader,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension.GetValueOrDefault``1(System.Data.Common.DbDataRecord,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlDataReaderExtension.GetFieldValue``1(System.Data.Common.DbDataRecord,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerCodeGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerCodeGenerator.#ctor(Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerCodeGenerator" /> class.
            </summary>
            <param name="dependencies">The dependencies.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerCodeGenerator.GenerateUseProvider(System.String,Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerDatabaseModelFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerDatabaseModelFactory.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding},Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerDatabaseModelFactory.Create(System.String,Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Scaffolding.Internal.SqlServerDatabaseModelFactory.Create(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
            <remarks>
                The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                The implementation may depend on other services registered with any lifetime.
                The implementation does not need to be thread-safe.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection.CreateMasterConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection.IsMultipleActiveResultSetsEnabled">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerBoolTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerBoolTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerBoolTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerBoolTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerBoolTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerBoolTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteArrayTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteArrayTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteArrayTypeMapping.#ctor(System.String,System.Nullable{System.Int32},System.Boolean,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Nullable{System.Data.SqlDbType},System.Nullable{Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteArrayTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,System.Nullable{System.Data.SqlDbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteArrayTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteArrayTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteArrayTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerByteTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection.OpenDbConnection(System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection.CreateDbConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection.CreateMasterConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection.IsMultipleActiveResultSetsEnabled">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection.SupportsAmbientTransactions">
            <summary>
                Indicates whether the store connection supports ambient transactions
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies,Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
            <remarks>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </remarks>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.RetryDelay">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.RetryTimeout">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.Create">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.CreateAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.HasTables">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.HasTablesAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.Exists">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.Delete">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateOnlyTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateOnlyTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateOnlyTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateOnlyTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateOnlyTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateOnlyTypeMapping.SqlLiteralFormatString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeOffsetTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeOffsetTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeOffsetTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeOffsetTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeOffsetTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeOffsetTypeMapping.SqlLiteralFormatString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeOffsetTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Data.SqlDbType},Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,System.Nullable{System.Data.SqlDbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeTypeMapping.SqlType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDateTimeTypeMapping.SqlLiteralFormatString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDecimalTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDecimalTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDecimalTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Data.SqlDbType},Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDecimalTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,System.Nullable{System.Data.SqlDbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDecimalTypeMapping.SqlType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDecimalTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDecimalTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDoubleTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDoubleTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDoubleTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDoubleTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDoubleTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDoubleTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDoubleTypeMapping.GetDataReaderMethod">
            <summary>
                The method to use when reading values of the given type. The method must be defined
                on <see cref="T:System.Data.Common.DbDataReader" /> or one of its subclasses.
            </summary>
            <returns>The method to use to read the value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDoubleTypeMapping.CustomizeDataReaderExpression(System.Linq.Expressions.Expression)">
            <summary>
                Gets a custom expression tree for reading the value from the input data reader
                expression that contains the database value.
            </summary>
            <param name="expression">The input expression, containing the database value.</param>
            <returns>The expression with customization added.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDoubleTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExceptionDetector">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExceptionDetector.IsCancellation(System.Exception,System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Dependencies">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.RetriesOnFailure">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,``1},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.ExecuteAsync``2(``0,System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{Microsoft.EntityFrameworkCore.DbContext,``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{Microsoft.EntityFrameworkCore.Storage.ExecutionResult{``1}}},System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategyFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategyFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategyFactory.CreateDefaultStrategy(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerFloatTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerFloatTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerFloatTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerFloatTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerFloatTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerFloatTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerFloatTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerLongTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerLongTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerLongTypeMapping.#ctor(System.String,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerLongTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerLongTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerLongTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping.OwnedJsonTypeDefault">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping.#ctor(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping.GetDataReaderMethod">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping.CreateUtf8Stream(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping.CustomizeDataReaderExpression(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping.EscapeSqlLiteral(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerOwnedJsonTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerShortTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerShortTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerShortTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerShortTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerShortTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerShortTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelperDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper.BatchTerminator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper.StartTransactionStatement">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper.EscapeIdentifier(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper.EscapeIdentifier(System.Text.StringBuilder,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper.DelimitIdentifier(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper.DelimitIdentifier(System.Text.StringBuilder,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper.GenerateCreateSavepointStatement(System.String)">
            <summary>
                Generates an SQL statement which creates a savepoint with the given name.
            </summary>
            <param name="name">The name of the savepoint to be created.</param>
            <returns>An SQL string to create the savepoint.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper.GenerateRollbackToSavepointStatement(System.String)">
            <summary>
                Generates an SQL statement which rolls back to a savepoint with the given name.
            </summary>
            <param name="name">The name of the savepoint to be rolled back to.</param>
            <returns>An SQL string to roll back the savepoint.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper.GenerateReleaseSavepointStatement(System.String)">
            <summary>
                Generates an SQL statement which releases a savepoint with the given name.
            </summary>
            <param name="name">The name of the savepoint to be released.</param>
            <returns>An SQL string to release the savepoint.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlGenerationHelper.DelimitJsonPathElement(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlVariantTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlVariantTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlVariantTypeMapping.#ctor(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlVariantTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerSqlVariantTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerStringTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerStringTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerStringTypeMapping.JsonTypeDefault">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerStringTypeMapping.UnicodeDefault">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerStringTypeMapping.#ctor(System.String,System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Data.SqlDbType},System.Nullable{Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerStringTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,System.Nullable{System.Data.SqlDbType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerStringTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerStringTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerStringTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeOnlyTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeOnlyTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeOnlyTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeOnlyTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeOnlyTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeOnlyTypeMapping.SqlLiteralFormatString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeOnlyTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeSpanTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeSpanTypeMapping.Default">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeSpanTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeSpanTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeSpanTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeSpanTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeSpanTypeMapping.SqlLiteralFormatString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTimeSpanTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a literal value without conversion.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransaction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransaction.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},System.Boolean,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransaction.SupportsSavepoints">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransaction.ReleaseSavepoint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransaction.ReleaseSavepointAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransactionFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransactionFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactoryDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactory" /> class.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this service.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransactionFactory.Dependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransactionFactory.Create(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransientExceptionDetector">
            <summary>
                Detects the exceptions caused by SQL Server transient failures.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTransientExceptionDetector.ShouldRetryOn(System.Exception)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTypeMappingSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTypeMappingSource.#ctor(Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerTypeMappingSource.ParseStoreTypeName(System.String,System.Nullable{System.Boolean}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerUdtTypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerUdtTypeMapping.#ctor(System.Type,System.String,System.Func{System.Object,System.Linq.Expressions.Expression},Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix,System.String,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer,System.Nullable{System.Data.DbType},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerUdtTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,System.Func{System.Object,System.Linq.Expressions.Expression},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerUdtTypeMapping.UdtTypeName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerUdtTypeMapping.LiteralGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerUdtTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters">The parameters for this mapping.</param>
            <returns>The newly created mapping.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerUdtTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerUdtTypeMapping.GenerateCodeLiteral(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.ISqlServerUpdateSqlGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
            <remarks>
                The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.ISqlServerUpdateSqlGenerator.AppendBulkInsertOperation(System.Text.StringBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand},System.Int32,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.ISqlServerUpdateSqlGenerator.AppendBulkInsertOperation(System.Text.StringBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand},System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommand">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommand.#ctor(Microsoft.EntityFrameworkCore.Update.ModificationCommandParameters@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommand.#ctor(Microsoft.EntityFrameworkCore.Update.NonTrackedModificationCommandParameters@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommand.ProcessSinglePropertyJsonUpdate(Microsoft.EntityFrameworkCore.Update.ColumnModificationParameters@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.MaxParameterCount">
            <summary>
                The SQL Server limit on parameters, including two extra parameters to sp_executesql (@stmt and @params).
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.#ctor(Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies,System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.UpdateSqlGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.RollbackLastCommand(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.IsValid">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.TryAddCommand(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.AddCommand(Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Complete(System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.Execute(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatch.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatchFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatchFactory.#ctor(Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatchFactory.Dependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandBatchFactory.Create">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandFactory.CreateModificationCommand(Microsoft.EntityFrameworkCore.Update.ModificationCommandParameters@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerModificationCommandFactory.CreateNonTrackedModificationCommand(Microsoft.EntityFrameworkCore.Update.NonTrackedModificationCommandParameters@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.MergeIntoMinimumThreshold">
            <summary>
                The minimum number of insertions which are executed using MERGE ... OUTPUT INTO. Below this threshold, multiple batched INSERT
                statements are more efficient.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendInsertOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Int32,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendInsertCommand(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IColumnModification},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IColumnModification})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendUpdateOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Int32,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendUpdateCommand(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IColumnModification},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IColumnModification},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IColumnModification},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendUpdateColumnValue(Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Update.IColumnModification,System.Text.StringBuilder,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendDeleteOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Int32,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendDeleteCommand(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IColumnModification},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IColumnModification},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendBulkInsertOperation(System.Text.StringBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand},System.Int32,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendStoredProcedureCall(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.IReadOnlyModificationCommand,System.Int32,System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendReturningClause(System.Text.StringBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.IColumnModification},System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendSelectAffectedCountCommand(System.Text.StringBuilder,System.String,System.String,System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendBatchHeader(System.Text.StringBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.PrependEnsureAutocommit(System.Text.StringBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendIdentityWhereCondition(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.IColumnModification)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.SqlServerUpdateSqlGenerator.AppendRowsAffectedWhereCondition(System.Text.StringBuilder,System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.ISqlServerSequenceValueGeneratorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.ISqlServerSequenceValueGeneratorFactory.TryCreate(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Type,Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorState,Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder,Microsoft.EntityFrameworkCore.Diagnostics.IRelationalCommandDiagnosticsLogger)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.ISqlServerValueGeneratorCache">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
            <remarks>
                The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.ISqlServerValueGeneratorCache.GetOrAddSequenceState(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceHiLoValueGenerator`1">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceHiLoValueGenerator`1.#ctor(Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder,Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.ISqlServerUpdateSqlGenerator,Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorState,Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection,Microsoft.EntityFrameworkCore.Diagnostics.IRelationalCommandDiagnosticsLogger)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceHiLoValueGenerator`1.GetNewLowValue">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceHiLoValueGenerator`1.GetNewLowValueAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceHiLoValueGenerator`1.GeneratesTemporaryValues">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorFactory.#ctor(Microsoft.EntityFrameworkCore.SqlServer.Update.Internal.ISqlServerUpdateSqlGenerator)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorFactory.TryCreate(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Type,Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorState,Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder,Microsoft.EntityFrameworkCore.Diagnostics.IRelationalCommandDiagnosticsLogger)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorState">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorState.#ctor(Microsoft.EntityFrameworkCore.Metadata.ISequence)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerSequenceValueGeneratorState.Sequence">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorCache">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorCache.#ctor(Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCacheDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCache" /> class.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this service.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorCache.GetOrAddSequenceState(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorSelector">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorSelector.#ctor(Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelectorDependencies,Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.ISqlServerSequenceValueGeneratorFactory,Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.ISqlServerConnection,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder,Microsoft.EntityFrameworkCore.Diagnostics.IRelationalCommandDiagnosticsLogger)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorSelector.Cache">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorSelector.Select(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.ITypeBase)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorSelector.TrySelect(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.ITypeBase,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServer.ValueGeneration.Internal.SqlServerValueGeneratorSelector.FindForType(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.ITypeBase,System.Type)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ConflictingValueGenerationStrategiesEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for events that have
                a property.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-diagnostics">Logging, events, and diagnostics</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ConflictingValueGenerationStrategiesEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy,System.String,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition">The event definition.</param>
            <param name="messageGenerator">A delegate that generates a log message for this event.</param>
            <param name="sqlServerValueGenerationStrategy">The SQL Server value generation strategy.</param>
            <param name="otherValueGenerationStrategy">The other value generation strategy.</param>
            <param name="property">The property.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ConflictingValueGenerationStrategiesEventData.SqlServerValueGenerationStrategy">
            <summary>
                The SQL Server value generation strategy.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ConflictingValueGenerationStrategiesEventData.OtherValueGenerationStrategy">
            <summary>
                The other value generation strategy.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ConflictingValueGenerationStrategiesEventData.Property">
            <summary>
                The property.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId">
            <summary>
                Event IDs for SQL Server events that correspond to messages logged to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />
                and events sent to a <see cref="T:System.Diagnostics.DiagnosticSource" />.
            </summary>
            <remarks>
                <para>
                    These IDs are also used with <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder" /> to configure the
                    behavior of warnings.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-diagnostics">Logging, events, and diagnostics</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.DecimalTypeKeyWarning">
            <summary>
                Decimal column is part of the key.
            </summary>
            <remarks>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.DecimalTypeDefaultWarning">
            <summary>
                No explicit type for a decimal column.
            </summary>
            <remarks>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.ByteIdentityColumnWarning">
            <summary>
                A byte property is set up to use a SQL Server identity column.
            </summary>
            <remarks>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.JsonTypeExperimental">
            <summary>
                An entity type makes use of the SQL Server native 'json' type. Please note that support for this type in EF Core 9 is
                experimental and may change in future releases.
            </summary>
            <remarks>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.EntityTypeEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.ConflictingValueGenerationStrategiesWarning">
            <summary>
                There are conflicting value generation methods for a property.
            </summary>
            <remarks>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ConflictingValueGenerationStrategiesEventData" />
                    payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.SavepointsDisabledBecauseOfMARS">
            <summary>
                Savepoints have been disabled when saving changes with an external transaction, because Multiple Active Result Sets is
                enabled.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.ColumnFound">
            <summary>
                A column was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.DefaultSchemaFound">
            <summary>
                A default schema was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.TypeAliasFound">
            <summary>
                A type alias was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.MissingSchemaWarning">
            <summary>
                The database is missing a schema.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.MissingTableWarning">
            <summary>
                The database is missing a table.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.ForeignKeyReferencesMissingPrincipalTableWarning">
            <summary>
                A foreign key references a missing table at the principal end.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.ForeignKeyReferencesUnknownPrincipalTableWarning">
            <summary>
                A foreign key references a unknown table at the principal end.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.TableFound">
            <summary>
                A table was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.SequenceFound">
            <summary>
                A sequence was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.PrimaryKeyFound">
            <summary>
                Primary key was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.UniqueConstraintFound">
            <summary>
                An unique constraint was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.IndexFound">
            <summary>
                An index was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.ForeignKeyFound">
            <summary>
                A foreign key was found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.ForeignKeyPrincipalColumnMissingWarning">
            <summary>
                A principal column referenced by a foreign key was not found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.ReflexiveConstraintIgnored">
            <summary>
                A reflexive foreign key constraint was skipped.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.DuplicateForeignKeyConstraintIgnored">
            <summary>
                A duplicate foreign key constraint was skipped.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.ColumnWithoutTypeWarning">
            <summary>
                A column was skipped because its database type could not be found.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.SqlServerEventId.MissingViewDefinitionRightsWarning">
            <summary>
                The database user has not been granted 'VIEW DEFINITION' rights. Scaffolding requires these rights to construct the Entity Framework
                model correctly. Without these rights, parts of the scaffolded model may be missing, resulting in incorrect interactions between Entity
                Framework and the database at runtime.
            </summary>
            <remarks>
                This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Scaffolding" /> category.
            </remarks>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerComplexTypePrimitiveCollectionBuilderExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePrimitiveCollectionBuilderExtensions.IsSparse(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder,System.Boolean)">
            <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
            <param name="primitiveCollectionBuilder">The builder for the property being configured.</param>
            <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
            <returns>A builder to further configure the property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePrimitiveCollectionBuilderExtensions.IsSparse``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePrimitiveCollectionBuilder{``0},System.Boolean)">
            <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
            <param name="primitiveCollectionBuilder">The builder for the property being configured.</param>
            <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
            <returns>A builder to further configure the property.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseHiLo(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder,System.String,System.String)">
            <summary>
                Configures the key property to use a sequence-based hi-lo pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseHiLo``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder{``0},System.String,System.String)">
            <summary>
                Configures the key property to use a sequence-based hi-lo pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TProperty">The type of the property being configured.</typeparam>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder,System.String,System.String)">
            <summary>
                Configures the key property to use a sequence-based key value generation pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseSequence``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder{``0},System.String,System.String)">
            <summary>
                Configures the key property to use a sequence-based key value generation pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TProperty">The type of the property being configured.</typeparam>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder,System.Int64,System.Int32)">
            <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder,System.Int32,System.Int32)">
            <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder{``0},System.Int64,System.Int32)">
            <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TProperty">The type of the property being configured.</typeparam>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.UseIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder{``0},System.Int32,System.Int32)">
            <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TProperty">The type of the property being configured.</typeparam>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.IsSparse(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder,System.Boolean)">
            <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
            <returns>A builder to further configure the property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerComplexTypePropertyBuilderExtensions.IsSparse``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ComplexTypePropertyBuilder{``0},System.Boolean)">
            <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
            <returns>A builder to further configure the property.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerDatabaseFacadeExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDatabaseFacadeExtensions.IsSqlServer(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Returns <see langword="true" /> if the database provider currently in use is the SQL Server provider.
            </summary>
            <remarks>
                <para>
                    This method can only be used after the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> has been configured because
                    it is only then that the provider is known. This means that this method cannot be used
                    in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> because this is where application code sets the
                    provider to use as part of configuring the context.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="database">The facade from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />.</param>
            <returns><see langword="true" /> if SQL Server is being used; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQL Server database, but without initially setting any
                <see cref="T:System.Data.Common.DbConnection" /> or connection string.
            </summary>
            <remarks>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Boolean)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQL Server database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQL Server database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed. The caller owns the connection and is
                responsible for its disposal.
            </param>
            <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Boolean,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQL Server database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
            <param name="contextOwnsConnection">
                If <see langword="true" />, then EF will take ownership of the connection and will
                dispose it in the same way it would dispose a connection created by EF. If <see langword="false" />, then the caller still
                owns the connection and is responsible for its disposal.
            </param>
            <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQL Server database, but without initially setting any
                <see cref="T:System.Data.Common.DbConnection" /> or connection string.
            </summary>
            <remarks>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Boolean)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQL Server database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQL Server database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed. The caller owns the connection and is
                responsible for its disposal.
            </param>
            <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server Synapse specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseSqlServer``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Boolean,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a SQL Server database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
            <param name="contextOwnsConnection">
                If <see langword="true" />, then EF will take ownership of the connection and will
                dispose it in the same way it would dispose a connection created by EF. If <see langword="false" />, then the caller still
                owns the connection and is responsible for its disposal.
            </param>
            <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server Synapse specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSql(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure SQL database, but without initially setting any
                <see cref="T:System.Data.Common.DbConnection" /> or connection string.
            </summary>
            <remarks>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Boolean)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="azureSqlOptionsAction">An optional action to allow additional Azure SQL specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSql(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure SQL database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="azureSqlOptionsAction">An optional action to allow additional Azure SQL specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSql(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure SQL database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed. The caller owns the connection and is
                responsible for its disposal.
            </param>
            <param name="azureSqlOptionsAction">An optional action to allow additional Azure SQL specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSql(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Boolean,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure SQL database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
            <param name="contextOwnsConnection">
                If <see langword="true" />, then EF will take ownership of the connection and will
                dispose it in the same way it would dispose a connection created by EF. If <see langword="false" />, then the caller still
                owns the connection and is responsible for its disposal.
            </param>
            <param name="azureSqlOptionsAction">An optional action to allow additional Azure SQL specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSql``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure SQL database, but without initially setting any
                <see cref="T:System.Data.Common.DbConnection" /> or connection string.
            </summary>
            <remarks>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Boolean)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="azureSqlOptionsAction">An optional action to allow additional Azure SQL specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSql``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure SQL database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="azureSqlOptionsAction">An optional action to allow additional Azure SQL specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSql``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure SQL database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed. The caller owns the connection and is
                responsible for its disposal.
            </param>
            <param name="azureSqlOptionsAction">An optional action to allow additional Azure SQL specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSql``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Boolean,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure SQL database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
            <param name="contextOwnsConnection">
                If <see langword="true" />, then EF will take ownership of the connection and will
                dispose it in the same way it would dispose a connection created by EF. If <see langword="false" />, then the caller still
                owns the connection and is responsible for its disposal.
            </param>
            <param name="azureSqlOptionsAction">An optional action to allow additional Azure SQL specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSynapse(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure Synapse database, but without initially setting any
                <see cref="T:System.Data.Common.DbConnection" /> or connection string.
            </summary>
            <remarks>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Boolean)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="azureSynapseOptionsAction">An optional action to allow additional Azure Synapse specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSynapse(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure Synapse database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="azureSynapseOptionsAction">An optional action to allow additional Azure Synapse specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSynapse(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure Synapse database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed. The caller owns the connection and is
                responsible for its disposal.
            </param>
            <param name="azureSynapseOptionsAction">An optional action to allow additional Azure Synapse specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSynapse(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Data.Common.DbConnection,System.Boolean,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure Synapse database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
            <param name="contextOwnsConnection">
                If <see langword="true" />, then EF will take ownership of the connection and will
                dispose it in the same way it would dispose a connection created by EF. If <see langword="false" />, then the caller still
                owns the connection and is responsible for its disposal.
            </param>
            <param name="azureSynapseOptionsAction">An optional action to allow additional Azure Synapse specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSynapse``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure Synapse database, but without initially setting any
                <see cref="T:System.Data.Common.DbConnection" /> or connection string.
            </summary>
            <remarks>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Boolean)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="azureSynapseOptionsAction">An optional action to allow additional Azure Synapse specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSynapse``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure Synapse database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="azureSynapseOptionsAction">An optional action to allow additional Azure Synapse specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSynapse``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure Synapse database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed. The caller owns the connection and is
                responsible for its disposal.
            </param>
            <param name="azureSynapseOptionsAction">An optional action to allow additional Azure Synapse specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.UseAzureSynapse``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Data.Common.DbConnection,System.Boolean,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to a Azure Synapse database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TContext">The type of context to be configured.</typeparam>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="connection">
                An existing <see cref="T:System.Data.Common.DbConnection" /> to be used to connect to the database. If the connection is
                in the open state then EF will not open or close the connection. If the connection is in the closed
                state then EF will open and close the connection as needed.
            </param>
            <param name="contextOwnsConnection">
                If <see langword="true" />, then EF will take ownership of the connection and will
                dispose it in the same way it would dispose a connection created by EF. If <see langword="false" />, then the caller still
                owns the connection and is responsible for its disposal.
            </param>
            <param name="azureSynapseOptionsAction">An optional action to allow additional Azure Synapse specific configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.ConfigureSqlEngine(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlEngineDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to any of SQL Server, Azure SQL, Azure Synapse databases, but without initially setting any
                <see cref="T:System.Data.Common.DbConnection" /> or connection string.
            </summary>
            <remarks>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Boolean)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="sqlEngineOptionsAction">An optional action to allow additional SQL Server, Azure SQL, Azure Synapse configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbContextOptionsExtensions.ConfigureSqlEngine``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlEngineDbContextOptionsBuilder})">
            <summary>
                Configures the context to connect to any of SQL Server, Azure SQL, Azure Synapse databases, but without initially setting any
                <see cref="T:System.Data.Common.DbConnection" /> or connection string.
            </summary>
            <remarks>
                <para>
                    The connection or connection string must be set before the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> is used to connect
                    to a database. Set a connection using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection,System.Boolean)" />.
                    Set a connection string using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)" />.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="optionsBuilder">The builder being used to configure the context.</param>
            <param name="sqlEngineOptionsAction">An optional action to allow additional SQL Server, Azure SQL, Azure Synapse configuration.</param>
            <returns>The options builder so that further configuration can be chained.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions">
            <summary>
                Provides CLR methods that get translated to database functions when used in LINQ to Entities queries.
                The methods on this class are accessed via <see cref="P:Microsoft.EntityFrameworkCore.EF.Functions" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.FreeText(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String,System.Int32)">
            <summary>
                A DbFunction method stub that can be used in LINQ queries to target the SQL Server <c>FREETEXT</c> store function.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="propertyReference">The property on which the search will be performed.</param>
            <param name="freeText">The text that will be searched for in the property.</param>
            <param name="languageTerm">A Language ID from the <c>sys.syslanguages</c> table.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.FreeText(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String)">
            <summary>
                A DbFunction method stub that can be used in LINQ queries to target the SQL Server <c>FREETEXT</c> store function.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="propertyReference">The property on which the search will be performed.</param>
            <param name="freeText">The text that will be searched for in the property.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.Contains(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String,System.Int32)">
            <summary>
                A DbFunction method stub that can be used in LINQ queries to target the SQL Server <c>CONTAINS</c> store function.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="propertyReference">The property on which the search will be performed.</param>
            <param name="searchCondition">The text that will be searched for in the property and the condition for a match.</param>
            <param name="languageTerm">A Language ID from the <c>sys.syslanguages</c> table.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.Contains(Microsoft.EntityFrameworkCore.DbFunctions,System.Object,System.String)">
            <summary>
                A DbFunction method stub that can be used in LINQ queries to target the SQL Server <c>CONTAINS</c> store function.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="propertyReference">The property on which the search will be performed.</param>
            <param name="searchCondition">The text that will be searched for in the property and the condition for a match.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of year boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(year, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of year boundaries crossed between <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(year, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of year boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(year, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of year boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(year, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of year boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(year, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffYear(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of year boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(year, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of year boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of month boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(month, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of month boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(month, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of month boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(month, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of month boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(month, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of month boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(month, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMonth(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of month boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(month, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of month boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of day boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(day, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of day boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(day, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of day boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(day, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of day boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(day, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of day boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(day, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffDay(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of day boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(day, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of day boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of hour boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(hour, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of hour boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(hour, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of hour boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(hour, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of hour boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(hour, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeSpan,System.TimeSpan)">
            <summary>
                Counts the number of hour boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(hour, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of hour boundaries crossed between the timespans.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
                Counts the number of hour boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(hour, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of hour boundaries crossed between the timespans.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeOnly,System.TimeOnly)">
            <summary>
                Counts the number of hour boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(hour, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of hour boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeOnly},System.Nullable{System.TimeOnly})">
            <summary>
                Counts the number of hour boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(hour, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of hour boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of hour boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(hour, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffHour(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of hour boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(hour, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of hour boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of minute boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(minute, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of minute boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(minute, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of minute boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(minute, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of minute boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(minute, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeSpan,System.TimeSpan)">
            <summary>
                Counts the number of minute boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(minute, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of minute boundaries crossed between the timespans.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
                Counts the number of minute boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(minute, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of minute boundaries crossed between the timespans.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeOnly,System.TimeOnly)">
            <summary>
                Counts the number of minute boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(minute, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of minute boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeOnly},System.Nullable{System.TimeOnly})">
            <summary>
                Counts the number of minute boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(minute, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of minute boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of minute boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(minute, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMinute(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of minute boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(minute, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of minute boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of second boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(second, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of second boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(second, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of second boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(second, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of second boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(second, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeSpan,System.TimeSpan)">
            <summary>
                Counts the number of second boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(second, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of second boundaries crossed between the timespans.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
                Counts the number of second boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(second, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of second boundaries crossed between the timespans.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeOnly,System.TimeOnly)">
            <summary>
                Counts the number of second boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(second, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of second boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeOnly},System.Nullable{System.TimeOnly})">
            <summary>
                Counts the number of second boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(second, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of second boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of second boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(second, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffSecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of second boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(second, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of second boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of millisecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(millisecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of millisecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of millisecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(millisecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of millisecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of millisecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(millisecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of millisecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of millisecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(millisecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of millisecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeSpan,System.TimeSpan)">
            <summary>
                Counts the number of millisecond boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(millisecond, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of millisecond boundaries crossed between the timespans.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
                Counts the number of millisecond boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(millisecond, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of millisecond boundaries crossed between the timespans.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeOnly,System.TimeOnly)">
            <summary>
                Counts the number of millisecond boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(millisecond, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of millisecond boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeOnly},System.Nullable{System.TimeOnly})">
            <summary>
                Counts the number of millisecond boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(millisecond, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of millisecond boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of millisecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(millisecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of millisecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMillisecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of millisecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(millisecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of millisecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of microsecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(microsecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of microsecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(microsecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of microsecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(microsecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of microsecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(microsecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeSpan,System.TimeSpan)">
            <summary>
                Counts the number of microsecond boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(microsecond, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the timespans.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
                Counts the number of microsecond boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(microsecond, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the timespans.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeOnly,System.TimeOnly)">
            <summary>
                Counts the number of microsecond boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(microsecond, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeOnly},System.Nullable{System.TimeOnly})">
            <summary>
                Counts the number of microsecond boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(microsecond, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of microsecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(microsecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffMicrosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of microsecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(microsecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of microsecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of nanosecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(nanosecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of nanosecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of nanosecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(nanosecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of nanosecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of nanosecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(nanosecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of nanosecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of nanosecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(nanosecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of nanosecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeSpan,System.TimeSpan)">
            <summary>
                Counts the number of nanosecond boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(nanosecond, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of nanosecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
                Counts the number of nanosecond boundaries crossed between the <paramref name="startTimeSpan" /> and
                <paramref name="endTimeSpan" />. Corresponds to SQL Server's <c>DATEDIFF(nanosecond, @startTimeSpan, @endTimeSpan)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTimeSpan">Starting timespan for the calculation.</param>
            <param name="endTimeSpan">Ending timespan for the calculation.</param>
            <returns>Number of nanosecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.TimeOnly,System.TimeOnly)">
            <summary>
                Counts the number of nanosecond boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(nanosecond, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of nanosecond boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeOnly},System.Nullable{System.TimeOnly})">
            <summary>
                Counts the number of nanosecond boundaries crossed between the <paramref name="startTime" /> and
                <paramref name="endTime" />. Corresponds to SQL Server's <c>DATEDIFF(nanosecond, @startTime, @endTime)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startTime">Starting time for the calculation.</param>
            <param name="endTime">Ending time for the calculation.</param>
            <returns>Number of nanosecond boundaries crossed between the times.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of nanosecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(nanosecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of nanosecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffNanosecond(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of nanosecond boundaries crossed between the <paramref name="startDate" /> and
                <paramref name="endDate" />. Corresponds to SQL Server's <c>DATEDIFF(nanosecond, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of nanosecond boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffWeek(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.DateTime)">
            <summary>
                Counts the number of week boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(week, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of week boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffWeek(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
                Counts the number of week boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(week, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of week boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffWeek(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
                Counts the number of week boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(week, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of week boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffWeek(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
            <summary>
                Counts the number of week boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(week, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of week boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffWeek(Microsoft.EntityFrameworkCore.DbFunctions,System.DateOnly,System.DateOnly)">
            <summary>
                Counts the number of week boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(week, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of week boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateDiffWeek(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateOnly},System.Nullable{System.DateOnly})">
            <summary>
                Counts the number of week boundaries crossed between the <paramref name="startDate" /> and <paramref name="endDate" />.
                Corresponds to SQL Server's <c>DATEDIFF(week, @startDate, @endDate)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="startDate">Starting date for the calculation.</param>
            <param name="endDate">Ending date for the calculation.</param>
            <returns>Number of week boundaries crossed between the dates.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.IsDate(Microsoft.EntityFrameworkCore.DbFunctions,System.String)">
            <summary>
                Validate if the given string is a valid date.
                Corresponds to SQL Server's <c>ISDATE('date')</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="expression">Expression to validate</param>
            <returns>true for valid date and false otherwise.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateTimeFromParts(Microsoft.EntityFrameworkCore.DbFunctions,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second,
                and millisecond.
                Corresponds to SQL Server's <c>DATETIMEFROMPARTS(year, month, day, hour, minute, second, millisecond)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="year">The year (1753 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="millisecond">The milliseconds (0 through 999).</param>
            <returns>
                New instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, and
                millisecond.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateFromParts(Microsoft.EntityFrameworkCore.DbFunctions,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day.
                Corresponds to SQL Server's <c>DATEFROMPARTS(year, month, day)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="year">The year (1753 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <returns>New instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateTime2FromParts(Microsoft.EntityFrameworkCore.DbFunctions,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second,
                fractions, and precision.
                Corresponds to SQL Server's <c>DATETIME2FROMPARTS(year, month, day, hour, minute, seconds, fractions, precision)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="year">The year (1753 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="fractions">The fractional seconds (0 through 9999999).</param>
            <param name="precision">The precision of the datetime2 value (0 through 7).</param>
            <returns>
                New instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour, minute, second, fractions,
                and precision.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DateTimeOffsetFromParts(Microsoft.EntityFrameworkCore.DbFunctions,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure to the specified year, month, day, hour, minute,
                second, fractions, hourOffset, minuteOffset and precision.
                Corresponds to SQL Server's
                <c>
                    DATETIMEOFFSETFROMPARTS(year, month, day, hour, minute, seconds, fractions, hour_offset,
                    minute_offset, precision)
                </c>
                .
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="year">The year (1753 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="fractions">The fractional seconds (0 through 9999999).</param>
            <param name="hourOffset">The hour portion of the time zone offset (-14 through +14).</param>
            <param name="minuteOffset">The minute portion of the time zone offset (0 or 30).</param>
            <param name="precision">The precision of the datetimeoffset value (0 through 7).</param>
            <returns>
                New instance of the <see cref="T:System.DateTimeOffset" /> structure to the specified year, month, day, hour, minute, second,
                fractions, hourOffset, minuteOffset and precision.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.SmallDateTimeFromParts(Microsoft.EntityFrameworkCore.DbFunctions,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour and minute.
                Corresponds to SQL Server's <c>SMALLDATETIMEFROMPARTS(year, month, day, hour, minute)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="year">The year (1753 through 9999).</param>
            <param name="month">The month (1 through 12).</param>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <returns>New instance of the <see cref="T:System.DateTime" /> structure to the specified year, month, day, hour and minute.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.TimeFromParts(Microsoft.EntityFrameworkCore.DbFunctions,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to the specified hour, minute, second, fractions, and
                precision. Corresponds to SQL Server's <c>TIMEFROMPARTS(hour, minute, seconds, fractions, precision)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="fractions">The fractional seconds (0 through 9999999).</param>
            <param name="precision">The precision of the time value (0 through 7).</param>
            <returns>
                New instance of the <see cref="T:System.TimeSpan" /> structure to the specified hour, minute, second, fractions, and precision.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DataLength(Microsoft.EntityFrameworkCore.DbFunctions,System.String)">
            <summary>
                Returns the number of bytes used to represent any expression.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="arg">The value to be examined for data length.</param>
            <returns>The number of bytes in the input value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DataLength(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.Boolean})">
            <summary>
                Returns the number of bytes used to represent any expression.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="arg">The value to be examined for data length.</param>
            <returns>The number of bytes in the input value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DataLength(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.Double})">
            <summary>
                Returns the number of bytes used to represent any expression.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="arg">The value to be examined for data length.</param>
            <returns>The number of bytes in the input value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DataLength(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.Decimal})">
            <summary>
                Returns the number of bytes used to represent any expression.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="arg">The value to be examined for data length.</param>
            <returns>The number of bytes in the input value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DataLength(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTime})">
            <summary>
                Returns the number of bytes used to represent any expression.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="arg">The value to be examined for data length.</param>
            <returns>The number of bytes in the input value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DataLength(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.TimeSpan})">
            <summary>
                Returns the number of bytes used to represent any expression.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="arg">The value to be examined for data length.</param>
            <returns>The number of bytes in the input value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DataLength(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.DateTimeOffset})">
            <summary>
                Returns the number of bytes used to represent any expression.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="arg">The value to be examined for data length.</param>
            <returns>The number of bytes in the input value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DataLength(Microsoft.EntityFrameworkCore.DbFunctions,System.Byte[])">
            <summary>
                Returns the number of bytes used to represent any expression.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="arg">The value to be examined for data length.</param>
            <returns>The number of bytes in the input value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.DataLength(Microsoft.EntityFrameworkCore.DbFunctions,System.Nullable{System.Guid})">
            <summary>
                Returns the number of bytes used to represent any expression.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="arg">The value to be examined for data length.</param>
            <returns>The number of bytes in the input value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.IsNumeric(Microsoft.EntityFrameworkCore.DbFunctions,System.String)">
            <summary>
                Validate if the given string is a valid numeric.
                Corresponds to the SQL Server <c>ISNUMERIC(expression)</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="expression">Expression to validate</param>
            <returns><see langword="true" /> for a valid numeric, otherwise <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.AtTimeZone(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTime,System.String)">
            <summary>
                Converts <paramref name="dateTime" /> to the corresponding <c>datetimeoffset</c> in the target <paramref name="timeZone" />.
                Corresponds to the SQL Server <c>AT TIME ZONE</c> construct.
            </summary>
            <remarks>
                <para>
                    Note that the <see cref="P:System.DateTime.Kind" /> of <paramref name="dateTime" /> is not taken into account when performing the
                    conversion; the offset for the provided time zone is simply applied as-is.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="dateTime">The value to convert to <c>datetimeoffset</c>.</param>
            <param name="timeZone">A valid SQL Server time zone ID.</param>
            <returns>The <c>datetimeoffset</c> resulting from the conversion.</returns>
            <seealso href="https://docs.microsoft.com/sql/t-sql/queries/at-time-zone-transact-sql">SQL Server documentation for <c>AT TIME ZONE</c>.</seealso>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.AtTimeZone(Microsoft.EntityFrameworkCore.DbFunctions,System.DateTimeOffset,System.String)">
            <summary>
                Converts <paramref name="dateTimeOffset" /> to the time zone specified by <paramref name="timeZone" />.
                Corresponds to the SQL Server <c>AT TIME ZONE</c> construct.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="dateTimeOffset">The value on which to perform the time zone conversion.</param>
            <param name="timeZone">A valid SQL Server time zone ID.</param>
            <returns>The <c>datetimeoffset</c> resulting from the conversion.</returns>
            <seealso href="https://docs.microsoft.com/sql/t-sql/queries/at-time-zone-transact-sql">SQL Server documentation for <c>AT TIME ZONE</c>.</seealso>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.PatIndex(Microsoft.EntityFrameworkCore.DbFunctions,System.String,System.String)">
            <summary>
                Returns the starting position of the first occurrence of a pattern in a specified expression, or zero if the pattern is not found, on
                all valid text and character data types.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-database-functions">Database functions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="pattern">A string pattern to search for.</param>
            <param name="expression">Typically a column that is searched for the specified pattern</param>
            <returns>Returns the starting position of the first occurrence of a pattern in a specified expression.</returns>
            <seealso href="https://learn.microsoft.com/en-us/sql/t-sql/functions/patindex-transact-sql">SQL Server documentation for <c>PATINDEX</c>.</seealso>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Returns the sample standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEV</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
                Returns the sample standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEV</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Returns the sample standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEV</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
                Returns the sample standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEV</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
                Returns the sample standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEV</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
                Returns the sample standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEV</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
                Returns the sample standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEV</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationPopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Returns the population standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEVP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationPopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
                Returns the population standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEVP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationPopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Returns the population standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEVP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationPopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
                Returns the population standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEVP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationPopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
                Returns the population standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEVP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationPopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
                Returns the population standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEVP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.StandardDeviationPopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
                Returns the population standard deviation of all values in the specified expression.
                Corresponds to SQL Server's <c>STDEVP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population standard deviation.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VarianceSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Returns the sample variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VAR</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VarianceSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
                Returns the sample variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VAR</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VarianceSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Returns the sample variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VAR</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VarianceSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
                Returns the sample variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VAR</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VarianceSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
                Returns the sample variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VAR</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VarianceSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
                Returns the sample variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VAR</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VarianceSample(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
                Returns the sample variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VAR</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed sample variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VariancePopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                Returns the population variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VARP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VariancePopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
                Returns the population variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VARP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VariancePopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Returns the population variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VARP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VariancePopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
                Returns the population variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VARP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VariancePopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
                Returns the population variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VARP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VariancePopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
                Returns the population variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VARP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population variance.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbFunctionsExtensions.VariancePopulation(Microsoft.EntityFrameworkCore.DbFunctions,System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
                Returns the population variance of all values in the specified expression.
                Corresponds to SQL Server's <c>VARP</c>.
            </summary>
            <param name="_">The <see cref="T:Microsoft.EntityFrameworkCore.DbFunctions" /> instance.</param>
            <param name="values">The values.</param>
            <returns>The computed population variance.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions">
            <summary>
                Sql Server database specific extension methods for LINQ queries rooted in DbSet.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalAsOf``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime)">
            <summary>
                Applies temporal 'AsOf' operation on the given DbSet, which only returns elements that were present in the database at a given
                point in time.
            </summary>
            <remarks>
                <para>
                    Temporal information is stored in UTC format on the database, so any <see cref="T:System.DateTime" /> arguments in local time may lead to
                    unexpected results.
                </para>
                <para>
                    Temporal queries are always set as 'NoTracking'.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="source">Source DbSet on which the temporal operation is applied.</param>
            <param name="utcPointInTime"><see cref="T:System.DateTime" /> representing a point in time for which the results should be returned.</param>
            <returns>An <see cref="T:System.Linq.IQueryable" /> representing the entities at a given point in time.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalFromTo``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime,System.DateTime)">
            <summary>
                Applies temporal 'FromTo' operation on the given DbSet, which only returns elements that were present in the database between two
                points in time.
            </summary>
            <remarks>
                <para>
                    Elements that were created at the starting point as well as elements that were removed at the end point are not included in the
                    results.
                </para>
                <para>
                    All versions of entities in that were present within the time range are returned, so it is possible to return multiple entities
                    with the same key.
                </para>
                <para>
                    Temporal information is stored in UTC format on the database, so any <see cref="T:System.DateTime" /> arguments in local time may lead to
                    unexpected results.
                </para>
                <para>
                    Temporal queries are always set as 'NoTracking'.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="source">Source DbSet on which the temporal operation is applied.</param>
            <param name="utcFrom">Point in time representing the start of the period for which results should be returned.</param>
            <param name="utcTo">Point in time representing the end of the period for which results should be returned.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1" /> representing the entities present in a given time range.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalBetween``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime,System.DateTime)">
            <summary>
                Applies temporal 'Between' operation on the given DbSet, which only returns elements that were present in the database between two
                points in time.
            </summary>
            <remarks>
                <para>
                    Elements that were created at the starting point are not included in the results, however elements that were removed at the end
                    point are included in the results.
                </para>
                <para>
                    All versions of entities in that were present within the time range are returned, so it is possible to return multiple entities
                    with the same key.
                </para>
                <para>
                    Temporal information is stored in UTC format on the database, so any <see cref="T:System.DateTime" /> arguments in local time may lead to
                    unexpected results.
                </para>
                <para>
                    Temporal queries are always set as 'NoTracking'.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="source">Source DbSet on which the temporal operation is applied.</param>
            <param name="utcFrom">Point in time representing the start of the period for which results should be returned.</param>
            <param name="utcTo">Point in time representing the end of the period for which results should be returned.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1" /> representing the entities present in a given time range.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalContainedIn``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.DateTime,System.DateTime)">
            <summary>
                Applies temporal 'ContainedIn' operation on the given DbSet, which only returns elements that were present in the database between
                two points in time.
            </summary>
            <remarks>
                <para>
                    Elements that were created at the starting point as well as elements that were removed at the end point are included in the
                    results.
                </para>
                <para>
                    All versions of entities in that were present within the time range are returned, so it is possible to return multiple entities
                    with the same key.
                </para>
                <para>
                    Temporal information is stored in UTC format on the database, so any <see cref="T:System.DateTime" /> arguments in local time may lead to
                    unexpected results.
                </para>
                <para>
                    Temporal queries are always set as 'NoTracking'.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="source">Source DbSet on which the temporal operation is applied.</param>
            <param name="utcFrom">Point in time representing the start of the period for which results should be returned.</param>
            <param name="utcTo">Point in time representing the end of the period for which results should be returned.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1" /> representing the entities present in a given time range.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerDbSetExtensions.TemporalAll``1(Microsoft.EntityFrameworkCore.DbSet{``0})">
            <summary>
                Applies temporal 'All' operation on the given DbSet, which returns all historical versions of the entities as well as their current
                state.
            </summary>
            <remarks>
                <para>
                    Temporal queries are always set as 'NoTracking'.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="source">Source DbSet on which the temporal operation is applied.</param>
            <returns>An <see cref="T:System.Linq.IQueryable`1" /> representing the entities and their historical versions.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.IsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.Boolean)">
            <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="memoryOptimized">A value indicating whether the table is memory-optimized.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.IsMemoryOptimized``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Boolean)">
            <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="memoryOptimized">A value indicating whether the table is memory-optimized.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.IsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.Boolean)">
            <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="collectionOwnershipBuilder">The builder for the entity type being configured.</param>
            <param name="memoryOptimized">A value indicating whether the table is memory-optimized.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.IsMemoryOptimized``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.Boolean)">
            <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
            <typeparam name="TRelatedEntity">The entity type that this relationship targets.</typeparam>
            <param name="collectionOwnershipBuilder">The builder for the entity type being configured.</param>
            <param name="memoryOptimized">A value indicating whether the table is memory-optimized.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.IsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="memoryOptimized">A value indicating whether the table is memory-optimized.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.CanSetIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Returns a value indicating whether the mapped table can be configured as memory-optimized.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="memoryOptimized">A value indicating whether the table is memory-optimized.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the mapped table can be configured as memory-optimized.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="useSqlOutputClause">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Sets a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="useSqlOutputClause">The value to set.</param>
            <param name="storeObject">The identifier of the table-like store object.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.CanUseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Returns a value indicating whether this entity type can be configured to use the SQL OUTPUT clause
                using the specified configuration source.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="useSqlOutputClause">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the configuration can be applied.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.CanUseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Returns a value indicating whether this entity type can be configured to use the SQL OUTPUT clause
                using the specified configuration source.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see> for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="useSqlOutputClause">The value to set.</param>
            <param name="storeObject">The identifier of the table-like store object.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the configuration can be applied.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.IsTemporal(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Boolean,System.Boolean)">
            <summary>
                Configures the table as temporal.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity being configured.</param>
            <param name="temporal">A value indicating whether the table is temporal.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.CanSetIsTemporal(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Boolean,System.Boolean)">
            <summary>
                Returns a value indicating whether the mapped table can be configured as temporal.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="temporal">A value indicating whether the table is temporal.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the mapped table can be configured as temporal.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.UseHistoryTableName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Configures a history table name for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity being configured.</param>
            <param name="name">The name of the history table.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.CanSetHistoryTableName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given history table name can be set for the entity.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="name">The name of the history table.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the mapped table can have history table name.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.UseHistoryTableSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Configures a history table schema for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity being configured.</param>
            <param name="schema">The schema of the history table.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.CanSetHistoryTableSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the mapped table can have history table schema.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="schema">The schema of the history table.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the mapped table can have history table schema.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.HasPeriodStart(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Configures a period start property for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity being configured.</param>
            <param name="propertyName">The name of the period start property.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.CanSetPeriodStart(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the mapped table can have period start property.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="propertyName">The name of the period start property.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the mapped table can have period start property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.HasPeriodEnd(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Configures a period end property for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity being configured.</param>
            <param name="propertyName">The name of the period end property.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeBuilderExtensions.CanSetPeriodEnd(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the mapped table can have period end property.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="entityTypeBuilder">The builder for the entity type being configured.</param>
            <param name="propertyName">The name of the period end property.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the mapped table can have period end property.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions">
            <summary>
                Entity type extension methods for SQL Server-specific metadata.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns a value indicating whether the entity type is mapped to a memory-optimized table.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns><see langword="true" /> if the entity type is mapped to a memory-optimized table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Boolean)">
            <summary>
                Sets a value indicating whether the entity type is mapped to a memory-optimized table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="memoryOptimized">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the entity type is mapped to a memory-optimized table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="memoryOptimized">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetIsMemoryOptimizedConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for the memory-optimized setting.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The configuration source for the memory-optimized setting.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsTemporal(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns a value indicating whether the entity type is mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns><see langword="true" /> if the entity type is mapped to a temporal table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsTemporal(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Boolean)">
            <summary>
                Sets a value indicating whether the entity type is mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="temporal">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetIsTemporal(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the entity type is mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="temporal">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetIsTemporalConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for the temporal table setting.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The configuration source for the temporal table setting.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodStartPropertyName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns a value representing the name of the period start property of the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>Name of the period start property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodStartPropertyName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Sets a value representing the name of the period start property of the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="periodStartPropertyName">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodStartPropertyName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
                Sets a value representing the name of the period start property of the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="periodStartPropertyName">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodStartPropertyNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for the temporal table period start property name setting.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The configuration source for the temporal table period start property name setting.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodEndPropertyName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns a value representing the name of the period end property of the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>Name of the period start property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodEndPropertyName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Sets a value representing the name of the period end property of the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="periodEndPropertyName">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetPeriodEndPropertyName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
                Sets a value representing the name of the period end property of the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="periodEndPropertyName">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetPeriodEndPropertyNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for the temporal table period end property name setting.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The configuration source for the temporal table period end property name setting.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns a value representing the name of the history table associated with the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>Name of the history table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Sets a value representing the name of the history table associated with the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="historyTableName">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
                Sets a value representing the name of the history table associated with the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="historyTableName">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for the temporal history table name setting.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The configuration source for the temporal history table name setting.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns a value representing the schema of the history table associated with the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>Name of the history table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableSchema(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Sets a value representing the schema of the history table associated with the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="historyTableSchema">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.SetHistoryTableSchema(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
                Sets a value representing the schema of the history table associated with the entity mapped to a temporal table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="historyTableSchema">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetHistoryTableSchemaConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for the temporal history table schema setting.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The configuration source for the temporal history table schema setting.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsSqlOutputClauseUsed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType)">
            <summary>
                Returns a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns><see langword="true" /> if the SQL OUTPUT clause is used to save changes to the table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="useSqlOutputClause">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="useSqlOutputClause">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetUseSqlOutputClauseConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the configuration source for whether to use the SQL OUTPUT clause when saving changes to the table.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>The configuration source for the memory-optimized setting.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.GetUseSqlOutputClauseConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets the configuration source for whether to use the SQL OUTPUT clause when saving changes to the table.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="storeObject">The identifier of the table-like store object.</param>
            <returns>The configuration source for the memory-optimized setting.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.IsSqlOutputClauseUsed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns a value indicating whether to use the SQL OUTPUT clause when saving changes to the specified table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="storeObject">The identifier of the table-like store object.</param>
            <returns>A value indicating whether the SQL OUTPUT clause is used to save changes to the associated table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Sets a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="useSqlOutputClause">The value to set.</param>
            <param name="storeObject">The identifier of the table-like store object.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Sets a value indicating whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <param name="entityType">The entity type.</param>
            <param name="useSqlOutputClause">The value to set.</param>
            <param name="storeObject">The identifier of the table-like store object.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerEntityTypeMappingFragmentExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeMappingFragmentExtensions.IsSqlOutputClauseUsed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityTypeMappingFragment)">
            <summary>
                Returns a value indicating whether to use the SQL OUTPUT clause when saving changes to the associated table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <param name="fragment">The entity type mapping fragment.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeMappingFragmentExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityTypeMappingFragment,System.Nullable{System.Boolean})">
            <summary>
                Sets whether to use the SQL OUTPUT clause when saving changes to the associated table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <param name="fragment">The entity type mapping fragment.</param>
            <param name="useSqlOutputClause">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeMappingFragmentExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets whether to use the SQL OUTPUT clause when saving changes to the associated table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <param name="fragment">The entity type mapping fragment.</param>
            <param name="useSqlOutputClause">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerEntityTypeMappingFragmentExtensions.GetUseSqlOutputClauseConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityTypeMappingFragment)">
            <summary>
                Gets the configuration source for the setting whether to use the SQL OUTPUT clause when saving changes to the associated table.
            </summary>
            <param name="fragment">The entity type mapping fragment.</param>
            <returns>The configuration source for the configured value.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)">
            <summary>
                Configures whether the index is clustered when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="clustered">A value indicating whether the index is clustered.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsClustered``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Boolean)">
            <summary>
                Configures whether the index is clustered when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="clustered">A value indicating whether the index is clustered.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Configures whether the index is clustered when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="clustered">A value indicating whether the index is clustered.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetIsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Returns a value indicating whether the index can be configured as clustered.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="clustered">A value indicating whether the index is clustered.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the index can be configured as clustered.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IncludeProperties(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String[])">
            <summary>
                Configures index include properties when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="propertyNames">An array of property names to be used in 'include' clause.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IncludeProperties``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.String[])">
            <summary>
                Configures index include properties when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="propertyNames">An array of property names to be used in 'include' clause.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IncludeProperties``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
                Configures index include properties when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="includeExpression">
                <para>
                    A lambda expression representing the property(s) to be included in the 'include' clause
                    (<c>blog => blog.Url</c>).
                </para>
                <para>
                    If multiple properties are to be included then specify an anonymous type including the
                    properties (<c>post => new { post.Title, post.BlogId }</c>).
                </para>
            </param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IncludeProperties(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
                Configures index include properties when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="propertyNames">An array of property names to be used in 'include' clause.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetIncludeProperties(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
                Returns a value indicating whether the given include properties can be set.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="propertyNames">An array of property names to be used in 'include' clause.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given include properties can be set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)">
            <summary>
                Configures whether the index is created with online option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="createdOnline">A value indicating whether the index is created with online option.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsCreatedOnline``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Boolean)">
            <summary>
                Configures whether the index is created with online option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="createdOnline">A value indicating whether the index is created with online option.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.IsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Configures whether the index is created with online option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="createdOnline">A value indicating whether the index is created with online option.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetIsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Returns a value indicating whether the index can be configured with online option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="createdOnline">A value indicating whether the index is created with online option.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
            <returns><see langword="true" /> if the index can be configured with online option when targeting SQL Server.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.HasFillFactor(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Int32)">
            <summary>
                Configures whether the index is created with fill factor option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="fillFactor">A value indicating whether the index is created with fill factor option.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.HasFillFactor``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Int32)">
            <summary>
                Configures whether the index is created with fill factor option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="fillFactor">A value indicating whether the index is created with fill factor option.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.HasFillFactor(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Configures whether the index is created with fill factor option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="fillFactor">A value indicating whether the index is created with fill factor option.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetFillFactor(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Returns a value indicating whether the index can be configured with fill factor option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="fillFactor">A value indicating whether the index is created with fill factor option.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the index can be configured with fill factor option when targeting SQL Server.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.SortInTempDb(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.Boolean)">
            <summary>
                Configures whether the index is created with sort in tempdb option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="sortInTempDb">A value indicating whether the index is created with sort in tempdb option.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.SortInTempDb``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.Boolean)">
            <summary>
                Configures whether the index is created with sort in tempdb option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="sortInTempDb">A value indicating whether the index is created with sort in tempdb option.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.SortInTempDb(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Configures whether the index is created with sort in tempdb option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="sortInTempDb">A value indicating whether the index is created with sort in tempdb option.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetSortInTempDb(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Returns a value indicating whether the index can be configured with sort in tempdb option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="sortInTempDb">A value indicating whether the index is created with sort in tempdb option.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
            <returns><see langword="true" /> if the index can be configured with sort in tempdb option when targeting SQL Server.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.UseDataCompression(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,Microsoft.EntityFrameworkCore.DataCompressionType)">
            <summary>
                Configures whether the index is created with data compression option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="dataCompressionType">A value indicating the data compression option to be used.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.UseDataCompression``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},Microsoft.EntityFrameworkCore.DataCompressionType)">
            <summary>
                Configures whether the index is created with data compression option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="dataCompressionType">A value indicating the data compression option to be used.</param>
            <returns>A builder to further configure the index.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.UseDataCompression(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{Microsoft.EntityFrameworkCore.DataCompressionType},System.Boolean)">
            <summary>
                Configures whether the index is created with data compression option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="dataCompressionType">A value indicating the data compression option to be used.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexBuilderExtensions.CanSetDataCompression(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.Nullable{Microsoft.EntityFrameworkCore.DataCompressionType},System.Boolean)">
            <summary>
                Returns a value indicating whether the index can be configured with data compression option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="indexBuilder">The builder for the index being configured.</param>
            <param name="dataCompressionType">A value indicating the data compression option to be used.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
            <returns><see langword="true" /> if the index can be configured with data compression option when targeting SQL Server.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions">
            <summary>
                Index extension methods for SQL Server-specific metadata.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.IsClustered(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex)">
            <summary>
                Returns a value indicating whether the index is clustered.
            </summary>
            <param name="index">The index.</param>
            <returns><see langword="true" /> if the index is clustered.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.IsClustered(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns a value indicating whether the index is clustered.
            </summary>
            <param name="index">The index.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns><see langword="true" /> if the index is clustered.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetIsClustered(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether the index is clustered.
            </summary>
            <param name="value">The value to set.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetIsClustered(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the index is clustered.
            </summary>
            <param name="value">The value to set.</param>
            <param name="index">The index.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetIsClusteredConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is clustered.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is clustered.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetIncludeProperties(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex)">
            <summary>
                Returns included property names, or <see langword="null" /> if they have not been specified.
            </summary>
            <param name="index">The index.</param>
            <returns>The included property names, or <see langword="null" /> if they have not been specified.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetIncludeProperties(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns included property names, or <see langword="null" /> if they have not been specified.
            </summary>
            <param name="index">The index.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The included property names, or <see langword="null" /> if they have not been specified.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetIncludeProperties(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                Sets included property names.
            </summary>
            <param name="index">The index.</param>
            <param name="properties">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetIncludeProperties(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Collections.Generic.IReadOnlyList{System.String},System.Boolean)">
            <summary>
                Sets included property names.
            </summary>
            <param name="index">The index.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <param name="properties">The value to set.</param>
            <returns>The configured property names.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetIncludePropertiesConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the included property names.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the included property names.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.IsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex)">
            <summary>
                Returns a value indicating whether the index is online.
            </summary>
            <param name="index">The index.</param>
            <returns><see langword="true" /> if the index is online.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.IsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns a value indicating whether the index is online.
            </summary>
            <param name="index">The index.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns><see langword="true" /> if the index is online.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetIsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether the index is online.
            </summary>
            <param name="index">The index.</param>
            <param name="createdOnline">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetIsCreatedOnline(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the index is online.
            </summary>
            <param name="index">The index.</param>
            <param name="createdOnline">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetIsCreatedOnlineConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is online.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is online.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetFillFactor(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex)">
            <summary>
                Returns the fill factor that the index uses.
            </summary>
            <param name="index">The index.</param>
            <returns>The fill factor that the index uses</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetFillFactor(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the fill factor that the index uses.
            </summary>
            <param name="index">The index.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The fill factor that the index uses</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetFillFactor(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Nullable{System.Int32})">
            <summary>
                Sets a value indicating whether the index uses the fill factor.
            </summary>
            <param name="index">The index.</param>
            <param name="fillFactor">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetFillFactor(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Defines a value indicating whether the index uses the fill factor.
            </summary>
            <param name="index">The index.</param>
            <param name="fillFactor">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetFillFactorConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index uses the fill factor.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index uses the fill factor.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetSortInTempDb(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex)">
            <summary>
                Returns a value indicating whether the index is sorted in tempdb.
            </summary>
            <param name="index">The index.</param>
            <returns><see langword="true" /> if the index is sorted in tempdb.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetSortInTempDb(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns a value indicating whether the index is sorted in tempdb.
            </summary>
            <param name="index">The index.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns><see langword="true" /> if the index is sorted in tempdb.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetSortInTempDb(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether the index is sorted in tempdb.
            </summary>
            <param name="index">The index.</param>
            <param name="sortInTempDb">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetSortInTempDb(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the index is sorted in tempdb.
            </summary>
            <param name="index">The index.</param>
            <param name="sortInTempDb">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetSortInTempDbConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is sorted in tempdb.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the index is sorted in tempdb.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetDataCompression(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex)">
            <summary>
                Returns the data compression that the index uses.
            </summary>
            <param name="index">The index.</param>
            <returns>The data compression that the index uses</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetDataCompression(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the data compression that the index uses.
            </summary>
            <param name="index">The index.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The data compression that the index uses</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetDataCompression(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.Nullable{Microsoft.EntityFrameworkCore.DataCompressionType})">
            <summary>
                Sets a value indicating the data compression the index uses.
            </summary>
            <param name="index">The index.</param>
            <param name="dataCompression">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.SetDataCompression(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.Nullable{Microsoft.EntityFrameworkCore.DataCompressionType},System.Boolean)">
            <summary>
                Sets a value indicating the data compression the index uses.
            </summary>
            <param name="index">The index.</param>
            <param name="dataCompression">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerIndexExtensions.GetDataCompressionConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the data compression the index uses.
            </summary>
            <param name="index">The index.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the data compression the index uses.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.IsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.Boolean)">
            <summary>
                Configures whether the key is clustered when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="keyBuilder">The builder for the key being configured.</param>
            <param name="clustered">A value indicating whether the key is clustered.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.IsClustered``1(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder{``0},System.Boolean)">
            <summary>
                Configures whether the key is clustered when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="keyBuilder">The builder for the key being configured.</param>
            <param name="clustered">A value indicating whether the key is clustered.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.IsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Configures whether the key is clustered when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="keyBuilder">The builder for the key being configured.</param>
            <param name="clustered">A value indicating whether the key is clustered.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.CanSetIsClustered(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Returns a value indicating whether the key can be configured as clustered.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="keyBuilder">The builder for the key being configured.</param>
            <param name="clustered">A value indicating whether the key is clustered.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the key can be configured as clustered.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.HasFillFactor(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.Int32)">
            <summary>
                Configures whether the key is created with fill factor option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="keyBuilder">The builder for the key being configured.</param>
            <param name="fillFactor">A value indicating whether the key is created with fill factor option.</param>
            <returns>A builder to further configure the key.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.HasFillFactor``1(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder{``0},System.Int32)">
            <summary>
                Configures whether the key is created with fill factor option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="keyBuilder">The builder for the key being configured.</param>
            <param name="fillFactor">A value indicating whether the key is created with fill factor option.</param>
            <returns>A builder to further configure the key.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.HasFillFactor(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Configures whether the key is created with fill factor option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="keyBuilder">The builder for the key being configured.</param>
            <param name="fillFactor">A value indicating whether the key is created with fill factor option.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyBuilderExtensions.CanSetFillFactor(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Returns a value indicating whether the key can be configured with fill factor option when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="keyBuilder">The builder for the key being configured.</param>
            <param name="fillFactor">A value indicating whether the key is created with fill factor option.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the key can be configured with fill factor option when targeting SQL Server.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerKeyExtensions">
            <summary>
                Key extension methods for SQL Server-specific metadata.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyExtensions.IsClustered(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey)">
            <summary>
                Returns a value indicating whether the key is clustered.
            </summary>
            <param name="key">The key.</param>
            <returns><see langword="true" /> if the key is clustered.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyExtensions.IsClustered(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns a value indicating whether the key is clustered.
            </summary>
            <param name="key">The key.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns><see langword="true" /> if the key is clustered.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyExtensions.SetIsClustered(Microsoft.EntityFrameworkCore.Metadata.IMutableKey,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether the key is clustered.
            </summary>
            <param name="key">The key.</param>
            <param name="clustered">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyExtensions.SetIsClustered(Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the key is clustered.
            </summary>
            <param name="key">The key.</param>
            <param name="clustered">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyExtensions.GetIsClusteredConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionKey)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the key is clustered.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the key is clustered.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyExtensions.GetFillFactor(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey)">
            <summary>
                Returns the fill factor that the key uses.
            </summary>
            <param name="key">The key.</param>
            <returns>The fill factor that the key uses</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyExtensions.GetFillFactor(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the fill factor that the key uses.
            </summary>
            <param name="key">The key.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The fill factor that the key uses</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyExtensions.SetFillFactor(Microsoft.EntityFrameworkCore.Metadata.IMutableKey,System.Nullable{System.Int32})">
            <summary>
                Sets a value for fill factor the key uses.
            </summary>
            <param name="key">The key.</param>
            <param name="fillFactor">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyExtensions.SetFillFactor(Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Sets a value for fill factor the key uses.
            </summary>
            <param name="key">The key.</param>
            <param name="fillFactor">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerKeyExtensions.GetFillFactorConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionKey)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the key uses the fill factor.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the key uses the fill factor.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationBuilderExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationBuilderExtensions.IsSqlServer(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
                Returns <see langword="true" /> if the database provider currently in use is the SQL Server provider.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="migrationBuilder">
                The migrationBuilder from the parameters on <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" /> or
                <see cref="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)" />.
            </param>
            <returns><see langword="true" /> if SQL Server is being used; <see langword="false" /> otherwise.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerCreateDatabaseOperation">
            <summary>
                A SQL Server-specific <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to create a database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-migrations">Database migrations</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerCreateDatabaseOperation.Name">
            <summary>
                The name of the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerCreateDatabaseOperation.FileName">
            <summary>
                The filename to use for the database, or <see langword="null" /> to let SQL Server choose.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerDropDatabaseOperation">
            <summary>
                A SQL Server-specific <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to drop a database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-migrations">Database migrations</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerDropDatabaseOperation.Name">
            <summary>
                The name of the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator">
            <summary>
                SQL Server-specific implementation of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator" />.
            </summary>
            <remarks>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-migrations">Database migrations</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies,Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator" /> instance.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this service.</param>
            <param name="commandBatchPreparer">The command batch preparer.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation},Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions)">
            <summary>
                Generates commands from a list of operations.
            </summary>
            <param name="operations">The operations.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="options">The options to use when generating commands.</param>
            <returns>The list of commands to be executed or scripted.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <remarks>
                This method uses a double-dispatch mechanism to call the <see cref="O:MigrationsSqlGenerator.Generate" /> method
                that is specific to a certain subtype of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />. Typically database providers
                will override these specific methods rather than this method. However, providers can override
                this methods to handle provider-specific operations.
            </remarks>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerCreateDatabaseOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerCreateDatabaseOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerDropDatabaseOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlServerDropDatabaseOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation" />
                by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.SqlOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="terminate">Indicates whether or not to terminate the command after generating SQL for the operation.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.SequenceOptions(System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.ColumnDefinition(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a column definition for the given column metadata.
            </summary>
            <param name="schema">The schema that contains the table, or <see langword="null" /> to use the default schema.</param>
            <param name="table">The table that contains the column.</param>
            <param name="name">The column name.</param>
            <param name="operation">The column metadata.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to add the SQL fragment.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.ComputedColumnDefinition(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a computed column definition for the given column metadata.
            </summary>
            <param name="schema">The schema that contains the table, or <see langword="null" /> to use the default schema.</param>
            <param name="table">The table that contains the column.</param>
            <param name="name">The column name.</param>
            <param name="operation">The column metadata.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to add the SQL fragment.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Rename(System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a rename.
            </summary>
            <param name="name">The old name.</param>
            <param name="newName">The new name.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Rename(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a rename.
            </summary>
            <param name="name">The old name.</param>
            <param name="newName">The new name.</param>
            <param name="type">If not <see langword="null" />, then appends literal for type of object being renamed (e.g. column or index.)</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.Transfer(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a transfer from one schema to another.
            </summary>
            <param name="newSchema">The schema to transfer to.</param>
            <param name="schema">The schema to transfer from.</param>
            <param name="name">The name of the item to transfer.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.IndexTraits(Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for traits of an index from a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" />,
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation" />, or <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to add the SQL fragment.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.IndexOptions(Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for extras (filter, included columns, options) of an index from a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" />.
            </summary>
            <param name="operation">The operation.</param>
            <param name="model">The target model which may be <see langword="null" /> if the operations exist without a model.</param>
            <param name="builder">The command builder to use to add the SQL fragment.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.ForeignKeyAction(Microsoft.EntityFrameworkCore.Migrations.ReferentialAction,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the given referential action.
            </summary>
            <param name="referentialAction">The referential action.</param>
            <param name="builder">The command builder to use to add the SQL fragment.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.DropDefaultConstraint(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment to drop default constraints for a column.
            </summary>
            <param name="schema">The schema that contains the table.</param>
            <param name="tableName">The table that contains the column.</param>
            <param name="columnName">The column.</param>
            <param name="builder">The command builder to use to add the SQL fragment.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.GetIndexesToRebuild(Microsoft.EntityFrameworkCore.Metadata.IColumn,Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation)">
            <summary>
                Gets the list of indexes that need to be rebuilt when the given column is changing.
            </summary>
            <param name="column">The column.</param>
            <param name="currentOperation">The operation which may require a rebuild.</param>
            <returns>The list of indexes affected.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.DropIndexes(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.ITableIndex},Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates SQL to drop the given indexes.
            </summary>
            <param name="indexes">The indexes to drop.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.CreateIndexes(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.ITableIndex},Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates SQL to create the given indexes.
            </summary>
            <param name="indexes">The indexes to create.</param>
            <param name="builder">The command builder to use to build the commands.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.AddDescription(Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Generates add commands for descriptions on tables and columns.
            </summary>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="description">The new description to be applied.</param>
            <param name="schema">The schema of the table.</param>
            <param name="table">The name of the table.</param>
            <param name="column">The name of the column.</param>
            <param name="omitVariableDeclarations">
                Indicates whether the variable declarations should be omitted.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.DropDescription(Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.String,System.String,System.String,System.Boolean)">
            <summary>
                Generates drop commands for descriptions on tables and columns.
            </summary>
            <param name="builder">The command builder to use to build the commands.</param>
            <param name="schema">The schema of the table.</param>
            <param name="table">The name of the table.</param>
            <param name="column">The name of the column.</param>
            <param name="omitVariableDeclarations">
                Indicates whether the variable declarations should be omitted.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.SqlServerMigrationsSqlGenerator.UseLegacyIndexFilters(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Checks whether or not <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" /> should have a filter generated for it by
                Migrations.
            </summary>
            <param name="operation">The index creation operation.</param>
            <param name="model">The target model.</param>
            <returns><see langword="true" /> if a filter should be generated.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.UseHiLo(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)">
            <summary>
                Configures the model to use a sequence-based hi-lo pattern to generate values for key properties
                marked as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />, when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasHiLoSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Configures the database sequence used for the hi-lo pattern to generate values for key properties
                marked as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />, when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>A builder to further configure the sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.CanSetHiLoSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given name and schema can be set for the hi-lo sequence.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given name and schema can be set for the hi-lo sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.UseKeySequences(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)">
            <summary>
                Configures the model to use a sequence per hierarchy to generate values for key properties
                marked as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />, when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="nameSuffix">The name that will suffix the table name for each sequence created automatically.</param>
            <param name="schema">The schema of the sequence.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.UseIdentityColumns(Microsoft.EntityFrameworkCore.ModelBuilder,System.Int64,System.Int32)">
            <summary>
                Configures the model to use the SQL Server IDENTITY feature to generate values for key properties
                marked as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />, when targeting SQL Server. This is the default
                behavior when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.UseIdentityColumns(Microsoft.EntityFrameworkCore.ModelBuilder,System.Int32,System.Int32)">
            <summary>
                Configures the model to use the SQL Server IDENTITY feature to generate values for key properties
                marked as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />, when targeting SQL Server. This is the default
                behavior when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Configures the default seed for SQL Server IDENTITY.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.CanSetIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the default seed for SQL Server IDENTITY.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the seed for SQL Server IDENTITY.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasIdentityColumnIncrement(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Configures the default increment for SQL Server IDENTITY.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.CanSetIdentityColumnIncrement(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the default increment for SQL Server IDENTITY.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the default increment for SQL Server IDENTITY.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},System.Boolean)">
            <summary>
                Configures the default value generation strategy for key properties marked as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />,
                when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="valueGenerationStrategy">The value generation strategy.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.CanSetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the default value generation strategy.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="valueGenerationStrategy">The value generation strategy.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the default value generation strategy.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasDatabaseMaxSize(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)">
            <summary>
                Configures the maximum size for Azure SQL Database.
            </summary>
            <remarks>
                <para>
                    Units must be included, e.g. "100 MB". See Azure SQL Database documentation for all supported values.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="maxSize">The maximum size of the database.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasDatabaseMaxSize(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Attempts to configure the maximum size for Azure SQL Database.
            </summary>
            <remarks>
                <para>
                    Units must be included, e.g. "100 MB". See Azure SQL Database documentation for all supported values.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="maxSize">The maximum size of the database.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.CanSetDatabaseMaxSize(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the maximum size of the database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="maxSize">The maximum size of the database.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the maximum size of the database.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasServiceTier(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)">
            <summary>
                Configures the service tier (EDITION) for Azure SQL Database as a string literal.
            </summary>
            <remarks>
                <para>
                    See Azure SQL Database documentation for supported values.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="serviceTier">The service tier of the database as a string literal.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasServiceTierSql(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)">
            <summary>
                Configures the service tier (EDITION) for Azure SQL Database as a SQL expression.
            </summary>
            <remarks>
                <para>
                    See Azure SQL Database documentation for supported values.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="serviceTier">The expression for the service tier of the database.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasServiceTierSql(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Attempts to configure the service tier (EDITION) for Azure SQL Database.
            </summary>
            <remarks>
                <para>
                    See Azure SQL Database documentation for supported values.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="serviceTier">The expression for the service tier of the database.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.CanSetServiceTierSql(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the service tier of the database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="serviceTier">The expression for the service tier of the database.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the service tier of the database.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasPerformanceLevel(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)">
            <summary>
                Configures the performance level (SERVICE_OBJECTIVE) for Azure SQL Database as a string literal.
            </summary>
            <remarks>
                <para>
                    See Azure SQL Database documentation for supported values.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="performanceLevel">The performance level of the database as a string literal.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasPerformanceLevelSql(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)">
            <summary>
                Configures the performance level (SERVICE_OBJECTIVE) for Azure SQL Database as a SQL expression.
            </summary>
            <remarks>
                <para>
                    See Azure SQL Database documentation for supported values.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="performanceLevel">The expression for the performance level of the database.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.HasPerformanceLevelSql(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Attempts to configure the performance level (SERVICE_OBJECTIVE) for Azure SQL Database.
            </summary>
            <remarks>
                <para>
                    See Azure SQL Database documentation for supported values.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="performanceLevel">The expression for the performance level of the database.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelBuilderExtensions.CanSetPerformanceLevelSql(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the performance level of the database.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="modelBuilder">The model builder.</param>
            <param name="performanceLevel">The performance level of the database expression.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the performance level of the database.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerModelExtensions">
            <summary>
                Model extension methods for SQL Server-specific metadata.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.DefaultHiLoSequenceName">
            <summary>
                The default name for the hi-lo sequence.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.DefaultSequenceNameSuffix">
            <summary>
                The default prefix for sequences applied to properties.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetHiLoSequenceName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the name to use for the default hi-lo sequence.
            </summary>
            <param name="model">The model.</param>
            <returns>The name to use for the default hi-lo sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetHiLoSequenceName(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Sets the name to use for the default hi-lo sequence.
            </summary>
            <param name="model">The model.</param>
            <param name="name">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetHiLoSequenceName(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Boolean)">
            <summary>
                Sets the name to use for the default hi-lo sequence.
            </summary>
            <param name="model">The model.</param>
            <param name="name">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetHiLoSequenceNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default hi-lo sequence name.
            </summary>
            <param name="model">The model.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default hi-lo sequence name.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetHiLoSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the schema to use for the default hi-lo sequence.
                <see cref="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseHiLo(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String,System.String)" />
            </summary>
            <param name="model">The model.</param>
            <returns>The schema to use for the default hi-lo sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetHiLoSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Sets the schema to use for the default hi-lo sequence.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetHiLoSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Boolean)">
            <summary>
                Sets the schema to use for the default hi-lo sequence.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetHiLoSequenceSchemaConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default hi-lo sequence schema.
            </summary>
            <param name="model">The model.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default hi-lo sequence schema.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetSequenceNameSuffix(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the suffix to append to the name of automatically created sequences.
            </summary>
            <param name="model">The model.</param>
            <returns>The name to use for the default key value generation sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetSequenceNameSuffix(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Sets the suffix to append to the name of automatically created sequences.
            </summary>
            <param name="model">The model.</param>
            <param name="name">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetSequenceNameSuffix(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Boolean)">
            <summary>
                Sets the suffix to append to the name of automatically created sequences.
            </summary>
            <param name="model">The model.</param>
            <param name="name">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetSequenceNameSuffixConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default value generation sequence name suffix.
            </summary>
            <param name="model">The model.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default key value generation sequence name.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the schema to use for the default value generation sequence.
                <see cref="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String,System.String)" />
            </summary>
            <param name="model">The model.</param>
            <returns>The schema to use for the default key value generation sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Sets the schema to use for the default key value generation sequence.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Boolean)">
            <summary>
                Sets the schema to use for the default key value generation sequence.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetSequenceSchemaConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default key value generation sequence schema.
            </summary>
            <param name="model">The model.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default key value generation sequence schema.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the default identity seed.
            </summary>
            <param name="model">The model.</param>
            <returns>The default identity seed.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{System.Int64})">
            <summary>
                Sets the default identity seed.
            </summary>
            <param name="model">The model.</param>
            <param name="seed">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Sets the default identity seed.
            </summary>
            <param name="model">The model.</param>
            <param name="seed">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetIdentitySeedConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default schema.
            </summary>
            <param name="model">The model.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default schema.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the default identity increment.
            </summary>
            <param name="model">The model.</param>
            <returns>The default identity increment.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{System.Int32})">
            <summary>
                Sets the default identity increment.
            </summary>
            <param name="model">The model.</param>
            <param name="increment">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Sets the default identity increment.
            </summary>
            <param name="model">The model.</param>
            <param name="increment">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetIdentityIncrementConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default identity increment.
            </summary>
            <param name="model">The model.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default identity increment.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for properties
                of keys in the model, unless the property has a strategy explicitly set.
            </summary>
            <param name="model">The model.</param>
            <returns>The default <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy})">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for properties
                of keys in the model that don't have a strategy explicitly set.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},System.Boolean)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for properties
                of keys in the model that don't have a strategy explicitly set.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetValueGenerationStrategyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" />.
            </summary>
            <param name="model">The model.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetDatabaseMaxSize(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the maximum size of the database.
            </summary>
            <param name="model">The model.</param>
            <returns>The maximum size of the database.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetDatabaseMaxSize(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Sets the maximum size of the database.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetDatabaseMaxSize(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Boolean)">
            <summary>
                Sets the maximum size of the database.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetDatabaseMaxSizeConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the maximum size of the database.
            </summary>
            <param name="model">The model.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the maximum size of the database.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetServiceTierSql(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the service tier of the database.
            </summary>
            <param name="model">The model.</param>
            <returns>The service tier of the database.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetServiceTierSql(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Sets the service tier of the database.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetServiceTierSql(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Boolean)">
            <summary>
                Sets the service tier of the database.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetServiceTierSqlConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the service tier of the database.
            </summary>
            <param name="model">The model.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the service tier of the database.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetPerformanceLevelSql(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel)">
            <summary>
                Returns the performance level of the database.
            </summary>
            <param name="model">The model.</param>
            <returns>The performance level of the database.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetPerformanceLevelSql(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Sets the performance level of the database.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.SetPerformanceLevelSql(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Boolean)">
            <summary>
                Sets the performance level of the database.
            </summary>
            <param name="model">The model.</param>
            <param name="value">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerModelExtensions.GetPerformanceLevelSqlConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the performance level of the database.
            </summary>
            <param name="model">The model.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the performance level of the database.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerPrimitiveCollectionBuilderExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPrimitiveCollectionBuilderExtensions.IsSparse(Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder,System.Boolean)">
            <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
            <param name="primitiveCollectionBuilder">The builder for the property being configured.</param>
            <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
            <returns>A builder to further configure the property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPrimitiveCollectionBuilderExtensions.IsSparse``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PrimitiveCollectionBuilder{``0},System.Boolean)">
            <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
            <param name="primitiveCollectionBuilder">The builder for the property being configured.</param>
            <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
            <returns>A builder to further configure the property.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseHiLo(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String,System.String)">
            <summary>
                Configures the key property to use a sequence-based hi-lo pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseHiLo``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String,System.String)">
            <summary>
                Configures the key property to use a sequence-based hi-lo pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TProperty">The type of the property being configured.</typeparam>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasHiLoSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Configures the database sequence used for the hi-lo pattern to generate values for the key property,
                when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>A builder to further configure the sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetHiLoSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given name and schema can be set for the hi-lo sequence.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given name and schema can be set for the hi-lo sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String,System.String)">
            <summary>
                Configures the key property to use a sequence-based key value generation pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseSequence``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String,System.String)">
            <summary>
                Configures the key property to use a sequence-based key value generation pattern to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TProperty">The type of the property being configured.</typeparam>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Configures the database sequence used for the key value generation pattern to generate values for the key property,
                when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>A builder to further configure the sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given name and schema can be set for the key value generation sequence.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="name">The name of the sequence.</param>
            <param name="schema">The schema of the sequence.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given name and schema can be set for the key value generation sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Int64,System.Int32)">
            <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Int32,System.Int32)">
            <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder,System.Int64,System.Int32)">
            <summary>
                Configures the key column to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="columnBuilder">The builder for the column being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Int64,System.Int32)">
            <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TProperty">The type of the property being configured.</typeparam>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Int32,System.Int32)">
            <summary>
                Configures the key property to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TProperty">The type of the property being configured.</typeparam>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.UseIdentityColumn``1(Microsoft.EntityFrameworkCore.Metadata.Builders.ColumnBuilder{``0},System.Int64,System.Int32)">
            <summary>
                Configures the key column to use the SQL Server IDENTITY feature to generate values for new entities,
                when targeting SQL Server. This method sets the property to be <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TProperty">The type of the property being configured.</typeparam>
            <param name="columnBuilder">The builder for the column being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Configures the seed for SQL Server IDENTITY.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Configures the seed for SQL Server IDENTITY for a particular table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="storeObject">The table identifier.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the seed for SQL Server IDENTITY.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the seed for SQL Server IDENTITY.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnSeed(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the seed for SQL Server IDENTITY
                for a particular table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="seed">The value that is used for the very first row loaded into the table.</param>
            <param name="storeObject">The table identifier.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the seed for SQL Server IDENTITY.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnIncrement(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Configures the increment for SQL Server IDENTITY.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasIdentityColumnIncrement(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Configures the increment for SQL Server IDENTITY for a particular table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <param name="storeObject">The table identifier.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnIncrement(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the increment for SQL Server IDENTITY.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the default increment for SQL Server IDENTITY.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIdentityColumnIncrement(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Int32},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the increment for SQL Server IDENTITY
                for a particular table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="increment">The incremental value that is added to the identity value of the previous row that was loaded.</param>
            <param name="storeObject">The table identifier.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the default increment for SQL Server IDENTITY.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},System.Boolean)">
            <summary>
                Configures the value generation strategy for the key property, when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="valueGenerationStrategy">The value generation strategy.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.HasValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Configures the value generation strategy for the key property, when targeting SQL Server for a particular table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="valueGenerationStrategy">The value generation strategy.</param>
            <param name="storeObject">The table identifier.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the value generation strategy.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="valueGenerationStrategy">The value generation strategy.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the default value generation strategy.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the value generation strategy for a particular table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="valueGenerationStrategy">The value generation strategy.</param>
            <param name="storeObject">The table identifier.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns><see langword="true" /> if the given value can be set as the default value generation strategy.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.IsSparse(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Boolean)">
            <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
            <returns>A builder to further configure the property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.IsSparse``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Boolean)">
            <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
            <returns>A builder to further configure the property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.IsSparse(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Configures whether the property's column is created as sparse when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
            <param name="propertyBuilder">The builder for the property being configured.</param>
            <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The same builder instance if the configuration was applied, <see langword="null" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyBuilderExtensions.CanSetIsSparse(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Returns a value indicating whether the property's column can be configured as sparse when targeting SQL Server.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples. Also see
                <see href="https://docs.microsoft.com/sql/relational-databases/tables/use-sparse-columns">Sparse columns</see> for
                general information on SQL Server sparse columns.
            </remarks>
            <param name="property">The builder for the property being configured.</param>
            <param name="sparse">A value indicating whether the property's column is created as sparse.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The same builder instance if the configuration was applied, <see langword="null" /> otherwise.</returns>
            <returns>
                <see langword="true" /> if the property's column can be configured as sparse when targeting SQL Server.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions">
            <summary>
                Property extension methods for SQL Server-specific metadata.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-modeling">Modeling entity types and relationships</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetHiLoSequenceName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns the name to use for the hi-lo sequence.
            </summary>
            <param name="property">The property.</param>
            <returns>The name to use for the hi-lo sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetHiLoSequenceName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the name to use for the hi-lo sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The name to use for the hi-lo sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetHiLoSequenceName(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
                Sets the name to use for the hi-lo sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="name">The sequence name to use.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetHiLoSequenceName(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)">
            <summary>
                Sets the name to use for the hi-lo sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="name">The sequence name to use.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetHiLoSequenceNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the hi-lo sequence name.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the hi-lo sequence name.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetHiLoSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns the schema to use for the hi-lo sequence.
            </summary>
            <param name="property">The property.</param>
            <returns>The schema to use for the hi-lo sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetHiLoSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the schema to use for the hi-lo sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The schema to use for the hi-lo sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetHiLoSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
                Sets the schema to use for the hi-lo sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="schema">The schema to use.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetHiLoSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)">
            <summary>
                Sets the schema to use for the hi-lo sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="schema">The schema to use.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetHiLoSequenceSchemaConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the hi-lo sequence schema.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the hi-lo sequence schema.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.FindHiLoSequence(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Finds the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> in the model to use for the hi-lo pattern.
            </summary>
            <param name="property">The property.</param>
            <returns>The sequence to use, or <see langword="null" /> if no sequence exists in the model.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.FindHiLoSequence(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Finds the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> in the model to use for the hi-lo pattern.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The sequence to use, or <see langword="null" /> if no sequence exists in the model.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.FindHiLoSequence(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Finds the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> in the model to use for the hi-lo pattern.
            </summary>
            <param name="property">The property.</param>
            <returns>The sequence to use, or <see langword="null" /> if no sequence exists in the model.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.FindHiLoSequence(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Finds the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> in the model to use for the hi-lo pattern.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The sequence to use, or <see langword="null" /> if no sequence exists in the model.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetSequenceName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns the name to use for the key value generation sequence.
            </summary>
            <param name="property">The property.</param>
            <returns>The name to use for the key value generation sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetSequenceName(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the name to use for the key value generation sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The name to use for the key value generation sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetSequenceName(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
                Sets the name to use for the key value generation sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="name">The sequence name to use.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetSequenceName(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)">
            <summary>
                Sets the name to use for the key value generation sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="name">The sequence name to use.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetSequenceNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the key value generation sequence name.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the key value generation sequence name.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns the schema to use for the key value generation sequence.
            </summary>
            <param name="property">The property.</param>
            <returns>The schema to use for the key value generation sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the schema to use for the key value generation sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The schema to use for the key value generation sequence.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
                Sets the schema to use for the key value generation sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="schema">The schema to use.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetSequenceSchema(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)">
            <summary>
                Sets the schema to use for the key value generation sequence.
            </summary>
            <param name="property">The property.</param>
            <param name="schema">The schema to use.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetSequenceSchemaConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the key value generation sequence schema.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the key value generation sequence schema.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.FindSequence(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Finds the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> in the model to use for the key value generation pattern.
            </summary>
            <param name="property">The property.</param>
            <returns>The sequence to use, or <see langword="null" /> if no sequence exists in the model.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.FindSequence(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Finds the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> in the model to use for the key value generation pattern.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The sequence to use, or <see langword="null" /> if no sequence exists in the model.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.FindSequence(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Finds the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> in the model to use for the key value generation pattern.
            </summary>
            <param name="property">The property.</param>
            <returns>The sequence to use, or <see langword="null" /> if no sequence exists in the model.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.FindSequence(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Finds the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> in the model to use for the key value generation pattern.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The sequence to use, or <see langword="null" /> if no sequence exists in the model.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns the identity seed.
            </summary>
            <param name="property">The property.</param>
            <returns>The identity seed.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the identity seed.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The identity seed.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyRelationalPropertyOverrides)">
            <summary>
                Returns the identity seed.
            </summary>
            <param name="overrides">The property overrides.</param>
            <returns>The identity seed.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int64})">
            <summary>
                Sets the identity seed.
            </summary>
            <param name="property">The property.</param>
            <param name="seed">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Sets the identity seed.
            </summary>
            <param name="property">The property.</param>
            <param name="seed">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Sets the identity seed for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="seed">The value to set.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Sets the identity seed for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="seed">The value to set.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IMutableRelationalPropertyOverrides,System.Nullable{System.Int64})">
            <summary>
                Sets the identity seed for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <param name="seed">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentitySeed(Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides,System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Sets the identity seed for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <param name="seed">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentitySeedConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity seed.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity seed.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentitySeedConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity seed for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity seed.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentitySeedConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity seed for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity seed.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns the identity increment.
            </summary>
            <param name="property">The property.</param>
            <returns>The identity increment.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the identity increment.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The identity increment.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyRelationalPropertyOverrides)">
            <summary>
                Returns the identity increment.
            </summary>
            <param name="overrides">The property overrides.</param>
            <returns>The identity increment.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32})">
            <summary>
                Sets the identity increment.
            </summary>
            <param name="property">The property.</param>
            <param name="increment">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Sets the identity increment.
            </summary>
            <param name="property">The property.</param>
            <param name="increment">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Int32},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Sets the identity increment for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="increment">The value to set.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{System.Int32},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Sets the identity increment for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="increment">The value to set.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IMutableRelationalPropertyOverrides,System.Nullable{System.Int32})">
            <summary>
                Sets the identity increment for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <param name="increment">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIdentityIncrement(Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Sets the identity increment for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <param name="increment">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentityIncrementConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity increment.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity increment.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentityIncrementConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity increment for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity increment.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIdentityIncrementConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity increment for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the identity increment.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for the property.
            </summary>
            <remarks>
                If no strategy is set for the property, then the strategy to use will be taken from the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
            </remarks>
            <param name="property">The property.</param>
            <returns>The strategy, or <see cref="F:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.None" /> if none was set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for the property.
            </summary>
            <remarks>
                If no strategy is set for the property, then the strategy to use will be taken from the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
            </remarks>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The strategy, or <see cref="F:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.None" /> if none was set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyRelationalPropertyOverrides)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for the property.
            </summary>
            <remarks>
                If no strategy is set for the property, then the strategy to use will be taken from the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
            </remarks>
            <param name="overrides">The property overrides.</param>
            <returns>The strategy, or <see cref="F:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.None" /> if none was set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy})">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for the property.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The strategy to use.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},System.Boolean)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for the property.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The strategy to use.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for the property for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The strategy to use.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for the property for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="value">The strategy to use.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IMutableRelationalPropertyOverrides,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy})">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for the property for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <param name="value">The strategy to use.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetValueGenerationStrategy(Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides,System.Nullable{Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy},System.Boolean)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> to use for the property for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <param name="value">The strategy to use.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetValueGenerationStrategyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" />.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetValueGenerationStrategyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> for a particular table.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the table containing the column.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetValueGenerationStrategyConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionRelationalPropertyOverrides)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> for a particular table.
            </summary>
            <param name="overrides">The property overrides.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.IsCompatibleWithValueGeneration(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns a value indicating whether the property is compatible with any <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" />.
            </summary>
            <param name="property">The property.</param>
            <returns><see langword="true" /> if compatible.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.IsSparse(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty)">
            <summary>
                Returns a value indicating whether the property's column is sparse.
            </summary>
            <param name="property">The property.</param>
            <returns><see langword="true" /> if the property's column is sparse.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.IsSparse(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns a value indicating whether the property's column is sparse.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns><see langword="true" /> if the property's column is sparse.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIsSparse(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether the property's column is sparse.
            </summary>
            <param name="property">The property.</param>
            <param name="sparse">The value to set.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.SetIsSparse(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the property's column is sparse.
            </summary>
            <param name="property">The property.</param>
            <param name="sparse">The value to set.</param>
            <param name="fromDataAnnotation">Indicates whether the configuration was specified using a data annotation.</param>
            <returns>The configured value.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerPropertyExtensions.GetIsSparseConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the property's column is sparse.
            </summary>
            <param name="property">The property.</param>
            <returns>The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for whether the property's column is sparse.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsTemporal(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder,System.Boolean)">
            <summary>
                Configures the table as temporal.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="temporal">A value indicating whether the table is temporal.</param>
            <returns>An object that can be used to configure the temporal table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsTemporal(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder})">
            <summary>
                Configures the table as temporal.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="buildAction">An action that performs configuration of the temporal table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsTemporal``1(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0},System.Boolean)">
            <summary>
                Configures the table as temporal.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="temporal">A value indicating whether the table is temporal.</param>
            <returns>An object that can be used to configure the temporal table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsTemporal``1(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder{``0}})">
            <summary>
                Configures the table as temporal.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="buildAction">An action that performs configuration of the temporal table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsTemporal(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder,System.Boolean)">
            <summary>
                Configures the table as temporal.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="temporal">A value indicating whether the table is temporal.</param>
            <returns>An object that can be used to configure the temporal table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsTemporal(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder})">
            <summary>
                Configures the table as temporal.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="buildAction">An action that performs configuration of the temporal table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsTemporal``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder{``0,``1},System.Boolean)">
            <summary>
                Configures the table as temporal.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
            <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="temporal">A value indicating whether the table is temporal.</param>
            <returns>An object that can be used to configure the temporal table.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsTemporal``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder{``0,``1},System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder{``0,``1}})">
            <summary>
                Configures the table as temporal.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
            <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="buildAction">An action that performs configuration of the temporal table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder,System.Boolean)">
            <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="memoryOptimized">A value indicating whether the table is memory-optimized.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsMemoryOptimized``1(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0},System.Boolean)">
            <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="memoryOptimized">A value indicating whether the table is memory-optimized.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsMemoryOptimized(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder,System.Boolean)">
            <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="memoryOptimized">A value indicating whether the table is memory-optimized.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.IsMemoryOptimized``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder{``0,``1},System.Boolean)">
            <summary>
                Configures the table that the entity maps to when targeting SQL Server as memory-optimized.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-memory-optimized">Using SQL Server memory-optimized tables with EF Core</see>
                for more information and examples.
            </remarks>
            <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
            <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="memoryOptimized">A value indicating whether the table is memory-optimized.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder,System.Boolean)">
            <summary>
                Configures whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlserver-save-changes-and-output-clause">Using the SQL OUTPUT clause with SQL Server</see>
                for more information and examples.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlOutputClause">A value indicating whether to use the OUTPUT clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.UseSqlOutputClause``1(Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0},System.Boolean)">
            <summary>
                Configures whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlserver-save-changes-and-output-clause">Using the SQL OUTPUT clause with SQL Server</see>
                for more information and examples.
            </remarks>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlOutputClause">A value indicating whether to use the OUTPUT clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder,System.Boolean)">
            <summary>
                Configures whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlserver-save-changes-and-output-clause">Using the SQL OUTPUT clause with SQL Server</see>
                for more information and examples.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlOutputClause">A value indicating whether to use the OUTPUT clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.UseSqlOutputClause``1(Microsoft.EntityFrameworkCore.Metadata.Builders.SplitTableBuilder{``0},System.Boolean)">
            <summary>
                Configures whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlserver-save-changes-and-output-clause">Using the SQL OUTPUT clause with SQL Server</see>
                for more information and examples.
            </remarks>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlOutputClause">A value indicating whether to use the OUTPUT clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.UseSqlOutputClause(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder,System.Boolean)">
            <summary>
                Configures whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlserver-save-changes-and-output-clause">Using the SQL OUTPUT clause with SQL Server</see>
                for more information and examples.
            </remarks>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlOutputClause">A value indicating whether to use the OUTPUT clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableBuilderExtensions.UseSqlOutputClause``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTableBuilder{``0,``1},System.Boolean)">
            <summary>
                Configures whether to use the SQL OUTPUT clause when saving changes to the table.
                The OUTPUT clause is incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-sqlserver-save-changes-and-output-clause">Using the SQL OUTPUT clause with SQL Server</see>
                for more information and examples.
            </remarks>
            <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
            <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
            <param name="tableBuilder">The builder for the table being configured.</param>
            <param name="useSqlOutputClause">A value indicating whether to use the OUTPUT clause when saving changes to the table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerTableExtensions">
            <summary>
                SQL Server specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITable" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerTableExtensions.IsSqlOutputClauseUsed(Microsoft.EntityFrameworkCore.Metadata.ITable)">
            <summary>
                Returns a value indicating whether to use the SQL OUTPUT clause when saving changes to the table. The OUTPUT clause is
                incompatible with certain SQL Server features, such as tables with triggers.
            </summary>
            <param name="table">The table.</param>
            <returns><see langword="true" /> if the SQL OUTPUT clause is used to save changes to the table.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder">
            <summary>
                Allows Azure SQL specific configuration to be performed on <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />.
            </summary>
            <remarks>
                Instances of this class are returned from a call to
                <see cref="O:SqlServerDbContextOptionsExtensions.UseAzureSql" />
                and it is not designed to be directly constructed in your application code.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder.#ctor(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder" /> class.
            </summary>
            <param name="optionsBuilder">The options builder.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder.EnableRetryOnFailure">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to Azure SQL. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32)">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to Azure SQL. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    A default value 30 seconds for the maximum default delay is used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder.EnableRetryOnFailure(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to Azure SQL. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to Azure SQL. It is pre-configured with
                    error numbers for transient errors that can be retried, but additional error numbers can also be supplied.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="maxRetryCount">The maximum number of retry attempts.</param>
            <param name="maxRetryDelay">The maximum delay between retries.</param>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder.UseCompatibilityLevel(System.Int32)">
            <summary>
                Sets the Azure SQL compatibility level that EF Core will use when interacting with the database. This allows configuring EF
                Core to work with older (or newer) versions of Azure SQL. Defaults to <c>160</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://learn.microsoft.com/en-us/sql/t-sql/statements/alter-database-scoped-configuration-transact-sql">
                    Azure SQL documentation on compatibility level
                </see>
                for more information and examples.
            </remarks>
            <param name="compatibilityLevel"><see langword="false" /> to have null resource</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder">
            <summary>
                Allows Azure Synapse specific configuration to be performed on <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />.
            </summary>
            <remarks>
                Instances of this class are returned from a call to
                <see cref="O:SqlServerDbContextOptionsExtensions.UseAzureSynapse" />
                and it is not designed to be directly constructed in your application code.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder.#ctor(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder" /> class.
            </summary>
            <param name="optionsBuilder">The options builder.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder.EnableRetryOnFailure">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to Azure Synapse. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32)">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to Azure Synapse. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    A default value 30 seconds for the maximum default delay is used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder.EnableRetryOnFailure(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to Azure Synapse. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to Azure Synapse. It is pre-configured with
                    error numbers for transient errors that can be retried, but additional error numbers can also be supplied.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="maxRetryCount">The maximum number of retry attempts.</param>
            <param name="maxRetryDelay">The maximum delay between retries.</param>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder.UseCompatibilityLevel(System.Int32)">
            <summary>
                Sets the Azure Synapse compatibility level that EF Core will use when interacting with the database. This allows configuring EF
                Core to work with older (or newer) versions of Azure Synapse. Defaults to <c>30</c>.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://learn.microsoft.com/en-us/sql/t-sql/statements/alter-database-scoped-configuration-transact-sql">
                    Azure Synapse documentation on compatibility level
                </see>
                for more information and examples.
            </remarks>
            <param name="compatibilityLevel"><see langword="false" /> to have null resource</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.SqlEngineDbContextOptionsBuilder">
            <summary>
                Allows SQL Server, Azure SQL, Azure Synapse specific configuration to be performed on <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />.
            </summary>
            <remarks>
                Instances of this class are returned from a call to
                <see cref="O:SqlServerDbContextOptionsExtensions.ConfigureSqlEngine" />
                and it is not designed to be directly constructed in your application code.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlEngineDbContextOptionsBuilder.#ctor(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder" /> class.
            </summary>
            <param name="optionsBuilder">The options builder.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlEngineDbContextOptionsBuilder.EnableRetryOnFailure">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to SQL Server, Azure SQL, Azure Synapse. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlEngineDbContextOptionsBuilder.EnableRetryOnFailureByDefault">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> unless it is configured explicitly.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to SQL Server, Azure SQL, Azure Synapse. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlEngineDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32)">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to SQL Server, Azure SQL, Azure Synapse. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    A default value 30 seconds for the maximum default delay is used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlEngineDbContextOptionsBuilder.EnableRetryOnFailure(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to SQL Server, Azure SQL, Azure Synapse. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlEngineDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to SQL Server, Azure SQL, Azure Synapse. It is pre-configured with
                    error numbers for transient errors that can be retried, but additional error numbers can also be supplied.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="maxRetryCount">The maximum number of retry attempts.</param>
            <param name="maxRetryDelay">The maximum delay between retries.</param>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder">
            <summary>
                Allows SQL Server specific configuration to be performed on <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />.
            </summary>
            <remarks>
                Instances of this class are returned from a call to
                <see cref="O:SqlServerDbContextOptionsExtensions.UseSqlServer" />
                and it is not designed to be directly constructed in your application code.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder.#ctor(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder" /> class.
            </summary>
            <param name="optionsBuilder">The options builder.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder.EnableRetryOnFailure">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to SQL Server. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32)">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to SQL Server. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    A default value 30 seconds for the maximum default delay is used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder.EnableRetryOnFailure(System.Collections.Generic.ICollection{System.Int32})">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to SQL Server. It is pre-configured with
                    error numbers for transient errors that can be retried.
                </para>
                <para>
                    Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder.EnableRetryOnFailure(System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Configures the context to use the default retrying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to SQL Server. It is pre-configured with
                    error numbers for transient errors that can be retried, but additional error numbers can also be supplied.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
            <param name="maxRetryCount">The maximum number of retry attempts.</param>
            <param name="maxRetryDelay">The maximum delay between retries.</param>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder.UseCompatibilityLevel(System.Int32)">
            <summary>
                Sets the SQL Server compatibility level that EF Core will use when interacting with the database. This allows configuring EF
                Core to work with older (or newer) versions of SQL Server. Defaults to <c>150</c> (SQL Server 2019).
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                <see href="https://learn.microsoft.com/sql/t-sql/statements/alter-database-transact-sql-compatibility-level">
                    SQL Server
                    documentation on compatibility level
                </see>
                for more information and examples.
            </remarks>
            <param name="compatibilityLevel"><see langword="false" /> to have null resource</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder.UseAzureSqlDefaults(System.Boolean)">
            <summary>
                Configures the context to use defaults optimized for Azure SQL, including retries on errors.
            </summary>
            <param name="enable">Whether the defaults should be enabled.</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalPeriodPropertyBuilder">
            <summary>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalPeriodPropertyBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalPeriodPropertyBuilder.HasColumnName(System.String)">
            <summary>
                Configures the column name the period property maps to.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <param name="name">The name of the column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalPeriodPropertyBuilder.HasPrecision(System.Int32)">
            <summary>
                Configures the precision of the period property.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <param name="precision">The precision of the period property.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalPeriodPropertyBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalPeriodPropertyBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalPeriodPropertyBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder">
            <summary>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder.UseHistoryTable(System.String)">
            <summary>
                Configures a history table for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <param name="name">The name of the history table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder.UseHistoryTable(System.String,System.String)">
            <summary>
                Configures a history table for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <param name="name">The name of the history table.</param>
            <param name="schema">The schema of the history table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder.HasPeriodStart(System.String)">
            <summary>
                Returns an object that can be used to configure a period start property of the entity type mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <param name="propertyName">The name of the period start property.</param>
            <returns>An object that can be used to configure the period start property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder.HasPeriodEnd(System.String)">
            <summary>
                Returns an object that can be used to configure a period end property of the entity type mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <param name="propertyName">The name of the period end property.</param>
            <returns>An object that can be used to configure the period end property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder`2">
            <summary>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </summary>
            <typeparam name="TOwnerEntity">The entity type owning the relationship.</typeparam>
            <typeparam name="TDependentEntity">The dependent entity type of the relationship.</typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder`2.#ctor(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder`2.UseHistoryTable(System.String)">
            <summary>
                Configures a history table for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <param name="name">The name of the history table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationTemporalTableBuilder`2.UseHistoryTable(System.String,System.String)">
            <summary>
                Configures a history table for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <param name="name">The name of the history table.</param>
            <param name="schema">The schema of the history table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder">
            <summary>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder.HasColumnName(System.String)">
            <summary>
                Configures the column name the period property maps to.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="name">The name of the column.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder.HasPrecision(System.Int32)">
            <summary>
                Configures the precision of the period property.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information.
            </remarks>
            <param name="precision">The precision of the period property.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalPeriodPropertyBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder">
            <summary>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.UseHistoryTable(System.String)">
            <summary>
                Configures a history table for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="name">The name of the history table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.UseHistoryTable(System.String,System.String)">
            <summary>
                Configures a history table for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="name">The name of the history table.</param>
            <param name="schema">The schema of the history table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.HasPeriodStart(System.String)">
            <summary>
                Returns an object that can be used to configure a period start property of the entity type mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyName">The name of the period start property.</param>
            <returns>An object that can be used to configure the period start property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.HasPeriodEnd(System.String)">
            <summary>
                Returns an object that can be used to configure a period end property of the entity type mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="propertyName">The name of the period end property.</param>
            <returns>An object that can be used to configure the period end property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder`1">
            <summary>
                Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                and it is not designed to be directly constructed in your application code.
            </summary>
            <typeparam name="TEntity">The entity type being configured.</typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder`1.UseHistoryTable(System.String)">
            <summary>
                Configures a history table for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="name">The name of the history table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TemporalTableBuilder`1.UseHistoryTable(System.String,System.String)">
            <summary>
                Configures a history table for the entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-temporal">Using SQL Server temporal tables with EF Core</see>
                for more information and examples.
            </remarks>
            <param name="name">The name of the history table.</param>
            <param name="schema">The schema of the history table.</param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerConventionSetBuilder">
            <summary>
                A builder for building conventions for SQL Server.
            </summary>
            <remarks>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" /> and multiple registrations
                    are allowed. This means that each <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own
                    set of instances of this service.
                    The implementations may depend on other services registered with any lifetime.
                    The implementations do not need to be thread-safe.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerConventionSetBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerConventionSetBuilder" /> instance.
            </summary>
            <param name="dependencies">The core dependencies for this service.</param>
            <param name="relationalDependencies">The relational dependencies for this service.</param>
            <param name="sqlGenerationHelper">The SQL generation helper to use.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerConventionSetBuilder.CreateConventionSet">
            <summary>
                Builds and returns the convention set for the current database provider.
            </summary>
            <returns>The convention set for the current database provider.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerConventionSetBuilder.Build">
            <summary>
                Call this method to build a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" /> for SQL Server when using
                the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> outside of <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />.
            </summary>
            <remarks>
                Note that it is unusual to use this method. Consider using <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> in the normal way instead.
            </remarks>
            <returns>The convention set.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerConventionSetBuilder.CreateModelBuilder">
            <summary>
                Call this method to build a <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> for SQL Server outside of <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)" />.
            </summary>
            <remarks>
                Note that it is unusual to use this method. Consider using <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> in the normal way instead.
            </remarks>
            <returns>The convention set.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerDbFunctionConvention">
            <summary>
                A convention that ensures that <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.Schema" /> is populated for database functions which
                have <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IReadOnlyDbFunction.IsBuiltIn" /> flag set to <see langword="false" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerDbFunctionConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerDbFunctionConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerDbFunctionConvention.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerDbFunctionConvention.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerDbFunctionConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention">
            <summary>
                A convention that configures the filter for unique non-clustered indexes with nullable columns
                to filter out null values.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
            <param name="sqlGenerationHelper">SQL command generation helper service.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention.ProcessEntityTypeBaseTypeChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType})">
            <summary>
                Called after the base type of an entity type changes.
            </summary>
            <param name="entityTypeBuilder">The builder for the entity type.</param>
            <param name="newBaseType">The new base entity type.</param>
            <param name="oldBaseType">The old base entity type.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention.ProcessIndexAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder})">
            <summary>
                Called after an index is added to the entity type.
            </summary>
            <param name="indexBuilder">The builder for the index.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention.ProcessIndexUniquenessChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{System.Nullable{System.Boolean}})">
            <summary>
                Called after the uniqueness for an index is changed.
            </summary>
            <param name="indexBuilder">The builder for the index.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention.ProcessPropertyNullabilityChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{System.Nullable{System.Boolean}})">
            <summary>
                Called after the nullability for a property is changed.
            </summary>
            <param name="propertyBuilder">The builder for the property.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention.ProcessIndexAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <summary>
                Called after an annotation is changed on an index.
            </summary>
            <param name="indexBuilder">The builder for the index.</param>
            <param name="name">The annotation name.</param>
            <param name="annotation">The new annotation.</param>
            <param name="oldAnnotation">The old annotation.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerIndexConvention.ProcessPropertyAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <summary>
                Called after an annotation is changed on a property.
            </summary>
            <param name="propertyBuilder">The builder for the property.</param>
            <param name="name">The annotation name.</param>
            <param name="annotation">The new annotation.</param>
            <param name="oldAnnotation">The old annotation.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerMemoryOptimizedTablesConvention">
            <summary>
                A convention that configures indexes as non-clustered for memory-optimized tables.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerMemoryOptimizedTablesConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerMemoryOptimizedTablesConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerMemoryOptimizedTablesConvention.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerMemoryOptimizedTablesConvention.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerMemoryOptimizedTablesConvention.ProcessEntityTypeAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <summary>
                Called after an annotation is changed on an entity type.
            </summary>
            <param name="entityTypeBuilder">The builder for the entity type.</param>
            <param name="name">The annotation name.</param>
            <param name="annotation">The new annotation.</param>
            <param name="oldAnnotation">The old annotation.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerMemoryOptimizedTablesConvention.ProcessKeyAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder})">
            <summary>
                Called after a key is added to the entity type.
            </summary>
            <param name="keyBuilder">The builder for the key.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerMemoryOptimizedTablesConvention.ProcessIndexAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder})">
            <summary>
                Called after an index is added to the entity type.
            </summary>
            <param name="indexBuilder">The builder for the index.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOnDeleteConvention">
            <summary>
                A convention that configures the OnDelete behavior for foreign keys on the join entity type for
                self-referencing skip navigations
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOnDeleteConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOnDeleteConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOnDeleteConvention.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOnDeleteConvention.ProcessSkipNavigationForeignKeyChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder,Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOnDeleteConvention.GetTargetDeleteBehavior(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOnDeleteConvention.ProcessEntityTypeAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOutputClauseConvention">
            <summary>
                A convention that configures tables with triggers to not use the OUTPUT clause when saving changes.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOutputClauseConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerDbFunctionConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOutputClauseConvention.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOutputClauseConvention.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOutputClauseConvention.ProcessTriggerAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerOutputClauseConvention.ProcessTriggerRemoved(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerRuntimeModelConvention">
            <summary>
                A convention that creates an optimized copy of the mutable model.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerRuntimeModelConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerRuntimeModelConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerRuntimeModelConvention.ProcessModelAnnotations(System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Metadata.RuntimeModel,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerRuntimeModelConvention.ProcessPropertyAnnotations(System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerRuntimeModelConvention.ProcessPropertyOverridesAnnotations(System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.EntityFrameworkCore.Metadata.IRelationalPropertyOverrides,Microsoft.EntityFrameworkCore.Metadata.RuntimeRelationalPropertyOverrides,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerRuntimeModelConvention.ProcessIndexAnnotations(System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.RuntimeIndex,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerRuntimeModelConvention.ProcessKeyAnnotations(System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.RuntimeKey,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerRuntimeModelConvention.ProcessEntityTypeAnnotations(System.Collections.Generic.Dictionary{System.String,System.Object},Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerSharedTableConvention">
            <summary>
                A convention that manipulates names of database objects for entity types that share a table to avoid clashes.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerSharedTableConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerSharedTableConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerSharedTableConvention.IndexesUniqueAcrossTables">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerSharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerSharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerStoreGenerationConvention">
            <summary>
                A convention that ensures that properties aren't configured to have a default value, as computed column
                or using a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> at the same time.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerStoreGenerationConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerStoreGenerationConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerStoreGenerationConvention.ProcessPropertyAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <summary>
                Called after an annotation is changed on a property.
            </summary>
            <param name="propertyBuilder">The builder for the property.</param>
            <param name="name">The annotation name.</param>
            <param name="annotation">The new annotation.</param>
            <param name="oldAnnotation">The old annotation.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerStoreGenerationConvention.Validate(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerTemporalConvention">
            <summary>
                A convention that manipulates temporal settings for an entity mapped to a temporal table.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerTemporalConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerTemporalConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies">Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerTemporalConvention.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerTemporalConvention.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerTemporalConvention.ProcessEntityTypeAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerTemporalConvention.ProcessSkipNavigationForeignKeyChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder,Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerTemporalConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationConvention">
            <summary>
                A convention that configures store value generation as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" /> on properties that are
                part of the primary key and not part of any foreign keys, were configured to have a database default value
                or were configured to use a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" />.
                It also configures properties as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAddOrUpdate" /> if they were configured as computed columns.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationConvention.ProcessPropertyAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <summary>
                Called after an annotation is changed on a property.
            </summary>
            <param name="propertyBuilder">The builder for the property.</param>
            <param name="name">The annotation name.</param>
            <param name="annotation">The new annotation.</param>
            <param name="oldAnnotation">The old annotation.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationConvention.ProcessEntityTypeAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <summary>
                Called after an annotation is changed on an entity.
            </summary>
            <param name="entityTypeBuilder">The builder for the entity type.</param>
            <param name="name">The annotation name.</param>
            <param name="annotation">The new annotation.</param>
            <param name="oldAnnotation">The old annotation.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationConvention.GetValueGenerated(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the store value generation strategy to set for the given property.
            </summary>
            <param name="property">The property.</param>
            <returns>The store value generation strategy to set for the given property.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationConvention.GetValueGenerated(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the store value generation strategy to set for the given property.
            </summary>
            <param name="property">The property.</param>
            <param name="storeObject">The identifier of the store object.</param>
            <returns>The store value generation strategy to set for the given property.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationStrategyConvention">
            <summary>
                A convention that configures the default model <see cref="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy" /> as
                <see cref="F:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.IdentityColumn" />.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationStrategyConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationStrategyConvention" />.
            </summary>
            <param name="dependencies">Parameter object containing dependencies for this convention.</param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationStrategyConvention.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationStrategyConvention.RelationalDependencies">
            <summary>
                Relational provider-specific dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationStrategyConvention.ProcessModelInitialized(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <summary>
                Called after a model is initialized.
            </summary>
            <param name="modelBuilder">The builder for the model.</param>
            <param name="context">Additional information associated with convention execution.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SqlServerValueGenerationStrategyConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerIndexExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerIndexExtensions.AreCompatibleForSqlServer(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerKeyExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlServerKeyExtensions.AreCompatibleForSqlServer(Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey,Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy">
            <summary>
                Defines two strategies to use across the EF Core stack when generating key values
                from SQL Server database columns.
            </summary>
            <remarks>
                See <see href="https://aka.ms/efcore-docs-conventions">Model building conventions</see>, and
                <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server and Azure SQL databases with EF Core</see>
                for more information and examples.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.None">
            <summary>
                No SQL Server-specific strategy
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.SequenceHiLo">
            <summary>
                A sequence-based hi-lo pattern where blocks of IDs are allocated from the server and
                used client-side for generating keys.
            </summary>
            <remarks>
                This is an advanced pattern--only use this strategy if you are certain it is what you need.
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.IdentityColumn">
            <summary>
                A pattern that uses a normal SQL Server <c>Identity</c> column in the same way as EF6 and earlier.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.SqlServerValueGenerationStrategy.Sequence">
            <summary>
                A pattern that uses a database sequence to generate values for the column.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy">
            <summary>
                An <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> implementation for retrying failed executions on SQL Server.
            </summary>
            <remarks>
                <para>
                    This strategy is specifically tailored to SQL Server (including Azure SQL). It is pre-configured with
                    error numbers for transient errors that can be retried. Additional error numbers to retry on can also be supplied.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-connection-resiliency">Connection resiliency and database retries</see>
                    for more information and examples.
                </para>
            </remarks>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy.DefaultMinDelayThrottling">
            <summary>
                The default minimum time delay between retries for throttling errors.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy" />.
            </summary>
            <remarks>
                Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
            </remarks>
            <param name="context">The context on which the operations will be invoked.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy" />.
            </summary>
            <remarks>
                Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
            </remarks>
            <param name="dependencies">Parameter object containing service dependencies.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy" />.
            </summary>
            <remarks>
                A default value 30 seconds for the maximum default delay is used.
            </remarks>
            <param name="context">The context on which the operations will be invoked.</param>
            <param name="maxRetryCount">The maximum number of retry attempts.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies,System.Int32)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy" />.
            </summary>
            <remarks>
                A default value 30 seconds for the maximum default delay is used.
            </remarks>
            <param name="dependencies">Parameter object containing service dependencies.</param>
            <param name="maxRetryCount">The maximum number of retry attempts.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy" />.
            </summary>
            <remarks>
                Default values of 6 for the maximum retry count and 30 seconds for the maximum default delay are used.
            </remarks>
            <param name="dependencies">Parameter object containing service dependencies.</param>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.DbContext,System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy" />.
            </summary>
            <param name="context">The context on which the operations will be invoked.</param>
            <param name="maxRetryCount">The maximum number of retry attempts.</param>
            <param name="maxRetryDelay">The maximum delay between retries.</param>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies,System.Int32,System.TimeSpan,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy" />.
            </summary>
            <param name="dependencies">Parameter object containing service dependencies.</param>
            <param name="maxRetryCount">The maximum number of retry attempts.</param>
            <param name="maxRetryDelay">The maximum delay between retries.</param>
            <param name="errorNumbersToAdd">Additional SQL error numbers that should be considered transient.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy.AdditionalErrorNumbers">
            <summary>
                Additional SQL error numbers that should be considered transient.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy.ShouldRetryOn(System.Exception)">
            <summary>
                Determines whether the specified exception represents a transient failure that can be
                compensated by a retry. Additional exceptions to retry on can be passed to the constructor.
            </summary>
            <param name="exception">The exception object to be verified.</param>
            <returns>
                <see langword="true" /> if the specified exception is considered as transient, otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.SqlServerRetryingExecutionStrategy.GetNextDelay(System.Exception)">
            <summary>
                Determines whether the operation should be retried and the delay before the next attempt.
            </summary>
            <param name="lastException">The exception thrown during the last execution attempt.</param>
            <returns>
                Returns the delay indicating how long to wait for before the next execution attempt if the operation should be retried;
                <see langword="null" /> otherwise
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2">
            <summary>
            Represents a dictionary with non-null unique values that contains an inverse dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> class that is empty,
            has the default initial capacity, and uses the default equality comparers.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> class that is empty,
            has the specified initial capacity, and uses the default equality comparers.
            </summary>
            <param name="capacity">The initial number of elements that <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> can contain.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> class
            that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>
            and uses the default equality comparers.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> class
            that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            and uses the default equality comparers.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to the new <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> class that is empty,
            has the default initial capacity, and uses the specified equality comparers.
            </summary>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing keys, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the key.</param>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing values, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the value.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> class that is empty,
            has the specified initial capacity, and uses the specified equality comparers.
            </summary>
            <param name="capacity">The initial number of elements that <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> can contain.</param>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing keys, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the key.</param>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing values, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the value.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> class that
            contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>, and uses the specified equality comparers.
            </summary>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.IDictionary`2"/> whose elements are copied to the new <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.</param>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing keys, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the key.</param>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing values, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the value.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> class that
            contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>, and uses the specified equality comparers.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose elements are copied to the new <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.</param>
            <param name="keyComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing keys, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the key.</param>
            <param name="valueComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when
            comparing values, or null to use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for the type of the value.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.Inverse">
            <summary>
            Gets the inverse <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.KeyValueComparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to determine equality of keys for the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.ValueComparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that is used to determine equality of values for the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a
            <see cref="T:System.Collections.Generic.KeyNotFoundException"/>, and a set operation creates a new element with the specified key.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns><see langword="true"/> if the element is successfully found and removed; otherwise, <see langword="false"/>.
            This method returns <see langword="false"/> if key is not found in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.Remove(`0,`1@)">
            <summary>
            Removes the value with the specified key from the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <param name="value">When this method returns, contains the value associated with the specified key,
            if the key is found; otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the element is successfully found and removed; otherwise, <see langword="false"/>.
            This method returns <see langword="false"/> if key is not found in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> contains
            an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.ContainsValue(`1)">
            <summary>
            Determines whether the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> contains the specified value.
            </summary>
            <param name="value">The value to locate in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> contains
            an element with the specified value; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.TryAdd(`0,`1)">
            <summary>
            Attempts to add the specified key and value to the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add.</param>
            <returns><see langword="true"/> if the key/value pair was added to the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/>
            successfully; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key,
            if the key is found; otherwise, the default value for the type of the value parameter.
            This parameter is passed uninitialized.</param>
            <returns><see langword="true"/> if the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"/> contains
            an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.EnsureCapacity(System.Int32)">
            <summary>
            Resizes the internal data structure if necessary to ensure no additional resizing to support the specified capacity.
            </summary>
            <param name="capacity">The number of elements that the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2" /> must be able to contain.</param>
            <returns>The capacity of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.TrimExcess">
            <summary>
            Sets the capacity of an <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2" /> object to the actual number of elements it contains,
            rounded up to a nearby, implementation-specific value.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.TrimExcess(System.Int32)">
            <summary>
            Sets the capacity of an <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2" /> object to the specified capacity, rounded up to a nearby,
            implementation-specific value.
            </summary>
            <param name="capacity">The number of elements that the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2" /> must be able to contain.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2.AsReadOnly">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"></see> wrapper for the current dictionary.
            </summary>
            <returns>An object that acts as a read-only wrapper around the current <see cref="T:Microsoft.EntityFrameworkCore.Utilities.BidirectionalDictionary`2"></see>.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2">
            <summary>
            Represents an ordered collection of keys and values with the same performance as <see cref="T:System.Collections.Generic.Dictionary`2"/> with O(1) lookups and adds but with O(n) inserts and removes.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Count">
            <summary>
            Gets the number of key/value pairs contained in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.
            </summary>
            <returns>The number of key/value pairs contained in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Comparer">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> that is used to determine equality of keys for the dictionary.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface implementation that is used to determine equality of keys for the current <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> and to provide hash values for the keys.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.
            </summary>
            <returns>An <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection" /> containing the keys in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.
            </summary>
            <returns>An <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection" /> containing the values in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key as an O(1) operation.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> does not exist in the collection.</exception>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index as an O(1) operation.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The value at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Count" />.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1" /> and uses the default equality comparer for the key type.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are copied to the new <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="collection" /> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IEnumerable`1" /> and uses the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
            <param name="collection">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are copied to the new <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> for the type of the key.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="collection" /> contains one or more duplicate keys.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds the specified key and value to the dictionary as an O(1) operation.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Clear">
            <summary>
            Removes all keys and values from the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> contains the specified key as an O(1) operation.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</param>
            <returns>true if the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.EnsureCapacity(System.Int32)">
            <summary>
            Resizes the internal data structure if necessary to ensure no additional resizing to support the specified capacity.
            </summary>
            <param name="capacity">The number of elements that the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> must be able to contain.</param>
            <returns>The capacity of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity" /> is less than 0.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.
            </summary>
            <returns>An <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Enumerator" /> structure for the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.GetOrAdd(`0,`1)">
            <summary>
            Adds a key/value pair to the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> if the key does not already exist as an O(1) operation.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value to be added, if the key does not already exist.</param>
            <returns>The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.GetOrAdd(`0,System.Func{`1})">
            <summary>
            Adds a key/value pair to the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> by using the specified function, if the key does not already exist as an O(1) operation.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a value for the key.</param>
            <returns>The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.-or-<paramref name="valueFactory"/> is null.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.IndexOf(`0)">
            <summary>
            Returns the zero-based index of the element with the specified key within the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> as an O(1) operation.
            </summary>
            <param name="key">The key of the element to locate.</param>
            <returns>The zero-based index of the element with the specified key within the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts the specified key/value pair into the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> at the specified index as an O(n) operation.
            </summary>
            <param name="index">The zero-based index of the key/value pair to insert.</param>
            <param name="key">The key of the element to insert.</param>
            <param name="value">The value of the element to insert.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than 0.-or-<paramref name="index" /> is greater than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Count" />.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Insert(`0,`1)">
            <summary>
            Inserts the element in this sorted dictionary to the corresponding index using the default comparer.
            </summary>
            <param name="key">The key of the element to insert.</param>
            <param name="value">The value of the element to insert.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Insert(`0,`1,System.Collections.Generic.IComparer{`0})">
            <summary>
            Inserts the element in this sorted dictionary to the corresponding index using the default comparer.
            </summary>
            <param name="key">The key of the element to insert.</param>
            <param name="value">The value of the element to insert.</param>
            <param name="comparer">The comparer to use.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Move(System.Int32,System.Int32)">
            <summary>
            Moves the element at the specified fromIndex to the specified toIndex while re-arranging the elements in between.
            </summary>
            <param name="fromIndex">The zero-based index of the element to move.</param>
            <param name="toIndex">The zero-based index to move the element to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="fromIndex"/> is less than 0.
            -or-
            <paramref name="fromIndex"/> is equal to or greater than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Count" />
            -or-
            <paramref name="toIndex"/> is less than 0.
            -or-
            <paramref name="toIndex"/> is equal to or greater than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Count" />
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.MoveRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the specified number of elements at the specified fromIndex to the specified toIndex while re-arranging the elements in between.
            </summary>
            <param name="fromIndex">The zero-based index of the elements to move.</param>
            <param name="toIndex">The zero-based index to move the elements to.</param>
            <param name="count">The number of elements to move.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="fromIndex"/> is less than 0.
            -or-
            <paramref name="fromIndex"/> is equal to or greater than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Count" />.
            -or-
            <paramref name="toIndex"/> is less than 0.
            -or-
            <paramref name="toIndex"/> is equal to or greater than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Count" />.
            -or-
            <paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fromIndex"/> + <paramref name="count"/> is greater than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Count" />.
            -or-
            <paramref name="toIndex"/> + <paramref name="count"/> is greater than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Count" />.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the value with the specified key from the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> as an O(n) operation.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if <paramref name="key" /> is not found in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Remove(`0,`1@)">
            <summary>
            Removes the value with the specified key from the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> and returns the value as an O(n) operation.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if <paramref name="key" /> is not found in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the value at the specified index from the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> as an O(n) operation.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Count" />.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.TrimExcess">
            <summary>
            Sets the capacity of an <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.TrimExcess(System.Int32)">
            <summary>
            Sets the capacity of an <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> object to the specified capacity, rounded up to a nearby, implementation-specific value.
            </summary>
            <param name="capacity">The number of elements that the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> must be able to contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Count" />.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.TryAdd(`0,`1)">
            <summary>
            Tries to add the specified key and value to the dictionary as an O(1) operation.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null for reference types.</param>
            <returns>true if the element was added to the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />; false if the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> already contained an element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key as an O(1) operation.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>true if the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
            <returns>The element in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" /> at the current position of the enumerator.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Enumerator" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection">
            <summary>
            Represents the collection of keys in a <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection" />.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection.Item(System.Int32)">
            <summary>
            Gets the key at the specified index as an O(1) operation.
            </summary>
            <param name="index">The zero-based index of the key to get.</param>
            <returns>The key at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection.Count" />.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection" />.
            </summary>
            <returns>A <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection.Enumerator" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection" />.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
            <returns>The element in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection" /> at the current position of the enumerator.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection.Enumerator" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.KeyCollection" />.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection">
            <summary>
            Represents the collection of values in a <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2" />. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection" />.</returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection.Item(System.Int32)">
            <summary>
            Gets the value at the specified index as an O(1) operation.
            </summary>
            <param name="index">The zero-based index of the value to get.</param>
            <returns>The value at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> is less than 0.-or-<paramref name="index" /> is equal to or greater than <see cref="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection.Count" />.</exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection" />.
            </summary>
            <returns>A <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection.Enumerator" /> for the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection" />.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection.Enumerator">
            <summary>
            Enumerates the elements of a <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
            <returns>The element in the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection" /> at the current position of the enumerator.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection.Enumerator" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="T:Microsoft.EntityFrameworkCore.Utilities.OrderedDictionary`2.ValueCollection" />.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions">
            <summary>
                SQL Server, Azure SQL, Azure Synapse specific extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddSqlServer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder},System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
                Registers the given Entity Framework <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
                and configures it to connect to a SQL Server database.
            </summary>
            <remarks>
                <para>
                    This method is a shortcut for configuring a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> to use SQL Server. It does not support all options.
                    Use <see cref="O:EntityFrameworkServiceCollectionExtensions.AddDbContext" /> and related methods for full control of
                    this process.
                </para>
                <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure the SQL Server provider and connection string.
                </para>
                <para>
                    To configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> for the context, either override the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context, or supply
                    an optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> for more information and examples.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <typeparam name="TContext">The type of context to be registered.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="sqlServerOptionsAction">An optional action to allow additional SQL Server specific configuration.</param>
            <param name="optionsAction">An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context.</param>
            <returns>The same service collection so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddEntityFrameworkSqlServer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                <para>
                    Adds the services required by the Microsoft SQL Server database provider for Entity Framework
                    to an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                </para>
                <para>
                    Warning: Do not call this method accidentally. It is much more likely you need
                    to call <see cref="M:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddSqlServer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.SqlServerDbContextOptionsBuilder},System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})" />.
                </para>
            </summary>
            <remarks>
                Calling this method is no longer necessary when building most applications, including those that
                use dependency injection in ASP.NET or elsewhere.
                It is only needed when building the internal service provider for use with
                the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" /> method.
                This is not recommend other than for some advanced scenarios.
            </remarks>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddAzureSql``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder},System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
                Registers the given Entity Framework <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
                and configures it to connect to a Azure SQL database.
            </summary>
            <remarks>
                <para>
                    This method is a shortcut for configuring a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> to use Azure SQL. It does not support all options.
                    Use <see cref="O:EntityFrameworkServiceCollectionExtensions.AddDbContext" /> and related methods for full control of
                    this process.
                </para>
                <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure the Azure SQL provider and connection string.
                </para>
                <para>
                    To configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> for the context, either override the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context, or supply
                    an optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> for more information and examples.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <typeparam name="TContext">The type of context to be registered.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="azureSqlOptionsAction">An optional action to allow additional Azure SQL specific configuration.</param>
            <param name="optionsAction">An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context.</param>
            <returns>The same service collection so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddEntityFrameworkAzureSql(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                <para>
                    Adds the services required by the Microsoft Azure SQL database provider for Entity Framework
                    to an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                </para>
                <para>
                    Warning: Do not call this method accidentally. It is much more likely you need
                    to call <see cref="M:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddAzureSql``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSqlDbContextOptionsBuilder},System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})" />.
                </para>
            </summary>
            <remarks>
                Calling this method is no longer necessary when building most applications, including those that
                use dependency injection in ASP.NET or elsewhere.
                It is only needed when building the internal service provider for use with
                the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" /> method.
                This is not recommend other than for some advanced scenarios.
            </remarks>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddAzureSynapse``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder},System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})">
            <summary>
                Registers the given Entity Framework <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> as a service in the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
                and configures it to connect to a Azure Synapse database.
            </summary>
            <remarks>
                <para>
                    This method is a shortcut for configuring a <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> to use Azure Synapse. It does not support all options.
                    Use <see cref="O:EntityFrameworkServiceCollectionExtensions.AddDbContext" /> and related methods for full control of
                    this process.
                </para>
                <para>
                    Use this method when using dependency injection in your application, such as with ASP.NET Core.
                    For applications that don't use dependency injection, consider creating <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances directly with its constructor. The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method can then be
                    overridden to configure the Azure Synapse provider and connection string.
                </para>
                <para>
                    To configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions`1" /> for the context, either override the
                    <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method in your derived context, or supply
                    an optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-di">Using DbContext with dependency injection</see> for more information and examples.
                </para>
                <para>
                    See <see href="https://aka.ms/efcore-docs-dbcontext-options">Using DbContextOptions</see>, and
                    <see href="https://aka.ms/efcore-docs-sqlserver">Accessing SQL Server, Azure SQL, Azure Synapse databases with EF Core</see>
                    for more information and examples.
                </para>
            </remarks>
            <typeparam name="TContext">The type of context to be registered.</typeparam>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <param name="connectionString">The connection string of the database to connect to.</param>
            <param name="azureSynapseOptionsAction">An optional action to allow additional Azure Synapse specific configuration.</param>
            <param name="optionsAction">An optional action to configure the <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" /> for the context.</param>
            <returns>The same service collection so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddEntityFrameworkAzureSynapse(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                <para>
                    Adds the services required by the Microsoft Azure Synapse database provider for Entity Framework
                    to an <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
                </para>
                <para>
                    Warning: Do not call this method accidentally. It is much more likely you need
                    to call <see cref="M:Microsoft.Extensions.DependencyInjection.SqlServerServiceCollectionExtensions.AddAzureSynapse``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Microsoft.EntityFrameworkCore.Infrastructure.AzureSynapseDbContextOptionsBuilder},System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder})" />.
                </para>
            </summary>
            <remarks>
                Calling this method is no longer necessary when building most applications, including those that
                use dependency injection in ASP.NET or elsewhere.
                It is only needed when building the internal service provider for use with
                the <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseInternalServiceProvider(System.IServiceProvider)" /> method.
                This is not recommend other than for some advanced scenarios.
            </remarks>
            <param name="serviceCollection">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
            <returns>
                The same service collection so that multiple calls can be chained.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitorExtensions.Visit(System.Linq.Expressions.ExpressionVisitor,System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.Expression})">
            <summary>
                Dispatches the list of expressions to one of the more specialized visit methods in this class.
            </summary>
            <param name="visitor">The expression visitor.</param>
            <param name="nodes">The expressions to visit.</param>
            <returns>
                The modified expression list, if any of the elements were modified; otherwise, returns the original expression list.
            </returns>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitorExtensions.VisitAndConvert``1(System.Linq.Expressions.ExpressionVisitor,System.Collections.Generic.IReadOnlyList{``0},System.String)">
            <summary>
                Visits an expression, casting the result back to the original expression type.
            </summary>
            <typeparam name="T">The type of the expression.</typeparam>
            <param name="visitor">The expression visitor.</param>
            <param name="nodes">The expression to visit.</param>
            <param name="callerName">The name of the calling method; used to report to report a better error message.</param>
            <returns>
                The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
            <exception cref="T:System.InvalidOperationException">The visit method for this node returned a different type.</exception>
        </member>
        <member name="M:System.Linq.Expressions.ExpressionVisitorExtensions.Visit``1(System.Linq.Expressions.ExpressionVisitor,System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``0})">
            <summary>
                Visits all nodes in the collection using a specified element visitor.
            </summary>
            <typeparam name="T">The type of the nodes.</typeparam>
            <param name="visitor">The expression visitor.</param>
            <param name="nodes">The nodes to visit.</param>
            <param name="elementVisitor">
                A delegate that visits a single element,
                optionally replacing it with a new element.
            </param>
            <returns>
                The modified node list, if any of the elements were modified;
                otherwise, returns the original node list.
            </returns>
        </member>
        <member name="M:System.SharedTypeExtensions.DisplayName(System.Type,System.Boolean,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
    </members>
</doc>
