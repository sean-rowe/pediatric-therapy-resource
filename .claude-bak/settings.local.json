{
  "permissions": {
    "allow": [
      "Bash(docker build:*)",
      "Bash(docker-compose up:*)",
      "Bash(find:*)",
      "Bash(dotnet build:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(dotnet test:*)",
      "Bash(npm install)",
      "Bash(chmod:*)",
      "Bash(/tmp/create-demo-recording.sh:*)",
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(./dotnet-docker.sh test:*)",
      "Bash(timeout:*)",
      "Bash(mkdir:*)",
      "Bash(/home/srowe/workspace/pediatric-therapy-resource/count-scenarios.sh:*)",
      "Bash(# Move files to appropriate subdirectories\nmv features/billing-insurance.feature features/admin/\nmv features/caseload-management.feature features/therapy/\nmv features/compliance-reporting.feature features/compliance/\nmv features/content-generation.feature features/ai/\nmv features/digital-evaluations.feature features/therapy/\nmv features/iep-goal-tracking.feature features/students/\nmv features/parent-portal.feature features/communication/\nmv features/reporting-analytics.feature features/analytics/reporting-analytics-duplicate.feature\nmv features/session-documentation.feature features/therapy/\nmv features/student-management.feature features/students/student-management-duplicate.feature\nmv features/system-administration.feature features/admin/\nmv features/teletherapy.feature features/therapy/\nmv features/user-authentication.feature features/auth/user-authentication-duplicate.feature)",
      "Bash(rm:*)",
      "Bash(python:*)",
      "Bash(# Update therapy-planning.feature\nsed -i '1s/Feature: Therapy Planning API Endpoints/Feature: Therapy Planning API Endpoints (FR-003)/' features/therapy/therapy-planning.feature\n\n# Update data-collection.feature  \nsed -i '1s/Feature: Data Collection API Endpoints/Feature: Data Collection API Endpoints (FR-004)/' features/therapy/data-collection.feature\n\n# Update resource-creation.feature\nsed -i '1s/Feature: Resource Creation and Management API Endpoints/Feature: Resource Creation and Management API Endpoints (FR-005)/' features/resources/resource-creation.feature\n\n# Update ai-generation.feature\nsed -i '1s/Feature: AI Content Generation API Endpoints/Feature: AI Content Generation API Endpoints (FR-006, FR-007)/' features/ai/ai-generation.feature\n\n# Update marketplace features\nsed -i '1s/Feature: Marketplace Seller API Endpoints/Feature: Marketplace Seller API Endpoints (FR-008, FR-011)/' features/marketplace/seller-management.feature\n\n# Update student-management.feature\nsed -i '1s/Feature: Student Management API Endpoints/Feature: Student Management API Endpoints (FR-012)/' features/students/student-management.feature\n\necho \"Updated FR labels\")",
      "Bash(echo:*)",
      "Bash(./count-scenarios.sh:*)",
      "Bash(cp:*)",
      "Bash(../../dotnet-docker.sh test:*)",
      "Bash(../dotnet-docker.sh test Tests.BDD/TherapyDocs.Api.Tests.BDD.csproj)",
      "Bash(../dotnet-docker.sh build Tests.BDD/TherapyDocs.Api.Tests.BDD.csproj)",
      "Bash(./dotnet-docker.sh build:*)",
      "Bash(../../dotnet-docker.sh build:*)",
      "Bash(docker run:*)",
      "Bash(./Tests/run-bdd-tests.sh:*)",
      "Bash(dotnet restore:*)",
      "Bash(/home/srowe/workspace/pediatric-therapy-resource/fix-table-init.sh:*)",
      "Bash(sed:*)",
      "Bash(dotnet clean:*)",
      "Bash(dotnet --list-sdks)",
      "Bash(dotnet --version)",
      "Bash(dotnet run:*)",
      "Bash(for:*)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(wc:*)",
      "Bash(done)",
      "Bash(touch:*)",
      "Bash(ln:*)",
      "Bash(mv:*)",
      "Bash(comm:*)",
      "Bash(# Group endpoints by controller\ngrep -r \"\"api/\"\" /home/srowe/workspace/pediatric-therapy-resource/api/Tests/BDD/StepDefinitions/ | grep -oE ''\"\"/api/[^\"\"]+'' | sed ''s/{[^}]*}/{id}/g'' | sort | uniq > /tmp/all-endpoints-clean.txt\n\n# Create controller groups\necho \"\"=== CONTROLLERS AND ENDPOINTS ===\"\" > /tmp/controller-list.txt\nfor controller in $(cat /tmp/all-endpoints-clean.txt | cut -d''/'' -f3 | sort | uniq); do\n  echo -e \"\"\\n$controller Controller:\"\" >> /tmp/controller-list.txt\n  grep \"\"^/api/$controller/\"\" /tmp/all-endpoints-clean.txt | sed \"\"s|^/api/$controller/|  - |\"\" >> /tmp/controller-list.txt\ndone\n\n# Show first part\nhead -100 /tmp/controller-list.txt)",
      "Bash(# Get all unique endpoints grouped by controller\ngrep -r \"\"api/\"\" /home/srowe/workspace/pediatric-therapy-resource/api/Tests/BDD/StepDefinitions/ | grep -oE ''\"\"/api/[^\"\"]+'' | sed ''s/{[^}]*}/{id}/g'' | sort | uniq | awk -F''/'' ''{\n  controller = $3\n  endpoint = substr($0, index($0, $4))\n  if (controller != prev_controller) {\n    if (prev_controller) print \"\"\"\"\n    print controller \"\" Controller:\"\"\n    prev_controller = controller\n  }\n  print \"\"  \"\" endpoint\n}'' | head -200)",
      "Bash(# Get all endpoints and group by controller\ngrep -r \"\"api/\"\" /home/srowe/workspace/pediatric-therapy-resource/api/Tests/BDD/StepDefinitions/ | grep -oE ''\"\"/api/[^\"\"]+'' | sed ''s/{[^}]*}/{id}/g'' | sort | uniq > /tmp/endpoints.txt\n\n# Show AAC endpoints\necho \"\"AACController:\"\"\ngrep \"\"^/api/aac/\"\" /tmp/endpoints.txt | sed ''s|/api/aac/||''\n\necho -e \"\"\\nABAController:\"\"\ngrep \"\"^/api/aba/\"\" /tmp/endpoints.txt | sed ''s|/api/aba/||''\n\necho -e \"\"\\nActivitiesController:\"\"\ngrep \"\"^/api/activities/\"\" /tmp/endpoints.txt | sed ''s|/api/activities/||''\n\necho -e \"\"\\nAdminController:\"\"\ngrep \"\"^/api/admin/\"\" /tmp/endpoints.txt | sed ''s|/api/admin/||'' | head -20)",
      "Bash(# Generate all individual endpoint tasks\ngrep -r \"\"api/\"\" /home/srowe/workspace/pediatric-therapy-resource/api/Tests/BDD/StepDefinitions/ | grep -oE ''\"\"/api/[^\"\"]+'' | sed ''s/{[^}]*}/{id}/g'' | sort | uniq > /tmp/all-endpoints.txt\n\n# Create todo items - first 200\nhead -200 /tmp/all-endpoints.txt | while read endpoint; do\n  controller=$(echo \"\"$endpoint\"\" | cut -d''/'' -f3)\n  path=$(echo \"\"$endpoint\"\" | cut -d''/'' -f4-)\n  echo \"\"{\\\"\"content\\\"\": \\\"\"$controller: $path\\\"\", \\\"\"status\\\"\": \\\"\"pending\\\"\", \\\"\"priority\\\"\": \\\"\"high\\\"\", \\\"\"id\\\"\": \\\"\"$(echo $endpoint | sed ''s/[^a-zA-Z0-9]/-/g'')\\\"\"}\"\"\ndone | head -20)",
      "Bash(# Count how many todos can fit (todo list might have limits)\nwc -l /tmp/all-endpoints.txt)",
      "Bash(# Generate the first 100 individual todo items\nhead -100 /tmp/all-endpoints.txt | while IFS= read -r endpoint; do\n  clean_endpoint=$(echo \"\"$endpoint\"\" | sed ''s/\"\"//g'')\n  controller=$(echo \"\"$clean_endpoint\"\" | cut -d''/'' -f3)\n  path=$(echo \"\"$clean_endpoint\"\" | cut -d''/'' -f4-)\n  id=$(echo \"\"$clean_endpoint\"\" | sed ''s/[^a-zA-Z0-9]/-/g'' | sed ''s/--*/-/g'')\n  echo \"\"{\\\"\"content\\\"\": \\\"\"POST $clean_endpoint\\\"\", \\\"\"status\\\"\": \\\"\"pending\\\"\", \\\"\"priority\\\"\": \\\"\"high\\\"\", \\\"\"id\\\"\": \\\"\"$id\\\"\"},\"\"\ndone | sed ''$ s/,$//'' > /tmp/todos-batch1.json\n\n# Show first 10 to verify format\nhead -10 /tmp/todos-batch1.json)",
      "Bash(# Generate next batch (51-150)\nsed -n ''51,150p'' /tmp/all-endpoints.txt | while IFS= read -r endpoint; do\n  clean_endpoint=$(echo \"\"$endpoint\"\" | sed ''s/\"\"//g'')\n  id=$(echo \"\"$clean_endpoint\"\" | sed ''s/[^a-zA-Z0-9]/-/g'' | sed ''s/--*/-/g'')\n  # Determine if it''s likely GET or POST based on endpoint pattern\n  if echo \"\"$clean_endpoint\"\" | grep -E \"\"(create|add|save|submit|award|complete|start|generate|process|approve|reject)\"\" > /dev/null; then\n    method=\"\"POST\"\"\n  else\n    method=\"\"GET\"\"\n  fi\n  echo \"\"{\\\"\"content\\\"\": \\\"\"$method $clean_endpoint\\\"\", \\\"\"status\\\"\": \\\"\"pending\\\"\", \\\"\"priority\\\"\": \\\"\"high\\\"\", \\\"\"id\\\"\": \\\"\"$id\\\"\"},\"\"\ndone | sed ''$ s/,$//'' > /tmp/todos-batch2.json\n\n# Count items\nwc -l /tmp/todos-batch2.json)",
      "Bash(# Check current todo list size by looking at the response\necho \"\"Current approach: Adding 998 individual endpoint tasks one by one\"\"\necho \"\"This ensures each task is atomic and can be resumed if interrupted\"\")",
      "Bash(# Show a sample of what we''re adding\necho \"\"Sample of remaining endpoints to add:\"\"\nsed -n ''51,60p'' /tmp/all-endpoints.txt | while IFS= read -r endpoint; do\n  clean_endpoint=$(echo \"\"$endpoint\"\" | sed ''s/\"\"//g'')\n  if echo \"\"$clean_endpoint\"\" | grep -E \"\"(create|add|save|submit|award|complete|start|generate|process|approve|reject|register|login)\"\" > /dev/null; then\n    method=\"\"POST\"\"\n  else\n    method=\"\"GET\"\"\n  fi\n  echo \"\"- $method $clean_endpoint\"\"\ndone)",
      "Bash(# Get unique endpoints from step definitions\ngrep -r \"\"WhenISend.*RequestTo\"\" /home/srowe/workspace/pediatric-therapy-resource/api/Tests/BDD/StepDefinitions/ | grep -oE ''\"\"/api/[^\"\"]+'' | sort | uniq | wc -l)",
      "Bash(# Let''s see what endpoints are actually being tested\ngrep -r \"\"WhenISend.*RequestTo\\|Client\\.(Get\\|Post\\|Put\\|Delete)Async\"\" /home/srowe/workspace/pediatric-therapy-resource/api/Tests/BDD/StepDefinitions/ | grep -oE ''\"\"/api/[^\"\"]+'' | sort | uniq > /tmp/tested-endpoints.txt\nwc -l /tmp/tested-endpoints.txt)",
      "Bash(# Show the actual tested endpoints\ncat /tmp/tested-endpoints.txt)",
      "Bash(# Look for step definitions that might be using the endpoints differently\ngrep -r \"\"api/\"\" /home/srowe/workspace/pediatric-therapy-resource/api/Tests/BDD/StepDefinitions/ | grep -v \"\"WhenISend\\|Client\\.\"\" | head -20)",
      "Bash(# Check for hardcoded endpoint strings in step definitions\ngrep -r \"\"\\\"\".*api.*\\\"\"\"\" /home/srowe/workspace/pediatric-therapy-resource/api/Tests/BDD/StepDefinitions/ | grep -oE ''\"\"/api/[^\"\"]+'' | sort | uniq | wc -l)",
      "Bash(# Find actual HTTP calls to endpoints\ngrep -B2 -A2 \"\"WhenISend.*RequestTo\\|Client\\.(Get\\|Post\\|Put\\|Delete)Async\"\" /home/srowe/workspace/pediatric-therapy-resource/api/Tests/BDD/StepDefinitions/*.cs | grep -E \"\"WhenISend|GetAsync|PostAsync|PutAsync|DeleteAsync\"\" | head -20)",
      "Bash(rg:*)",
      "Bash(do echo \"Processing $file\")",
      "Bash(true)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": false
}