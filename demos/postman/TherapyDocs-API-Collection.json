{
  "info": {
    "name": "TherapyDocs API - Complete Demo Collection",
    "description": "Comprehensive API demonstrations for TherapyDocs therapist registration system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "üè• Therapist Registration Flow",
      "item": [
        {
          "name": "1. Register New Therapist (Valid License)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains success message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "    pm.expect(jsonData.message).to.include('Registration successful');",
                  "});",
                  "",
                  "// Save user ID for subsequent tests",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('userId', jsonData.userId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"SecurePass123!\",\n  \"firstName\": \"Dr. {{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"licenseNumber\": \"CA-SLP-{{$randomInt}}\",\n  \"state\": \"CA\",\n  \"licenseType\": \"speech_therapy\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "2. Register with Invalid License",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registration rejected for invalid license', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates license validation failure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('License validation failed');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"SecurePass123!\",\n  \"firstName\": \"Invalid\",\n  \"lastName\": \"License\",\n  \"licenseNumber\": \"INVALID-123\",\n  \"state\": \"CA\",\n  \"licenseType\": \"speech_therapy\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "3. Register with Weak Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Registration rejected for weak password', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates password requirements', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.errors).to.have.property('Password');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{$randomEmail}}\",\n  \"password\": \"123\",\n  \"firstName\": \"Weak\",\n  \"lastName\": \"Password\",\n  \"licenseNumber\": \"CA-SLP-{{$randomInt}}\",\n  \"state\": \"CA\",\n  \"licenseType\": \"speech_therapy\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        }
      ]
    },
    {
      "name": "üìß Email Verification Flow",
      "item": [
        {
          "name": "1. Verify Email with Valid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Email verification successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Account is now verified', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.verified).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{verificationToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "verify-email"]
            }
          }
        },
        {
          "name": "2. Verify Email with Invalid Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Email verification failed for invalid token', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message indicates invalid token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Invalid verification token');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"invalid-token-12345\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/verify-email",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "verify-email"]
            }
          }
        }
      ]
    },
    {
      "name": "üîê Authentication Flow",
      "item": [
        {
          "name": "1. Login with Valid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('JWT token provided', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.not.be.empty;",
                  "    pm.environment.set('authToken', jsonData.token);",
                  "});",
                  "",
                  "pm.test('User information included', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    pm.expect(jsonData.user).to.have.property('firstName');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"therapist@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "2. Login with Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login failed', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error message indicates invalid credentials', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Invalid credentials');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"therapist@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "üö¶ Rate Limiting Tests",
      "item": [
        {
          "name": "Rate Limit Test - Registration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Rate limiting enforced', function () {",
                  "    // After multiple requests, should get 429",
                  "    if (pm.info.iteration > 5) {",
                  "        pm.response.to.have.status(429);",
                  "    }",
                  "});",
                  "",
                  "if (pm.response.code === 429) {",
                  "    pm.test('Rate limit headers present', function () {",
                  "        pm.expect(pm.response.headers.get('X-RateLimit-Limit')).to.not.be.undefined;",
                  "        pm.expect(pm.response.headers.get('X-RateLimit-Remaining')).to.not.be.undefined;",
                  "    });",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"rate{{$randomInt}}@example.com\",\n  \"password\": \"SecurePass123!\",\n  \"firstName\": \"Rate\",\n  \"lastName\": \"Test\",\n  \"licenseNumber\": \"CA-SLP-{{$randomInt}}\",\n  \"state\": \"CA\",\n  \"licenseType\": \"speech_therapy\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        }
      ]
    },
    {
      "name": "‚è±Ô∏è Timing Attack Prevention",
      "item": [
        {
          "name": "Login - Non-existent User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseTime = pm.response.responseTime;",
                  "pm.environment.set('nonExistentUserTime', responseTime);",
                  "",
                  "pm.test('Response time recorded', function () {",
                  "    pm.expect(responseTime).to.be.above(450); // Should be >= 500ms",
                  "    pm.expect(responseTime).to.be.below(600); // But not too much longer",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"nonexistent@example.com\",\n  \"password\": \"anypassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Login - Wrong Password",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "const responseTime = pm.response.responseTime;",
                  "const nonExistentTime = pm.environment.get('nonExistentUserTime');",
                  "",
                  "pm.test('Timing attack prevention verified', function () {",
                  "    const timeDifference = Math.abs(responseTime - nonExistentTime);",
                  "    pm.expect(timeDifference).to.be.below(100); // Within 100ms",
                  "});",
                  "",
                  "console.log(`Non-existent user: ${nonExistentTime}ms`);",
                  "console.log(`Wrong password: ${responseTime}ms`);",
                  "console.log(`Difference: ${Math.abs(responseTime - nonExistentTime)}ms`);"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"therapist@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000"
    }
  ]
}